<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/neutron/doc/source/contributor/testing/template_model_sync_test.rst">
    <comment xml:space="preserve">Licensed under the Apache License, Version 2.0 (the "License"); you may
not use this file except in compliance with the License. You may obtain
a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations
under the License.


Convention for heading levels in Neutron devref:
=======  Heading 0 (reserved for the title in a document)
-------  Heading 1
~~~~~~~  Heading 2
+++++++  Heading 3
'''''''  Heading 4
(Avoid deeper levels because they do not render well.)</comment>
    <section ids="template-for-modelmigrationsync-for-external-repos" names="template\ for\ modelmigrationsync\ for\ external\ repos">
        <title>Template for ModelMigrationSync for external repos</title>
        <paragraph>This section contains a template for a test which checks that the Python models
            for database tables are synchronized with the alembic migrations that create
            the database schema. This test should be implemented in all driver/plugin
            repositories that were split out from Neutron.</paragraph>
        <section ids="what-does-the-test-do" names="what\ does\ the\ test\ do?">
            <title>What does the test do?</title>
            <paragraph>This test compares models with the result of existing migrations. It is based on
                <reference name="ModelsMigrationsSync" refuri="https://docs.openstack.org/oslo.db/latest/reference/api/oslo_db.sqlalchemy.test_migrations.html">ModelsMigrationsSync</reference><target ids="modelsmigrationssync" names="modelsmigrationssync" refuri="https://docs.openstack.org/oslo.db/latest/reference/api/oslo_db.sqlalchemy.test_migrations.html"></target>
                which is provided by oslo.db and was adapted for Neutron. It compares core
                Neutron models and vendor specific models with migrations from Neutron core and
                migrations from the driver/plugin repo. This test is functional - it runs against
                MySQL and PostgreSQL dialects. The detailed description of this test can be
                found in Neutron Database Layer section - <reference internal="True" refuri="../internals/db_layer#testing-database-migrations"><inline classes="std std-ref">Tests to verify that database migrations and models are in sync</inline></reference>.</paragraph>
        </section>
        <section ids="steps-for-implementing-the-test" names="steps\ for\ implementing\ the\ test">
            <title>Steps for implementing the test</title>
            <section ids="import-all-models-in-one-place" names="1.\ import\ all\ models\ in\ one\ place">
                <title>1. Import all models in one place</title>
                <paragraph>Create a module <literal>networking_foo/db/models/head.py</literal> with the following
                    content:</paragraph>
                <literal_block xml:space="preserve">from neutron_lib.db import model_base

from networking_foo import models  # noqa
# Alternatively, import separate modules here if the models are not in one
# models.py file


def get_metadata():
   return model_base.BASEV2.metadata</literal_block>
            </section>
            <section ids="implement-the-test-module" names="2.\ implement\ the\ test\ module">
                <title>2. Implement the test module</title>
                <paragraph>The test uses external.py from Neutron. This file contains lists of table
                    names, which were moved out of Neutron:</paragraph>
                <literal_block xml:space="preserve">VPNAAS_TABLES = [...]

LBAAS_TABLES = [...]

FWAAS_TABLES = [...]

# Arista ML2 driver Models moved to openstack/networking-arista
REPO_ARISTA_TABLES = [...]

# Models moved to openstack/networking-cisco
REPO_CISCO_TABLES = [...]

...

TABLES = (FWAAS_TABLES + LBAAS_TABLES + VPNAAS_TABLES + ...
          + REPO_ARISTA_TABLES + REPO_CISCO_TABLES)</literal_block>
                <paragraph>Also the test uses <strong>VERSION_TABLE</strong>, it is the name of table in database which
                    contains revision id of head migration. It is preferred to keep this variable in
                    <literal>networking_foo/db/migration/alembic_migrations/__init__.py</literal> so it will be easy
                    to use in test.</paragraph>
                <paragraph>Create a module <literal>networking_foo/tests/functional/db/test_migrations.py</literal>
                    with the following content:</paragraph>
                <literal_block xml:space="preserve">from oslo_config import cfg

from neutron.db.migration.alembic_migrations import external
from neutron.db.migration import cli as migration
from neutron.tests.functional.db import test_migrations
from neutron.tests.unit import testlib_api

from networking_foo.db.migration import alembic_migrations
from networking_foo.db.models import head

# EXTERNAL_TABLES should contain all names of tables that are not related to
# current repo.
EXTERNAL_TABLES = set(external.TABLES) - set(external.REPO_FOO_TABLES)


class _TestModelsMigrationsFoo(test_migrations._TestModelsMigrations):

  def db_sync(self, engine):
      cfg.CONF.set_override('connection', engine.url, group='database')
      for conf in migration.get_alembic_configs():
          self.alembic_config = conf
          self.alembic_config.neutron_config = cfg.CONF
          migration.do_alembic_command(conf, 'upgrade', 'heads')

  def get_metadata(self):
      return head.get_metadata()

  def include_object(self, object_, name, type_, reflected, compare_to):
      if type_ == 'table' and (name == 'alembic' or
                               name == alembic_migrations.VERSION_TABLE or
                               name in EXTERNAL_TABLES):
          return False
      else:
          return True


class TestModelsMigrationsMysql(testlib_api.MySQLTestCaseMixin,
                                _TestModelsMigrationsFoo,
                                testlib_api.SqlTestCaseLight):
   pass


class TestModelsMigrationsPsql(testlib_api.PostgreSQLTestCaseMixin,
                               _TestModelsMigrationsFoo,
                               testlib_api.SqlTestCaseLight):
   pass</literal_block>
            </section>
            <section ids="add-functional-requirements" names="3.\ add\ functional\ requirements">
                <title>3. Add functional requirements</title>
                <paragraph>A separate file <literal>networking_foo/tests/functional/requirements.txt</literal> should be
                    created containing the following requirements that are needed for successful
                    test execution.</paragraph>
                <literal_block xml:space="preserve">psutil&gt;=3.2.2 # BSD
psycopg2
PyMySQL&gt;=0.6.2  # MIT License</literal_block>
                <paragraph>Example implementation <reference name="in VPNaaS" refuri="https://review.openstack.org/209943">in VPNaaS</reference><target ids="in-vpnaas" names="in\ vpnaas" refuri="https://review.openstack.org/209943"></target></paragraph>
            </section>
        </section>
    </section>
</document>

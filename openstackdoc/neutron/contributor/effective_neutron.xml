<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/neutron/doc/source/contributor/effective_neutron.rst">
    <comment xml:space="preserve">Licensed under the Apache License, Version 2.0 (the "License"); you may
not use this file except in compliance with the License. You may obtain
a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations
under the License.


Convention for heading levels in Neutron devref:
=======  Heading 0 (reserved for the title in a document)
-------  Heading 1
~~~~~~~  Heading 2
+++++++  Heading 3
'''''''  Heading 4
(Avoid deeper levels because they do not render well.)</comment>
    <section ids="effective-neutron-100-specific-ways-to-improve-your-neutron-contributions" names="effective\ neutron:\ 100\ specific\ ways\ to\ improve\ your\ neutron\ contributions">
        <title>Effective Neutron: 100 specific ways to improve your Neutron contributions</title>
        <paragraph>There are a number of skills that make a great Neutron developer: writing good
            code, reviewing effectively, listening to peer feedback, etc. The objective of
            this document is to describe, by means of examples, the pitfalls, the good and
            bad practices that ‘we’ as project encounter on a daily basis and that make us
            either go slower or accelerate while contributing to Neutron.</paragraph>
        <paragraph>By reading and collaboratively contributing to such a knowledge base, your
            development and review cycle becomes shorter, because you will learn (and teach
            to others after you) what to watch out for, and how to be proactive in order
            to prevent negative feedback, minimize programming errors, writing better
            tests, and so on and so forth…in a nutshell, how to become an effective Neutron
            developer.</paragraph>
        <paragraph>The notes below are meant to be free-form and brief by design. They are not meant
            to replace or duplicate <reference name="OpenStack documentation" refuri="http://docs.openstack.org">OpenStack documentation</reference><target ids="openstack-documentation" names="openstack\ documentation" refuri="http://docs.openstack.org"></target>,
            or any project-wide documentation initiative like <reference name="peer-review notes" refuri="http://docs.openstack.org/infra/manual/developers.html#peer-review">peer-review notes</reference><target ids="peer-review-notes" names="peer-review\ notes" refuri="http://docs.openstack.org/infra/manual/developers.html#peer-review"></target>
            or the <reference name="team guide" refuri="http://docs.openstack.org/project-team-guide/">team guide</reference><target ids="team-guide" names="team\ guide" refuri="http://docs.openstack.org/project-team-guide/"></target>. For this
            reason, references are acceptable and should be favored, if the shortcut is
            deemed useful to expand on the distilled information.
            We will try to keep these notes tidy by breaking them down into sections if it
            makes sense. Feel free to add, adjust, remove as you see fit. Please do so,
            taking into consideration yourself and other Neutron developers as readers.
            Capture your experience during development and review and add any comment that
            you believe will make your life and others’ easier.</paragraph>
        <paragraph>Happy hacking!</paragraph>
        <section ids="developing-better-software" names="developing\ better\ software">
            <title>Developing better software</title>
            <section ids="plugin-development" names="plugin\ development">
                <title>Plugin development</title>
                <paragraph>Document common pitfalls as well as good practices done during plugin development.</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>Use mixin classes as last resort. They can be a powerful tool to add behavior
                            but their strength is also a weakness, as they can introduce <reference name="unpredictable" refuri="https://review.openstack.org/#/c/121290/">unpredictable</reference><target ids="unpredictable" names="unpredictable" refuri="https://review.openstack.org/#/c/121290/"></target>
                            behavior to the <reference name="MRO" refuri="https://www.python.org/download/releases/2.3/mro/">MRO</reference><target ids="mro" names="mro" refuri="https://www.python.org/download/releases/2.3/mro/"></target>,
                            amongst other issues.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>In lieu of mixins, if you need to add behavior that is relevant for ML2,
                            consider using the <reference name="extension manager" refuri="http://specs.openstack.org/openstack/neutron-specs/specs/juno/neutron-ml2-mechanismdriver-extensions.html">extension manager</reference><target ids="extension-manager" names="extension\ manager" refuri="http://specs.openstack.org/openstack/neutron-specs/specs/juno/neutron-ml2-mechanismdriver-extensions.html"></target>.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>If you make changes to the DB class methods, like calling methods that can
                            be inherited, think about what effect that may have to plugins that have
                            controller <reference name="backends" refuri="https://review.openstack.org/#/c/116924/">backends</reference><target ids="backends" names="backends" refuri="https://review.openstack.org/#/c/116924/"></target>.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>If you make changes to the ML2 plugin or components used by the ML2 plugin,
                            think about the <reference name="effect" refuri="http://lists.openstack.org/pipermail/openstack-dev/2015-October/076134.html">effect</reference><target ids="effect" names="effect" refuri="http://lists.openstack.org/pipermail/openstack-dev/2015-October/076134.html"></target>
                            that may have to other plugins.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>When adding behavior to the L2 and L3 db base classes, do not assume that
                            there is an agent on the other side of the message broker that interacts
                            with the server. Plugins may not rely on <reference name="agents" refuri="https://review.openstack.org/#/c/174020/">agents</reference><target ids="agents" names="agents" refuri="https://review.openstack.org/#/c/174020/"></target> at all.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Be mindful of required capabilities when you develop plugin extensions. The
                            <reference name="Extension description" refuri="https://github.com/openstack/neutron/blob/b14c06b5/neutron/api/extensions.py#L122">Extension description</reference><target ids="extension-description" names="extension\ description" refuri="https://github.com/openstack/neutron/blob/b14c06b5/neutron/api/extensions.py#L122"></target> provides the ability to specify the list of required capabilities
                            for the extension you are developing. By declaring this list, the server will
                            not start up if the requirements are not met, thus avoiding leading the system
                            to experience undetermined behavior at runtime.</paragraph>
                    </list_item>
                </bullet_list>
            </section>
            <section ids="database-interaction" names="database\ interaction">
                <title>Database interaction</title>
                <paragraph>Document common pitfalls as well as good practices done during database development.</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph><reference name="first()" refuri="http://docs.sqlalchemy.org/en/rel_1_0/orm/query.html#sqlalchemy.orm.query.Query.first">first()</reference><target ids="first" names="first()" refuri="http://docs.sqlalchemy.org/en/rel_1_0/orm/query.html#sqlalchemy.orm.query.Query.first"></target>
                            does not raise an exception.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Do not use <reference name="delete()" refuri="http://docs.sqlalchemy.org/en/rel_1_0/orm/query.html#sqlalchemy.orm.query.Query.delete">delete()</reference><target ids="delete" names="delete()" refuri="http://docs.sqlalchemy.org/en/rel_1_0/orm/query.html#sqlalchemy.orm.query.Query.delete"></target>
                            to remove objects. A delete query does not load the object so no sqlalchemy events
                            can be triggered that would do things like recalculate quotas or update revision
                            numbers of parent objects. For more details on all of the things that can go wrong
                            using bulk delete operations, see the “Warning” sections in the link above.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>For PostgreSQL if you’re using GROUP BY everything in the SELECT list must be
                            an aggregate SUM(…), COUNT(…), etc or used in the GROUP BY.</paragraph>
                        <paragraph>The incorrect variant:</paragraph>
                        <literal_block classes="code python" xml:space="preserve"><inline classes="name">q</inline> <inline classes="operator">=</inline> <inline classes="name">query</inline><inline classes="punctuation">(</inline><inline classes="name">Object</inline><inline classes="operator">.</inline><inline classes="name">id</inline><inline classes="punctuation">,</inline> <inline classes="name">Object</inline><inline classes="operator">.</inline><inline classes="name">name</inline><inline classes="punctuation">,</inline>
          <inline classes="name">func</inline><inline classes="operator">.</inline><inline classes="name">count</inline><inline classes="punctuation">(</inline><inline classes="name">Object</inline><inline classes="operator">.</inline><inline classes="name">number</inline><inline classes="punctuation">))</inline><inline classes="operator">.</inline><inline classes="name">group_by</inline><inline classes="punctuation">(</inline><inline classes="name">Object</inline><inline classes="operator">.</inline><inline classes="name">name</inline><inline classes="punctuation">)</inline></literal_block>
                        <paragraph>The correct variant:</paragraph>
                        <literal_block classes="code python" xml:space="preserve"><inline classes="name">q</inline> <inline classes="operator">=</inline> <inline classes="name">query</inline><inline classes="punctuation">(</inline><inline classes="name">Object</inline><inline classes="operator">.</inline><inline classes="name">id</inline><inline classes="punctuation">,</inline> <inline classes="name">Object</inline><inline classes="operator">.</inline><inline classes="name">name</inline><inline classes="punctuation">,</inline>
          <inline classes="name">func</inline><inline classes="operator">.</inline><inline classes="name">count</inline><inline classes="punctuation">(</inline><inline classes="name">Object</inline><inline classes="operator">.</inline><inline classes="name">number</inline><inline classes="punctuation">))</inline><inline classes="operator">.</inline><inline classes="name">group_by</inline><inline classes="punctuation">(</inline><inline classes="name">Object</inline><inline classes="operator">.</inline><inline classes="name">id</inline><inline classes="punctuation">,</inline> <inline classes="name">Object</inline><inline classes="operator">.</inline><inline classes="name">name</inline><inline classes="punctuation">)</inline></literal_block>
                    </list_item>
                    <list_item>
                        <paragraph>Beware of the <reference name="InvalidRequestError" refuri="http://docs.sqlalchemy.org/en/latest/faq/sessions.html#this-session-s-transaction-has-been-rolled-back-due-to-a-previous-exception-during-flush-or-similar">InvalidRequestError</reference><target ids="invalidrequesterror" names="invalidrequesterror" refuri="http://docs.sqlalchemy.org/en/latest/faq/sessions.html#this-session-s-transaction-has-been-rolled-back-due-to-a-previous-exception-during-flush-or-similar"></target> exception.
                            There is even a <reference name="Neutron bug" refuri="https://bugs.launchpad.net/neutron/+bug/1409774">Neutron bug</reference><target ids="neutron-bug" names="neutron\ bug" refuri="https://bugs.launchpad.net/neutron/+bug/1409774"></target>
                            registered for it. Bear in mind that this error may also occur when nesting
                            transaction blocks, and the innermost block raises an error without proper
                            rollback. Consider if <reference name="savepoints" refuri="http://docs.sqlalchemy.org/en/rel_1_0/orm/session_transaction.html#using-savepoint">savepoints</reference><target ids="savepoints" names="savepoints" refuri="http://docs.sqlalchemy.org/en/rel_1_0/orm/session_transaction.html#using-savepoint"></target>
                            can fit your use case.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>When designing data models that are related to each other, be careful to how
                            you model the relationships’ loading <reference name="strategy" refuri="http://docs.sqlalchemy.org/en/latest/orm/loading_relationships.html#using-loader-strategies-lazy-loading-eager-loading">strategy</reference><target ids="strategy" names="strategy" refuri="http://docs.sqlalchemy.org/en/latest/orm/loading_relationships.html#using-loader-strategies-lazy-loading-eager-loading"></target>. For instance a joined relationship can
                            be very efficient over others (some examples include <reference name="router gateways" refuri="https://review.openstack.org/#/c/88665/">router gateways</reference><target ids="router-gateways" names="router\ gateways" refuri="https://review.openstack.org/#/c/88665/"></target>
                            or <reference name="network availability zones" refuri="https://review.openstack.org/#/c/257086/">network availability zones</reference><target ids="network-availability-zones" names="network\ availability\ zones" refuri="https://review.openstack.org/#/c/257086/"></target>).</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>If you add a relationship to a Neutron object that will be referenced in the
                            majority of cases where the object is retrieved, be sure to use the
                            lazy=’joined’ parameter to the relationship so the related objects are loaded
                            as part of the same query. Otherwise, the default method is ‘select’, which
                            emits a new DB query to retrieve each related object adversely impacting
                            performance. For example, see <reference name="patch 88665" refuri="https://review.openstack.org/#/c/88665/">patch 88665</reference><target ids="patch-88665" names="patch\ 88665" refuri="https://review.openstack.org/#/c/88665/"></target>
                            which resulted in a significant improvement since router retrieval functions
                            always include the gateway interface.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Conversely, do not use lazy=’joined’ if the relationship is only used in
                            corner cases because the JOIN statement comes at a cost that may be
                            significant if the relationship contains many objects. For example, see
                            <reference name="patch 168214" refuri="https://review.openstack.org/#/c/168214/">patch 168214</reference><target ids="patch-168214" names="patch\ 168214" refuri="https://review.openstack.org/#/c/168214/"></target> which reduced a
                            subnet retrieval by ~90% by avoiding a join to the IP allocation table.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>When writing extensions to existing objects (e.g. Networks), ensure that
                            they are written in a way that the data on the object can be calculated
                            without additional DB lookup. If that’s not possible, ensure the DB lookup
                            is performed once in bulk during a list operation. Otherwise a list call
                            for a 1000 objects will change from a constant small number of DB queries
                            to 1000 DB queries. For example, see
                            <reference name="patch 257086" refuri="https://review.openstack.org/#/c/257086/">patch 257086</reference><target ids="patch-257086" names="patch\ 257086" refuri="https://review.openstack.org/#/c/257086/"></target> which changed the
                            availability zone code from the incorrect style to a database friendly one.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Sometimes in code we use the following structures:</paragraph>
                        <literal_block classes="code python" xml:space="preserve"><inline classes="keyword">def</inline> <inline classes="name function">create</inline><inline classes="punctuation">():</inline>
   <inline classes="keyword">with</inline> <inline classes="name">context</inline><inline classes="operator">.</inline><inline classes="name">session</inline><inline classes="operator">.</inline><inline classes="name">begin</inline><inline classes="punctuation">(</inline><inline classes="name">subtransactions</inline><inline classes="operator">=</inline><inline classes="name builtin pseudo">True</inline><inline classes="punctuation">):</inline>
       <inline classes="name">create_something</inline><inline classes="punctuation">()</inline>
       <inline classes="keyword">try</inline><inline classes="punctuation">:</inline>
           <inline classes="name">_do_other_thing_with_created_object</inline><inline classes="punctuation">()</inline>
       <inline classes="keyword">except</inline> <inline classes="name exception">Exception</inline><inline classes="punctuation">:</inline>
           <inline classes="keyword">with</inline> <inline classes="name">excutils</inline><inline classes="operator">.</inline><inline classes="name">save_and_reraise_exception</inline><inline classes="punctuation">():</inline>
               <inline classes="name">delete_something</inline><inline classes="punctuation">()</inline>

<inline classes="keyword">def</inline> <inline classes="name function">_do_other_thing_with_created_object</inline><inline classes="punctuation">():</inline>
   <inline classes="keyword">with</inline> <inline classes="name">context</inline><inline classes="operator">.</inline><inline classes="name">session</inline><inline classes="operator">.</inline><inline classes="name">begin</inline><inline classes="punctuation">(</inline><inline classes="name">subtransactions</inline><inline classes="operator">=</inline><inline classes="name builtin pseudo">True</inline><inline classes="punctuation">):</inline>
       <inline classes="operator">....</inline></literal_block>
                        <paragraph>The problem is that when exception is raised in <literal>_do_other_thing_with_created_object</literal>
                            it is caught in except block, but the object cannot be deleted in except
                            section because internal transaction from <literal>_do_other_thing_with_created_object</literal>
                            has been rolled back. To avoid this nested transactions should be used.
                            For such cases help function <literal>safe_creation</literal> has been created in
                            <literal>neutron/db/_utils.py</literal>.
                            So, the example above should be replaced with:</paragraph>
                        <literal_block classes="code python" xml:space="preserve"><inline classes="name">_safe_creation</inline><inline classes="punctuation">(</inline><inline classes="name">context</inline><inline classes="punctuation">,</inline> <inline classes="name">create_something</inline><inline classes="punctuation">,</inline> <inline classes="name">delete_something</inline><inline classes="punctuation">,</inline>
               <inline classes="name">_do_other_thing_with_created_object</inline><inline classes="punctuation">)</inline></literal_block>
                        <paragraph>Where nested transaction is used in _do_other_thing_with_created_object
                            function.</paragraph>
                        <paragraph>The <literal>_safe_creation function can also be passed the ``transaction=False</literal>
                            argument to prevent any transaction from being created just to leverage
                            the automatic deletion on exception logic.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Beware of ResultProxy.inserted_primary_key which returns a list of last
                            inserted primary keys not the last inserted primary key:</paragraph>
                        <literal_block classes="code python" xml:space="preserve"><inline classes="name">result</inline> <inline classes="operator">=</inline> <inline classes="name">session</inline><inline classes="operator">.</inline><inline classes="name">execute</inline><inline classes="punctuation">(</inline><inline classes="name">mymodel</inline><inline classes="operator">.</inline><inline classes="name">insert</inline><inline classes="punctuation">()</inline><inline classes="operator">.</inline><inline classes="name">values</inline><inline classes="punctuation">(</inline><inline classes="operator">**</inline><inline classes="name">values</inline><inline classes="punctuation">))</inline>
<inline classes="comment single"># result.inserted_primary_key is a list even if we inserted a unique row!</inline></literal_block>
                    </list_item>
                    <list_item>
                        <paragraph>Beware of pymysql which can silently unwrap a list with an element (and hide
                            a wrong use of ResultProxy.inserted_primary_key for example):</paragraph>
                        <literal_block classes="code python" xml:space="preserve"><inline classes="name">e</inline><inline classes="operator">.</inline><inline classes="name">execute</inline><inline classes="punctuation">(</inline><inline classes="literal string double">"create table if not exists foo (bar integer)"</inline><inline classes="punctuation">)</inline>
<inline classes="name">e</inline><inline classes="operator">.</inline><inline classes="name">execute</inline><inline classes="punctuation">(</inline><inline classes="name">foo</inline><inline classes="operator">.</inline><inline classes="name">insert</inline><inline classes="punctuation">()</inline><inline classes="operator">.</inline><inline classes="name">values</inline><inline classes="punctuation">(</inline><inline classes="name">bar</inline><inline classes="operator">=</inline><inline classes="literal number integer">1</inline><inline classes="punctuation">))</inline>
<inline classes="name">e</inline><inline classes="operator">.</inline><inline classes="name">execute</inline><inline classes="punctuation">(</inline><inline classes="name">foo</inline><inline classes="operator">.</inline><inline classes="name">insert</inline><inline classes="punctuation">()</inline><inline classes="operator">.</inline><inline classes="name">values</inline><inline classes="punctuation">(</inline><inline classes="name">bar</inline><inline classes="operator">=</inline><inline classes="punctuation">[</inline><inline classes="literal number integer">2</inline><inline classes="punctuation">]))</inline></literal_block>
                        <paragraph>The 2nd insert should crash (list provided, integer expected). It crashes at
                            least with mysql and postgresql backends, but succeeds with pymysql because
                            it transforms them into:</paragraph>
                        <literal_block classes="code sql" xml:space="preserve"><inline classes="keyword">INSERT</inline> <inline classes="keyword">INTO</inline> <inline classes="name">foo</inline> <inline classes="punctuation">(</inline><inline classes="name">bar</inline><inline classes="punctuation">)</inline> <inline classes="keyword">VALUES</inline> <inline classes="punctuation">(</inline><inline classes="literal number integer">1</inline><inline classes="punctuation">)</inline>
<inline classes="keyword">INSERT</inline> <inline classes="keyword">INTO</inline> <inline classes="name">foo</inline> <inline classes="punctuation">(</inline><inline classes="name">bar</inline><inline classes="punctuation">)</inline> <inline classes="keyword">VALUES</inline> <inline classes="punctuation">((</inline><inline classes="literal number integer">2</inline><inline classes="punctuation">))</inline></literal_block>
                    </list_item>
                </bullet_list>
            </section>
            <section ids="system-development" names="system\ development">
                <title>System development</title>
                <paragraph>Document common pitfalls as well as good practices done when invoking system commands
                    and interacting with linux utils.</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>When a patch requires a new platform tool or a new feature in an existing
                            tool, check if common platforms ship packages with the aforementioned
                            feature. Also, tag such a patch with <literal>UpgradeImpact</literal> to raise its
                            visibility (as these patches are brought up to the attention of the core team
                            during team meetings).
                            More details in <reference internal="True" refuri="policies/code-reviews#spec-review-practices"><inline classes="std std-ref">review guidelines</inline></reference>.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>When a patch or the code depends on a new feature in the kernel or in any platform tools
                            (dnsmasq, ip, Open vSwitch etc.), consider introducing a new sanity check to
                            validate deployments for the expected features. Note that sanity checks <emphasis>must
                                not</emphasis> check for version numbers of underlying platform tools because
                            distributions may decide to backport needed features into older versions.
                            Instead, sanity checks should validate actual features by attempting to use them.</paragraph>
                    </list_item>
                </bullet_list>
            </section>
            <section ids="eventlet-concurrent-model" names="eventlet\ concurrent\ model">
                <title>Eventlet concurrent model</title>
                <paragraph>Document common pitfalls as well as good practices done when using eventlet and monkey
                    patching.</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>Do not use with_lockmode(‘update’) on SQL queries without protecting the operation
                            with a lockutils semaphore. For some SQLAlchemy database drivers that operators may
                            choose (e.g. MySQLdb) it may result in a temporary deadlock by yielding to another
                            coroutine while holding the DB lock. The following wiki provides more details:
                            <reference refuri="https://wiki.openstack.org/wiki/OpenStack_and_SQLAlchemy#MySQLdb_.2B_eventlet_.3D_sad">https://wiki.openstack.org/wiki/OpenStack_and_SQLAlchemy#MySQLdb_.2B_eventlet_.3D_sad</reference></paragraph>
                    </list_item>
                </bullet_list>
            </section>
            <section ids="mocking-and-testing" names="mocking\ and\ testing">
                <title>Mocking and testing</title>
                <paragraph>Document common pitfalls as well as good practices done when writing tests, any test.
                    For anything more elaborate, please visit the testing section.</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>Preferring low level testing versus full path testing (e.g. not testing database
                            via client calls). The former is to be favored in unit testing, whereas the latter
                            is to be favored in functional testing.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Prefer specific assertions (assert(Not)In, assert(Not)IsInstance, assert(Not)IsNone,
                            etc) over generic ones (assertTrue/False, assertEqual) because they raise more
                            meaningful errors:</paragraph>
                        <literal_block classes="code python" xml:space="preserve"><inline classes="keyword">def</inline> <inline classes="name function">test_specific</inline><inline classes="punctuation">(</inline><inline classes="name builtin pseudo">self</inline><inline classes="punctuation">):</inline>
    <inline classes="name builtin pseudo">self</inline><inline classes="operator">.</inline><inline classes="name">assertIn</inline><inline classes="punctuation">(</inline><inline classes="literal number integer">3</inline><inline classes="punctuation">,</inline> <inline classes="punctuation">[</inline><inline classes="literal number integer">1</inline><inline classes="punctuation">,</inline> <inline classes="literal number integer">2</inline><inline classes="punctuation">])</inline>
    <inline classes="comment single"># raise meaningful error: "MismatchError: 3 not in [1, 2]"</inline>

<inline classes="keyword">def</inline> <inline classes="name function">test_generic</inline><inline classes="punctuation">(</inline><inline classes="name builtin pseudo">self</inline><inline classes="punctuation">):</inline>
    <inline classes="name builtin pseudo">self</inline><inline classes="operator">.</inline><inline classes="name">assertTrue</inline><inline classes="punctuation">(</inline><inline classes="literal number integer">3</inline> <inline classes="operator word">in</inline> <inline classes="punctuation">[</inline><inline classes="literal number integer">1</inline><inline classes="punctuation">,</inline> <inline classes="literal number integer">2</inline><inline classes="punctuation">])</inline>
    <inline classes="comment single"># raise meaningless error: "AssertionError: False is not true"</inline></literal_block>
                    </list_item>
                    <list_item>
                        <paragraph>Use the pattern “self.assertEqual(expected, observed)” not the opposite, it helps
                            reviewers to understand which one is the expected/observed value in non-trivial
                            assertions. The expected and observed values are also labeled in the output when
                            the assertion fails.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Prefer specific assertions (assertTrue, assertFalse) over assertEqual(True/False, observed).</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Don’t write tests that don’t test the intended code. This might seem silly but
                            it’s easy to do with a lot of mocks in place. Ensure that your tests break as
                            expected before your code change.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Avoid heavy use of the mock library to test your code. If your code requires more
                            than one mock to ensure that it does the correct thing, it needs to be refactored
                            into smaller, testable units. Otherwise we depend on fullstack/tempest/api tests
                            to test all of the real behavior and we end up with code containing way too many
                            hidden dependencies and side effects.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>All behavior changes to fix bugs should include a test that prevents a
                            regression. If you made a change and it didn’t break a test, it means the
                            code was not adequately tested in the first place, it’s not an excuse to leave
                            it untested.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Test the failure cases. Use a mock side effect to throw the necessary
                            exceptions to test your ‘except’ clauses.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Don’t mimic existing tests that violate these guidelines. We are attempting to
                            replace all of these so more tests like them create more work. If you need help
                            writing a test, reach out to the testing lieutenants and the team on IRC.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Mocking open() is a dangerous practice because it can lead to unexpected
                            bugs like <reference name="bug 1503847" refuri="https://bugs.launchpad.net/neutron/+bug/1503847">bug 1503847</reference><target ids="bug-1503847" names="bug\ 1503847" refuri="https://bugs.launchpad.net/neutron/+bug/1503847"></target>.
                            In fact, when the built-in open method is mocked during tests, some
                            utilities (like debtcollector) may still rely on the real thing, and may
                            end up using the mock rather what they are really looking for. If you must,
                            consider using <reference name="OpenFixture" refuri="https://review.openstack.org/#/c/232716/">OpenFixture</reference><target ids="openfixture" names="openfixture" refuri="https://review.openstack.org/#/c/232716/"></target>, but
                            it is better not to mock open() at all.</paragraph>
                    </list_item>
                </bullet_list>
            </section>
            <section ids="backward-compatibility" names="backward\ compatibility">
                <title>Backward compatibility</title>
                <paragraph>Document common pitfalls as well as good practices done when extending the RPC Interfaces.</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>Make yourself familiar with <reference internal="True" refuri="internals/upgrade#upgrade-review-guidelines"><inline classes="std std-ref">Upgrade review guidelines</inline></reference>.</paragraph>
                    </list_item>
                </bullet_list>
                <section ids="deprecation" names="deprecation">
                    <title>Deprecation</title>
                    <paragraph>Sometimes we want to refactor things in a non-backward compatible way. In most
                        cases you can use <reference name="debtcollector" refuri="http://docs.openstack.org/debtcollector/latest/">debtcollector</reference><target ids="debtcollector" names="debtcollector" refuri="http://docs.openstack.org/debtcollector/latest/"></target> to mark things for
                        deprecation. Config items have <reference name="deprecation options supported by oslo.config" refuri="https://docs.openstack.org/oslo.config/latest/reference/opts.html">deprecation options supported by oslo.config</reference><target ids="deprecation-options-supported-by-oslo-config" names="deprecation\ options\ supported\ by\ oslo.config" refuri="https://docs.openstack.org/oslo.config/latest/reference/opts.html"></target>.</paragraph>
                    <paragraph>The deprecation process must follow the <reference name="standard deprecation requirements" refuri="http://governance.openstack.org/reference/tags/assert_follows-standard-deprecation.html#requirements">standard deprecation requirements</reference><target ids="standard-deprecation-requirements" names="standard\ deprecation\ requirements" refuri="http://governance.openstack.org/reference/tags/assert_follows-standard-deprecation.html#requirements"></target>.
                        In terms of neutron development, this means:</paragraph>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph>A launchpad bug to track the deprecation.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>A patch to mark the deprecated items. If the deprecation affects
                                users (config items, API changes) then a <reference name="release note" refuri="https://docs.openstack.org/reno/latest/user/usage.html">release note</reference><target ids="release-note" names="release\ note" refuri="https://docs.openstack.org/reno/latest/user/usage.html"></target> must be
                                included.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>Wait at least one cycle and at least three months linear time.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>A patch that removes the deprecated items. Make sure to refer to the
                                original launchpad bug in the commit message of this patch.</paragraph>
                        </list_item>
                    </bullet_list>
                </section>
            </section>
            <section ids="scalability-issues" names="scalability\ issues">
                <title>Scalability issues</title>
                <paragraph>Document common pitfalls as well as good practices done when writing code that needs to process
                    a lot of data.</paragraph>
            </section>
            <section ids="translation-and-logging" names="translation\ and\ logging">
                <title>Translation and logging</title>
                <paragraph>Document common pitfalls as well as good practices done when instrumenting your code.</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>Make yourself familiar with <reference name="OpenStack logging guidelines" refuri="http://specs.openstack.org/openstack/openstack-specs/specs/log-guidelines.html#definition-of-log-levels">OpenStack logging guidelines</reference><target ids="openstack-logging-guidelines" names="openstack\ logging\ guidelines" refuri="http://specs.openstack.org/openstack/openstack-specs/specs/log-guidelines.html#definition-of-log-levels"></target>
                            to avoid littering the logs with traces logged at inappropriate levels.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The logger should only be passed unicode values. For example, do not pass it
                            exceptions or other objects directly (LOG.error(exc), LOG.error(port), etc.).
                            See <reference refuri="https://docs.openstack.org/oslo.log/latest/user/migration.html#no-more-implicit-conversion-to-unicode-str">https://docs.openstack.org/oslo.log/latest/user/migration.html#no-more-implicit-conversion-to-unicode-str</reference>
                            for more details.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Don’t pass exceptions into LOG.exception: it is already implicitly included
                            in the log message by Python logging module.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Don’t use LOG.exception when there is no exception registered in current
                            thread context: Python 3.x versions before 3.5 are known to fail on it.</paragraph>
                    </list_item>
                </bullet_list>
            </section>
            <section ids="project-interfaces" names="project\ interfaces">
                <title>Project interfaces</title>
                <paragraph>Document common pitfalls as well as good practices done when writing code that is used
                    to interface with other projects, like Keystone or Nova.</paragraph>
            </section>
            <section ids="documenting-your-code" names="documenting\ your\ code">
                <title>Documenting your code</title>
                <paragraph>Document common pitfalls as well as good practices done when writing docstrings.</paragraph>
            </section>
        </section>
        <section ids="landing-patches-more-rapidly" names="landing\ patches\ more\ rapidly">
            <title>Landing patches more rapidly</title>
            <section ids="scoping-your-patch-appropriately" names="scoping\ your\ patch\ appropriately">
                <title>Scoping your patch appropriately</title>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>Do not make multiple changes in one patch unless absolutely necessary.
                            Cleaning up nearby functions or fixing a small bug you noticed while working
                            on something else makes the patch very difficult to review. It also makes
                            cherry-picking and reverting very difficult.  Even apparently minor changes
                            such as reformatting whitespace around your change can burden reviewers and
                            cause merge conflicts.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>If a fix or feature requires code refactoring, submit the refactoring as a
                            separate patch than the one that changes the logic. Otherwise
                            it’s difficult for a reviewer to tell the difference between mistakes
                            in the refactor and changes required for the fix/feature. If it’s a bug fix,
                            try to implement the fix before the refactor to avoid making cherry-picks to
                            stable branches difficult.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Consider your reviewers’ time before submitting your patch. A patch that
                            requires many hours or days to review will sit in the “todo” list until
                            someone has many hours or days free (which may never happen.) If you can
                            deliver your patch in small but incrementally understandable and testable
                            pieces you will be more likely to attract reviewers.</paragraph>
                    </list_item>
                </bullet_list>
            </section>
            <section ids="nits-and-pedantic-comments" names="nits\ and\ pedantic\ comments">
                <title>Nits and pedantic comments</title>
                <paragraph>Document common nits and pedantic comments to watch out for.</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>Make sure you spell correctly, the best you can, no-one wants rebase generators at
                            the end of the release cycle!</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The odd pep8 error may cause an entire CI run to be wasted. Consider running
                            validation (pep8 and/or tests) before submitting your patch. If you keep forgetting
                            consider installing a git <reference name="hook" refuri="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks">hook</reference><target ids="hook" names="hook" refuri="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks"></target>
                            so that Git will do it for you.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Sometimes, new contributors want to dip their toes with trivial patches, but we
                            at OpenStack <emphasis>love</emphasis> bike shedding and their patches may sometime stall. In
                            some extreme cases, the more trivial the patch, the higher the chances it fails
                            to merge. To ensure we as a team provide/have a frustration-free experience
                            new contributors should be redirected to fixing <reference name="low-hanging-fruit bugs" refuri="https://bugs.launchpad.net/neutron/+bugs?field.tag=low-hanging-fruit">low-hanging-fruit bugs</reference><target ids="low-hanging-fruit-bugs" names="low-hanging-fruit\ bugs" refuri="https://bugs.launchpad.net/neutron/+bugs?field.tag=low-hanging-fruit"></target>
                            that have a tangible positive impact to the codebase. Spelling mistakes, and
                            docstring are fine, but there is a lot more that is relatively easy to fix
                            and has a direct impact to Neutron users.</paragraph>
                    </list_item>
                </bullet_list>
            </section>
            <section ids="reviewer-comments" names="reviewer\ comments">
                <title>Reviewer comments</title>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>Acknowledge them one by one by either clicking ‘Done’ or by replying extensively.
                            If you do not, the reviewer won’t know whether you thought it was not important,
                            or you simply forgot. If the reply satisfies the reviewer, consider capturing the
                            input in the code/document itself so that it’s for reviewers of newer patchsets to
                            see (and other developers when the patch merges).</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Watch for the feedback on your patches. Acknowledge it promptly and act on it
                            quickly, so that the reviewer remains engaged. If you disappear for a week after
                            you posted a patchset, it is very likely that the patch will end up being
                            neglected.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Do not take negative feedback personally. Neutron is a large project with lots
                            of contributors with different opinions on how things should be done. Many come
                            from widely varying cultures and languages so the English, text-only feedback
                            can unintentionally come across as harsh. Getting a -1 means reviewers are
                            trying to help get the patch into a state that can be merged, it doesn’t just
                            mean they are trying to block it. It’s very rare to get a patch merged on the
                            first iteration that makes everyone happy.</paragraph>
                    </list_item>
                </bullet_list>
            </section>
            <section ids="code-review" names="code\ review">
                <title>Code Review</title>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>You should visit <reference name="OpenStack How To Review wiki" refuri="https://wiki.openstack.org/wiki/How_To_Contribute#Reviewing">OpenStack How To Review wiki</reference><target ids="openstack-how-to-review-wiki" names="openstack\ how\ to\ review\ wiki" refuri="https://wiki.openstack.org/wiki/How_To_Contribute#Reviewing"></target></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Stay focussed and review what matters for the release. Please check out the Neutron
                            section for the <reference name="Gerrit dashboard" refuri="http://status.openstack.org/reviews/">Gerrit dashboard</reference><target ids="gerrit-dashboard" names="gerrit\ dashboard" refuri="http://status.openstack.org/reviews/"></target>. The output
                            is generated by this <reference name="tool" refuri="https://github.com/openstack-infra/reviewday/blob/master/bin/neutron">tool</reference><target ids="tool" names="tool" refuri="https://github.com/openstack-infra/reviewday/blob/master/bin/neutron"></target>.</paragraph>
                    </list_item>
                </bullet_list>
            </section>
            <section ids="irc" names="irc">
                <title>IRC</title>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>IRC is a place where you can speak with many of the Neutron developers and core
                            reviewers. For more information you should visit
                            <reference name="OpenStack IRC wiki" refuri="http://wiki.openstack.org/wiki/IRC">OpenStack IRC wiki</reference><target ids="openstack-irc-wiki" names="openstack\ irc\ wiki" refuri="http://wiki.openstack.org/wiki/IRC"></target>
                            Neutron IRC channel is #openstack-neutron</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>There are weekly IRC meetings related to many different projects/teams
                            in Neutron.
                            A full list of these meetings and their date/time can be found in
                            <reference name="OpenStack IRC Meetings" refuri="http://eavesdrop.openstack.org">OpenStack IRC Meetings</reference><target ids="openstack-irc-meetings" names="openstack\ irc\ meetings" refuri="http://eavesdrop.openstack.org"></target>.
                            It is important to attend these meetings in the area of your contribution
                            and possibly mention your work and patches.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>When you have questions regarding an idea or a specific patch of yours, it
                            can be helpful to find a relevant person in IRC and speak with them about
                            it.
                            You can find a user’s IRC nickname in their launchpad account.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Being available on IRC is useful, since reviewers can contact
                            you directly to quickly clarify a review issue. This speeds
                            up the feedback loop.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Each area of Neutron or sub-project of Neutron has a specific lieutenant
                            in charge of it.
                            You can most likely find these lieutenants on IRC, it is advised however to try
                            and send public questions to the channel rather then to a specific person if possible.
                            (This increase the chances of getting faster answers to your questions).
                            A list of the areas and lieutenants nicknames can be found at
                            <reference internal="True" refuri="policies/neutron-teams"><inline classes="doc">Core Reviewers</inline></reference>.</paragraph>
                    </list_item>
                </bullet_list>
            </section>
            <section ids="commit-messages" names="commit\ messages">
                <title>Commit messages</title>
                <paragraph>Document common pitfalls as well as good practices done when writing commit messages.
                    For more details see <reference name="Git commit message best practices" refuri="https://wiki.openstack.org/wiki/GitCommitMessages">Git commit message best practices</reference><target ids="git-commit-message-best-practices" names="git\ commit\ message\ best\ practices" refuri="https://wiki.openstack.org/wiki/GitCommitMessages"></target>.
                    This is the TL;DR version with the important points for committing to Neutron.</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>One liners are bad, unless the change is trivial.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Remember to use DocImpact, APIImpact, UpgradeImpact appropriately.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Make sure the commit message doesn’t have any spelling/grammar errors. This
                            is the first thing reviewers read and they can be distracting enough to
                            invite -1’s.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Describe what the change accomplishes. If it’s a bug fix, explain how this
                            code will fix the problem. If it’s part of a feature implementation, explain
                            what component of the feature the patch implements. Do not just describe the
                            bug, that’s what launchpad is for.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Use the “Closes-Bug: #BUG-NUMBER” tag if the patch addresses a bug. Submitting
                            a bugfix without a launchpad bug reference is unacceptable, even if it’s
                            trivial. Launchpad is how bugs are tracked so fixes without a launchpad bug are
                            a nightmare when users report the bug from an older version and the Neutron team
                            can’t tell if/why/how it’s been fixed. Launchpad is also how backports are
                            identified and tracked so patches without a bug report cannot be picked to stable
                            branches.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Use the “Implements: blueprint NAME-OF-BLUEPRINT” or “Partially-Implements:
                            blueprint NAME-OF-BLUEPRINT” for features so reviewers can determine if the
                            code matches the spec that was agreed upon. This also updates the blueprint
                            on launchpad so it’s easy to see all patches that are related to a feature.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>If it’s not immediately obvious, explain what the previous code was doing
                            that was incorrect. (e.g. code assumed it would never get ‘None’ from
                            a function call)</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Be specific in your commit message about what the patch does and why it does
                            this. For example, “Fixes incorrect logic in security groups” is not helpful
                            because the code diff already shows that you are modifying security groups.
                            The message should be specific enough that a reviewer looking at the code can
                            tell if the patch does what the commit says in the most appropriate manner.
                            If the reviewer has to guess why you did something, lots of your time will be
                            wasted explaining why certain changes were made.</paragraph>
                    </list_item>
                </bullet_list>
            </section>
            <section ids="dealing-with-zuul" names="dealing\ with\ zuul">
                <title>Dealing with Zuul</title>
                <paragraph>Document common pitfalls as well as good practices done when dealing with OpenStack CI.</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>When you submit a patch, consider checking its <reference name="status" refuri="http://status.openstack.org/zuul/">status</reference><target ids="status" names="status" refuri="http://status.openstack.org/zuul/"></target>
                            in the queue. If you see a job failures, you might as well save time and try to figure out
                            in advance why it is failing.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Excessive use of ‘recheck’ to get test to pass is discouraged. Please examine the logs for
                            the failing test(s) and make sure your change has not tickled anything that might be causing
                            a new failure or race condition. Getting your change in could make it even harder to debug
                            what is actually broken later on.</paragraph>
                    </list_item>
                </bullet_list>
            </section>
        </section>
    </section>
</document>

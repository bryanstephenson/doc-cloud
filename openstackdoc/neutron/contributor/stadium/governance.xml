<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/neutron/doc/source/contributor/stadium/governance.rst">
    <comment xml:space="preserve">Licensed under the Apache License, Version 2.0 (the "License"); you may
not use this file except in compliance with the License. You may obtain
a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations
under the License.


Convention for heading levels in Neutron devref:
=======  Heading 0 (reserved for the title in a document)
-------  Heading 1
~~~~~~~  Heading 2
+++++++  Heading 3
'''''''  Heading 4
(Avoid deeper levels because they do not render well.)</comment>
    <section ids="stadium-governance" names="stadium\ governance">
        <title>Stadium Governance</title>
        <section ids="background" names="background">
            <title>Background</title>
            <paragraph>Neutron grew to become a big monolithic codebase, and its core team had a
                tough time making progress on a number of fronts, like adding new
                features, ensuring stability, etc. During the Kilo timeframe, a
                decomposition effort started, where the codebase got disaggregated into
                separate repos, like the <reference name="high level services" refuri="http://specs.openstack.org/openstack/neutron-specs/specs/kilo/services-split.html">high level services</reference><target ids="high-level-services" names="high\ level\ services" refuri="http://specs.openstack.org/openstack/neutron-specs/specs/kilo/services-split.html"></target>,
                and the various third-party solutions for <reference name="L2 and L3 services" refuri="http://specs.openstack.org/openstack/neutron-specs/specs/kilo/core-vendor-decomposition.html">L2 and L3 services</reference><target ids="l2-and-l3-services" names="l2\ and\ l3\ services" refuri="http://specs.openstack.org/openstack/neutron-specs/specs/kilo/core-vendor-decomposition.html"></target>,
                and the Stadium was officially born.</paragraph>
            <paragraph>These initiatives enabled the various individual teams in charge of the
                smaller projects the opportunity to iterate faster and reduce the time to
                feature. This has been due to the increased autonomy and implicit trust model
                that made the lack of oversight of the PTL and the Neutron drivers/core team
                acceptable for a small number of initiatives. When the proposed <reference name="arrangement" refuri="https://review.openstack.org/#/c/175952/">arrangement</reference><target ids="arrangement" names="arrangement" refuri="https://review.openstack.org/#/c/175952/"></target>
                allowed projects to be <reference name="automatically" refuri="http://git.openstack.org/cgit/openstack/governance/commit/?id=321a020cbcaada01976478ea9f677ebb4df7bd6d">automatically</reference><target ids="automatically" names="automatically" refuri="http://git.openstack.org/cgit/openstack/governance/commit/?id=321a020cbcaada01976478ea9f677ebb4df7bd6d"></target>
                enlisted as a Neutron project based simply on description, and desire for
                affiliation, the number of projects included in the Stadium started to grow
                rapidly, which created a number of challenges for the PTL and the drivers
                team.</paragraph>
            <paragraph>In fact, it became harder and harder to ensure consistency in the APIs,
                architecture, design, implementation and testing of the overarching project;
                all aspects of software development, like documentation, integration, release
                management, maintenance, and upgrades started to being neglected for some
                projects and that led to some unhappy experiences.</paragraph>
            <paragraph>The point about uniform APIs is particularly important, because the Neutron
                platform is so flexible that a project can take a totally different turn in
                the way it exposes functionality, that it is virtually impossible for the
                PTL and the drivers team to ensure that good API design principles are being
                followed over time. In a situation where each project is on its own, that
                might be acceptable, but allowing independent API evolution while still under
                the Neutron umbrella is counterproductive.</paragraph>
            <paragraph>These challenges led the Neutron team to find a better balance between autonomy
                and consistency and lay down criteria that more clearly identify when a project
                can be eligible for inclusion in the <reference name="Neutron governance" refuri="http://governance.openstack.org/reference/projects/neutron.html">Neutron governance</reference><target ids="neutron-governance" names="neutron\ governance" refuri="http://governance.openstack.org/reference/projects/neutron.html"></target>.</paragraph>
            <paragraph>This document describes these criteria, and document the steps involved to
                maintain the integrity of the Stadium, and how to ensure this integrity be
                maintained over time when modifications to the governance are required.</paragraph>
        </section>
        <section ids="when-is-a-project-considered-part-of-the-stadium" names="when\ is\ a\ project\ considered\ part\ of\ the\ stadium?">
            <title>When is a project considered part of the Stadium?</title>
            <paragraph>In order to be considered part of the Stadium, a project must show a track
                record of alignment with the Neutron <reference name="core project" refuri="http://git.openstack.org/cgit/openstack/neutron">core project</reference><target ids="core-project" names="core\ project" refuri="http://git.openstack.org/cgit/openstack/neutron"></target>.
                This means showing proof of adoption of practices as led by the Neutron core
                team. Some of these practices are typically already followed by the most
                mature OpenStack projects:</paragraph>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>Exhaustive documentation: it is expected that each project will have a
                        <reference internal="True" refuri="../index"><inline classes="doc">developer</inline></reference>,
                        <reference internal="True" refuri="../../admin/index"><inline classes="doc">user/operator</inline></reference>
                        and <reference name="API" refuri="http://developer.openstack.org/api-ref/networking/">API</reference><target ids="api" names="api" refuri="http://developer.openstack.org/api-ref/networking/"></target>
                        documentations available.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Exhaustive OpenStack CI coverage: unit, functional, and tempest coverage
                        using OpenStack CI (upstream) resources so that <reference name="Grafana" refuri="http://grafana.openstack.org/dashboard/db/neutron-failure-rate">Grafana</reference><target ids="grafana" names="grafana" refuri="http://grafana.openstack.org/dashboard/db/neutron-failure-rate"></target>
                        and <reference name="OpenStack Health" refuri="http://status.openstack.org/openstack-health/#/">OpenStack Health</reference><target ids="openstack-health" names="openstack\ health" refuri="http://status.openstack.org/openstack-health/#/"></target>
                        support is available. Access to CI resources and historical data by the
                        team is key to ensuring stability and robustness of a project.
                        In particular, it is of paramount importance to ensure that DB models/migrations
                        are tested functionally to prevent data inconsistency issues or unexpected
                        DB logic errors due to schema/models mismatch. For more details, please
                        look at the following resources:</paragraph>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph><reference refuri="https://review.openstack.org/#/c/346091/">https://review.openstack.org/#/c/346091/</reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference refuri="https://review.openstack.org/#/c/346272/">https://review.openstack.org/#/c/346272/</reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference refuri="https://review.openstack.org/#/c/346083/">https://review.openstack.org/#/c/346083/</reference></paragraph>
                        </list_item>
                    </bullet_list>
                    <paragraph>More Database related information can be found on:</paragraph>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph><reference internal="True" refuri="../alembic_migrations"><inline classes="doc">Alembic Migrations</inline></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference internal="True" refuri="../internals/db_layer"><inline classes="doc">Neutron Database Layer</inline></reference></paragraph>
                        </list_item>
                    </bullet_list>
                    <paragraph>Bear in mind that many projects have been transitioning their codebase and
                        tests to fully support Python 3+, and it is important that each Stadium
                        project supports Python 3+ the same way Neutron core does. For more
                        information on how to do testing, please refer to the
                        <reference internal="True" refuri="../testing/testing"><inline classes="doc">Neutron testing documentation</inline></reference>.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Good release footprint, according to the chosen <reference name="release model" refuri="http://governance.openstack.org/reference/tags/#release-management-tags">release model</reference><target ids="release-model" names="release\ model" refuri="http://governance.openstack.org/reference/tags/#release-management-tags"></target>.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Adherence to deprecation and <reference name="stable backports policies" refuri="http://governance.openstack.org/reference/tags/#stable-maintenance-tags">stable backports policies</reference><target ids="stable-backports-policies" names="stable\ backports\ policies" refuri="http://governance.openstack.org/reference/tags/#stable-maintenance-tags"></target>.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Demonstrated ability to do <reference name="upgrades" refuri="http://governance.openstack.org/reference/tags/assert_supports-upgrade.html">upgrades</reference><target ids="upgrades" names="upgrades" refuri="http://governance.openstack.org/reference/tags/assert_supports-upgrade.html"></target>
                        and/or <reference name="rolling upgrades" refuri="http://governance.openstack.org/reference/tags/assert_supports-rolling-upgrade.html">rolling upgrades</reference><target ids="rolling-upgrades" names="rolling\ upgrades" refuri="http://governance.openstack.org/reference/tags/assert_supports-rolling-upgrade.html"></target>,
                        where applicable. This means having grenade support on top of the CI
                        coverage as described above.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Client bindings and CLI developed according to the OpenStack Client <reference name="plugin model" refuri="https://docs.openstack.org/python-openstackclient/latest/plugins.html">plugin model</reference><target ids="plugin-model" names="plugin\ model" refuri="https://docs.openstack.org/python-openstackclient/latest/plugins.html"></target>.</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>On top of the above mentioned criteria, the following also are taken into
                consideration:</paragraph>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>A project must use, adopt and implement open software and technologies.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>A project must integrate with Neutron via one of the supported, advertised
                        and maintained public Python APIs. REST API does not qualify (the project
                        python-neutronclient is an exception).</paragraph>
                </list_item>
                <list_item>
                    <paragraph>It adopts neutron-lib (with related hacking rules applied), and has proof
                        of good decoupling from Neutron core internals.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>It provides an API that adopts API guidelines as set by the Neutron core
                        team, and that relies on an open implementation.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>It adopts modular interfaces to provide networking services: this means
                        that L2/7 services are provided in the form of ML2 mech drivers and
                        service plugins respectively. A service plugin can expose a driver
                        interface to support multiple backend technologies, and/or adopt the
                        flavor framework as necessary.</paragraph>
                </list_item>
            </bullet_list>
            <target refid="add-remove-projects-to-stadium"></target>
        </section>
        <section ids="adding-or-removing-projects-to-the-stadium add-remove-projects-to-stadium" names="adding\ or\ removing\ projects\ to\ the\ stadium add-remove-projects-to-stadium">
            <title>Adding or removing projects to the Stadium</title>
            <paragraph>When a project is to be considered part of the Stadium, proof of compliance to
                the aforementioned practices will have to be demonstrated typically for at
                least two OpenStack releases. Application for inclusion is to be considered
                only within the first milestone of each OpenStack cycle, which is the time when
                the PTL and Neutron team do release planning, and have the most time available
                to discuss governance issues.</paragraph>
            <paragraph>Projects part of the Neutron Stadium have typically the first milestone to get
                their house in order, during which time reassessment happens; if removed, because
                of substantial lack of meeting the criteria, a project cannot reapply within
                the same release cycle it has been evicted.</paragraph>
            <paragraph>The process for proposing a repo into openstack/ and under the Neutron
                governance is to propose a patch to the openstack/governance repository.
                For example, to propose networking-foo, one would add the following entry
                under Neutron in reference/projects.yaml:</paragraph>
            <literal_block xml:space="preserve">- repo: openstack/networking-foo
  tags:
    - name: release:independent</literal_block>
            <paragraph>Typically this is a patch that the PTL, in collaboration with the project’s
                point of contact, will shepherd through the review process. This step is
                undertaken once it is clear that all criteria are met. The next section
                provides an informal checklist that shows what steps a project needs to
                go through in order to enable the PTL and the TC to vote positively on
                the proposed inclusion.</paragraph>
            <paragraph>Once a project is included, it abides by the Neutron
                <reference internal="True" refuri="../policies/blueprints"><inline classes="doc">RFE submission process</inline></reference>,
                where specifications to neutron-specs are required for major API as well
                as major architectural changes that may require core Neutron platform
                enhancements.</paragraph>
        </section>
        <section ids="checklist" names="checklist">
            <title>Checklist</title>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>How to integrate documentation into docs.o.o: The documentation
                        website has a section for <reference name="project developer documentation" refuri="https://docs.openstack.org/openstack-projects.html">project developer documentation</reference><target ids="project-developer-documentation" names="project\ developer\ documentation" refuri="https://docs.openstack.org/openstack-projects.html"></target>.
                        Each project in the Neutron Stadium must have an entry under the
                        ‘Networking Sub Projects’ section that points to the developer
                        documentation for the project, available at <literal>https://docs.openstack.org/&lt;your-project&gt;/latest/</literal>.
                        This is a two step process that involves the following:</paragraph>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph>Build the artefacts: this can be done by following example
                                <reference refuri="https://review.openstack.org/#/c/293399/">https://review.openstack.org/#/c/293399/</reference>.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>Publish the artefacts: this can be done by following example
                                <reference refuri="https://review.openstack.org/#/c/216448/">https://review.openstack.org/#/c/216448/</reference>.</paragraph>
                        </list_item>
                    </bullet_list>
                    <paragraph>More information can also be found on the
                        <reference name="project creator guide" refuri="http://docs.openstack.org/infra/manual/creators.html#add-link-to-your-developer-documentation">project creator guide</reference><target ids="project-creator-guide" names="project\ creator\ guide" refuri="http://docs.openstack.org/infra/manual/creators.html#add-link-to-your-developer-documentation"></target>.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>How to integrate into Grafana: Grafana is a great tool that provides
                        the ability to display historical series, like failure rates of
                        OpenStack CI jobs. A few examples that added dashboards over time are:</paragraph>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph><reference name="Neutron" refuri="https://review.openstack.org/#/c/278832/">Neutron</reference><target ids="neutron" names="neutron" refuri="https://review.openstack.org/#/c/278832/"></target>.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference name="Networking-OVN" refuri="https://review.openstack.org/#/c/335791">Networking-OVN</reference><target ids="networking-ovn" names="networking-ovn" refuri="https://review.openstack.org/#/c/335791"></target>.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference name="Networking-Midonet" refuri="https://review.openstack.org/#/c/315033">Networking-Midonet</reference><target ids="networking-midonet" names="networking-midonet" refuri="https://review.openstack.org/#/c/315033"></target>.</paragraph>
                        </list_item>
                    </bullet_list>
                    <paragraph>Any subproject must have a Grafana dashboard that shows failure
                        rates for at least Gate and Check queues.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>How to integrate into neutron-lib’s CI: there are a number of steps
                        required to integrate with neutron-lib CI and adopt neutron-lib in
                        general. One step is to validate that neutron-lib master is working
                        with the master of a given project that uses neutron-lib. For example
                        <reference name="patch" refuri="https://review.openstack.org/#/c/338603/">patch</reference><target ids="patch" names="patch" refuri="https://review.openstack.org/#/c/338603/"></target> introduced such
                        support for the Neutron project. Any subproject that wants to do the
                        same would need to adopt the following few lines:</paragraph>
                    <enumerated_list enumtype="arabic" prefix="" suffix=".">
                        <list_item>
                            <paragraph><reference refuri="https://review.openstack.org/#/c/338603/4/jenkins/jobs/projects.yaml@4685">https://review.openstack.org/#/c/338603/4/jenkins/jobs/projects.yaml@4685</reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference refuri="https://review.openstack.org/#/c/338603/3/zuul/layout.yaml@8501">https://review.openstack.org/#/c/338603/3/zuul/layout.yaml@8501</reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference refuri="https://review.openstack.org/#/c/338603/4/grafana/neutron.yaml@39">https://review.openstack.org/#/c/338603/4/grafana/neutron.yaml@39</reference></paragraph>
                        </list_item>
                    </enumerated_list>
                    <paragraph>Line 1 and 2 respectively add a job to the periodic queue for the
                        project, whereas line 3 introduced the failure rate trend for the
                        periodic job to spot failure spikes etc. Make sure your project has
                        the following:</paragraph>
                    <enumerated_list enumtype="arabic" prefix="" suffix=".">
                        <list_item>
                            <paragraph><reference refuri="https://review.openstack.org/#/c/357086/">https://review.openstack.org/#/c/357086/</reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference refuri="https://review.openstack.org/#/c/359143/">https://review.openstack.org/#/c/359143/</reference></paragraph>
                        </list_item>
                    </enumerated_list>
                </list_item>
                <list_item>
                    <paragraph>How to port api-ref over to neutron-lib: to publish the subproject
                        API reference into the <reference name="Networking API guide" refuri="http://developer.openstack.org/api-ref/networking/">Networking API guide</reference><target ids="networking-api-guide" names="networking\ api\ guide" refuri="http://developer.openstack.org/api-ref/networking/"></target>
                        you must contribute the API documentation into neutron-lib’s api-ref
                        directory as done in the <reference name="WADL/REST transition patch" refuri="https://review.openstack.org/#/c/327510/">WADL/REST transition patch</reference><target ids="wadl-rest-transition-patch" names="wadl/rest\ transition\ patch" refuri="https://review.openstack.org/#/c/327510/"></target>.
                        Once this is done successfully, a link to the subproject API will
                        show under the published <reference name="table of content" refuri="https://github.com/openstack/neutron-lib/blob/master/api-ref/source/index.rst">table of content</reference><target ids="table-of-content" names="table\ of\ content" refuri="https://github.com/openstack/neutron-lib/blob/master/api-ref/source/index.rst"></target>.
                        An RFE bug tracking this effort effectively initiates the request
                        for Stadium inclusion, where all the aspects as outlined in this
                        documented are reviewed by the PTL.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>How to port API definitions over the neutron-lib: the most basic
                        steps to port API definitions over to neutron-lib are demonstrated
                        in the following patches:</paragraph>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph><reference refuri="https://review.openstack.org/#/c/353131/">https://review.openstack.org/#/c/353131/</reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference refuri="https://review.openstack.org/#/c/353132/">https://review.openstack.org/#/c/353132/</reference></paragraph>
                        </list_item>
                    </bullet_list>
                    <paragraph>The <reference name="neutron-lib patch" refuri="https://review.openstack.org/#/c/353131/">neutron-lib patch</reference><target ids="neutron-lib-patch" names="neutron-lib\ patch" refuri="https://review.openstack.org/#/c/353131/"></target>
                        introduces the elements that define the API, and testing coverage
                        validates that the resource and actions maps use valid keywords.
                        API reference documentation is provided alongside the definition to
                        keep everything in one place.
                        The <reference name="neutron patch" refuri="https://review.openstack.org/#/c/353132/">neutron patch</reference><target ids="neutron-patch" names="neutron\ patch" refuri="https://review.openstack.org/#/c/353132/"></target>
                        uses the Neutron extension framework to plug the API definition
                        on top of the Neutron API backbone. The change can only merge when
                        there is a released version of neutron-lib.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>How to integrate into the openstack release: every project in the
                        Stadium must have release notes. In order to set up release notes,
                        please see the patches below for an example on how to set up reno:</paragraph>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph><reference refuri="https://review.openstack.org/#/c/320904/">https://review.openstack.org/#/c/320904/</reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference refuri="https://review.openstack.org/#/c/243085/">https://review.openstack.org/#/c/243085/</reference></paragraph>
                        </list_item>
                    </bullet_list>
                    <paragraph>For release documentation related to Neutron, please check the
                        <reference internal="True" refuri="../policies/index"><inline classes="doc">Neutron Policies</inline></reference>.
                        Once, everything is set up and your project is released, make sure
                        you see an entry on the release page (e.g. <reference name="Ocata" refuri="http://releases.openstack.org/ocata/index.html#other-projects">Ocata</reference><target ids="ocata" names="ocata" refuri="http://releases.openstack.org/ocata/index.html#other-projects"></target>.
                        Make sure you release according to the project declared release
                        <reference name="model" refuri="http://governance.openstack.org/reference/projects/neutron.html#deliverables-and-tags">model</reference><target ids="model" names="model" refuri="http://governance.openstack.org/reference/projects/neutron.html#deliverables-and-tags"></target>.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>How to port OpenStack Client over to python-neutronclient: client
                        API bindings and client command line interface support must be
                        developed in python-neutronclient under <reference name="osc module" refuri="https://github.com/openstack/python-neutronclient/tree/master/neutronclient/osc/v2">osc module</reference><target ids="osc-module" names="osc\ module" refuri="https://github.com/openstack/python-neutronclient/tree/master/neutronclient/osc/v2"></target>.
                        If your project requires one or both, consider looking at the
                        following example on how to contribute these two python-neutronclient
                        according to the OSC framework and guidelines:</paragraph>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph><reference refuri="https://review.openstack.org/#/c/340624/">https://review.openstack.org/#/c/340624/</reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference refuri="https://review.openstack.org/#/c/340763/">https://review.openstack.org/#/c/340763/</reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference refuri="https://review.openstack.org/#/c/352653/">https://review.openstack.org/#/c/352653/</reference></paragraph>
                        </list_item>
                    </bullet_list>
                    <paragraph>More information on how to develop python-openstackclient plugins
                        can be found on the following links:</paragraph>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph><reference refuri="https://docs.openstack.org/python-openstackclient/latest/contributor/plugins.html">https://docs.openstack.org/python-openstackclient/latest/contributor/plugins.html</reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><reference refuri="https://docs.openstack.org/python-openstackclient/latest/contributor/humaninterfaceguide.html">https://docs.openstack.org/python-openstackclient/latest/contributor/humaninterfaceguide.html</reference></paragraph>
                        </list_item>
                    </bullet_list>
                    <paragraph>It is worth prefixing the commands being added with the keyword
                        <reference name="network" refuri="https://review.openstack.org/#/c/340624/10/setup.cfg">network</reference><target ids="network" names="network" refuri="https://review.openstack.org/#/c/340624/10/setup.cfg"></target> to
                        avoid potential clash with other commands with similar names. This
                        is only required if the command object name is highly likely to have
                        an ambiguous meaning.</paragraph>
                </list_item>
            </bullet_list>
        </section>
    </section>
</document>

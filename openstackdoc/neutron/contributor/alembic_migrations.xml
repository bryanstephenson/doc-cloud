<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/neutron/doc/source/contributor/alembic_migrations.rst">
    <comment xml:space="preserve">Licensed under the Apache License, Version 2.0 (the "License"); you may
not use this file except in compliance with the License. You may obtain
a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations
under the License.


Convention for heading levels in Neutron devref:
=======  Heading 0 (reserved for the title in a document)
-------  Heading 1
~~~~~~~  Heading 2
+++++++  Heading 3
'''''''  Heading 4
(Avoid deeper levels because they do not render well.)</comment>
    <target refid="alembic-migrations"></target>
    <section ids="alembic-migrations id1" names="alembic\ migrations alembic_migrations">
        <title>Alembic Migrations</title>
        <section ids="introduction" names="introduction">
            <title>Introduction</title>
            <paragraph>The migrations in the alembic/versions contain the changes needed to migrate
                from older Neutron releases to newer versions. A migration occurs by executing
                a script that details the changes needed to upgrade the database. The migration
                scripts are ordered so that multiple scripts can run sequentially to update the
                database.</paragraph>
        </section>
        <section ids="the-migration-wrapper" names="the\ migration\ wrapper">
            <title>The Migration Wrapper</title>
            <paragraph>The scripts are executed by Neutron’s migration wrapper <literal>neutron-db-manage</literal>
                which uses the Alembic library to manage the migration. Pass the <literal>--help</literal>
                option to the wrapper for usage information.</paragraph>
            <paragraph>The wrapper takes some options followed by some commands:</paragraph>
            <literal_block xml:space="preserve">neutron-db-manage &lt;options&gt; &lt;commands&gt;</literal_block>
            <paragraph>The wrapper needs to be provided with the database connection string, which is
                usually provided in the <literal>neutron.conf</literal> configuration file in an installation.
                The wrapper automatically reads from <literal>/etc/neutron/neutron.conf</literal> if it is
                present. If the configuration is in a different location:</paragraph>
            <literal_block xml:space="preserve">neutron-db-manage --config-file /path/to/neutron.conf &lt;commands&gt;</literal_block>
            <paragraph>Multiple <literal>--config-file</literal> options can be passed if needed.</paragraph>
            <paragraph>Instead of reading the DB connection from the configuration file(s) the
                <literal>--database-connection</literal> option can be used:</paragraph>
            <literal_block xml:space="preserve">neutron-db-manage --database-connection mysql+pymysql://root:secret@127.0.0.1/neutron?charset=utf8 &lt;commands&gt;</literal_block>
            <paragraph>The <literal>branches</literal>, <literal>current</literal>, and <literal>history</literal> commands all accept a
                <literal>--verbose</literal> option, which, when passed, will instruct <literal>neutron-db-manage</literal>
                to display more verbose output for the specified command:</paragraph>
            <literal_block xml:space="preserve">neutron-db-manage current --verbose</literal_block>
            <paragraph>For some commands the wrapper needs to know the entrypoint of the core plugin
                for the installation. This can be read from the configuration file(s) or
                specified using the <literal>--core_plugin</literal> option:</paragraph>
            <literal_block xml:space="preserve">neutron-db-manage --core_plugin neutron.plugins.ml2.plugin.Ml2Plugin &lt;commands&gt;</literal_block>
            <paragraph>When giving examples below of using the wrapper the options will not be shown.
                It is assumed you will use the options that you need for your environment.</paragraph>
            <paragraph>For new deployments you will start with an empty database. You then upgrade
                to the latest database version via:</paragraph>
            <literal_block xml:space="preserve">neutron-db-manage upgrade heads</literal_block>
            <paragraph>For existing deployments the database will already be at some version. To
                check the current database version:</paragraph>
            <literal_block xml:space="preserve">neutron-db-manage current</literal_block>
            <paragraph>After installing a new version of Neutron server, upgrading the database is
                the same command:</paragraph>
            <literal_block xml:space="preserve">neutron-db-manage upgrade heads</literal_block>
            <paragraph>To create a script to run the migration offline:</paragraph>
            <literal_block xml:space="preserve">neutron-db-manage upgrade heads --sql</literal_block>
            <paragraph>To run the offline migration between specific migration versions:</paragraph>
            <literal_block xml:space="preserve">neutron-db-manage upgrade &lt;start version&gt;:&lt;end version&gt; --sql</literal_block>
            <paragraph>Upgrade the database incrementally:</paragraph>
            <literal_block xml:space="preserve">neutron-db-manage upgrade --delta &lt;# of revs&gt;</literal_block>
            <paragraph><strong>NOTE:</strong> Database downgrade is not supported.</paragraph>
        </section>
        <section ids="migration-branches" names="migration\ branches">
            <title>Migration Branches</title>
            <paragraph>Neutron makes use of alembic branches for two purposes.</paragraph>
            <section ids="independent-sub-project-tables" names="1.\ independent\ sub-project\ tables">
                <title>1. Independent Sub-Project Tables</title>
                <paragraph>Various <reference name="sub-projects" refuri="../stadium/sub_projects.html">sub-projects</reference><target ids="sub-projects" names="sub-projects" refuri="../stadium/sub_projects.html"></target> can be installed with Neutron. Each
                    sub-project registers its own alembic branch which is responsible for migrating
                    the schemas of the tables owned by the sub-project.</paragraph>
                <paragraph>The neutron-db-manage script detects which sub-projects have been installed by
                    enumerating the <literal>neutron.db.alembic_migrations</literal> entrypoints. For more details
                    see the <reference name="Entry Points section of Contributing extensions to Neutron" refuri="contribute.html#entry-points">Entry Points section of Contributing extensions to Neutron</reference><target ids="entry-points-section-of-contributing-extensions-to-neutron" names="entry\ points\ section\ of\ contributing\ extensions\ to\ neutron" refuri="contribute.html#entry-points"></target>.</paragraph>
                <paragraph>The neutron-db-manage script runs the given alembic command against all
                    installed sub-projects. (An exception is the <literal>revision</literal> command, which is
                    discussed in the <reference name="Developers" refid="developers">Developers</reference> section below.)</paragraph>
            </section>
            <section ids="offline-online-migrations" names="2.\ offline/online\ migrations">
                <title>2. Offline/Online Migrations</title>
                <paragraph>Since Liberty, Neutron maintains two parallel alembic migration branches.</paragraph>
                <paragraph>The first one, called ‘expand’, is used to store expansion-only migration
                    rules. Those rules are strictly additive and can be applied while
                    neutron-server is running. Examples of additive database schema changes are:
                    creating a new table, adding a new table column, adding a new index, etc.</paragraph>
                <paragraph>The second branch, called ‘contract’, is used to store those migration rules
                    that are not safe to apply while neutron-server is running. Those include:
                    column or table removal, moving data from one part of the database into another
                    (renaming a column, transforming single table into multiple, etc.), introducing
                    or modifying constraints, etc.</paragraph>
                <paragraph>The intent of the split is to allow invoking those safe migrations from
                    ‘expand’ branch while neutron-server is running, reducing downtime needed to
                    upgrade the service.</paragraph>
                <paragraph>For more details, see the <reference name="Expand and Contract Scripts" refid="expand-and-contract-scripts">Expand and Contract Scripts</reference> section below.</paragraph>
            </section>
        </section>
        <section ids="developers" names="developers">
            <title>Developers</title>
            <paragraph>A database migration script is required when you submit a change to Neutron or
                a sub-project that alters the database model definition. The migration script
                is a special python file that includes code to upgrade the database to match
                the changes in the model definition. Alembic will execute these scripts in
                order to provide a linear migration path between revisions. The
                neutron-db-manage command can be used to generate migration scripts for you to
                complete. The operations in the template are those supported by the Alembic
                migration library.</paragraph>
            <target refid="neutron-db-manage-without-devstack"></target>
            <section ids="running-neutron-db-manage-without-devstack neutron-db-manage-without-devstack" names="running\ neutron-db-manage\ without\ devstack neutron-db-manage-without-devstack">
                <title>Running neutron-db-manage without devstack</title>
                <paragraph>When, as a developer, you want to work with the Neutron DB schema and alembic
                    migrations only, it can be rather tedious to rely on devstack just to get an
                    up-to-date neutron-db-manage installed. This section describes how to work on
                    the schema and migration scripts with just the unit test virtualenv and
                    mysql. You can also operate on a separate test database so you don’t mess up
                    the installed Neutron database.</paragraph>
                <section ids="setting-up-the-environment" names="setting\ up\ the\ environment">
                    <title>Setting up the environment</title>
                    <section ids="install-mysql-service" names="install\ mysql\ service">
                        <title>Install mysql service</title>
                        <paragraph>This only needs to be done once since it is a system install. If you have run
                            devstack on your system before, then the mysql service is already installed and
                            you can skip this step.</paragraph>
                        <paragraph>Mysql must be configured as installed by devstack, and the following script
                            accomplishes this without actually running devstack:</paragraph>
                        <literal_block xml:space="preserve">INSTALL_MYSQL_ONLY=True ./tools/configure_for_func_testing.sh ../devstack</literal_block>
                        <paragraph>Run this from the root of the neutron repo. It assumes an up-to-date clone of
                            the devstack repo is in <literal>../devstack</literal>.</paragraph>
                        <paragraph>Note that you must know the mysql root password. It is derived from (in order
                            of precedence):</paragraph>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph><literal>$MYSQL_PASSWORD</literal> in your environment</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph><literal>$MYSQL_PASSWORD</literal> in <literal>../devstack/local.conf</literal></paragraph>
                            </list_item>
                            <list_item>
                                <paragraph><literal>$MYSQL_PASSWORD</literal> in <literal>../devstack/localrc</literal></paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>default of ‘secretmysql’ from <literal>tools/configure_for_func_testing.sh</literal></paragraph>
                            </list_item>
                        </bullet_list>
                    </section>
                    <section ids="work-on-a-test-database" names="work\ on\ a\ test\ database">
                        <title>Work on a test database</title>
                        <paragraph>Rather than using the neutron database when working on schema and alembic
                            migration script changes, we can work on a test database. In the examples
                            below, we use a database named <literal>testdb</literal>.</paragraph>
                        <paragraph>To create the database:</paragraph>
                        <literal_block xml:space="preserve">mysql -e "create database testdb;"</literal_block>
                        <paragraph>You will often need to clear it to re-run operations from a blank database:</paragraph>
                        <literal_block xml:space="preserve">mysql -e "drop database testdb; create database testdb;"</literal_block>
                        <paragraph>To work on the test database instead of the neutron database, point to it with
                            the <literal>--database-connection</literal> option:</paragraph>
                        <literal_block xml:space="preserve">neutron-db-manage --database-connection mysql+pymysql://root:secretmysql@127.0.0.1/testdb?charset=utf8 &lt;commands&gt;</literal_block>
                        <paragraph>You may find it convenient to set up an alias (in your .bashrc) for this:</paragraph>
                        <literal_block xml:space="preserve">alias test-db-manage='neutron-db-manage --database-connection mysql+pymysql://root:secretmysql@127.0.0.1/testdb?charset=utf8'</literal_block>
                    </section>
                    <section ids="create-and-activate-the-virtualenv" names="create\ and\ activate\ the\ virtualenv">
                        <title>Create and activate the virtualenv</title>
                        <paragraph>From the root of the neutron (or sub-project) repo directory, run:</paragraph>
                        <literal_block xml:space="preserve">tox --notest -r -e py27
source .tox/py27/bin/activate</literal_block>
                        <paragraph>Now you can use the <literal>test-db-manage</literal> alias in place of <literal>neutron-db-manage</literal>
                            in the script auto-generation instructions below.</paragraph>
                        <paragraph>When you are done, exit the virtualenv:</paragraph>
                        <literal_block xml:space="preserve">deactivate</literal_block>
                    </section>
                </section>
            </section>
            <section ids="script-auto-generation" names="script\ auto-generation">
                <title>Script Auto-generation</title>
                <paragraph>This section describes how to auto-generate an alembic migration script for a
                    model change. You may either use the system installed devstack environment, or
                    a virtualenv + testdb environment as described in
                    <reference internal="True" refid="neutron-db-manage-without-devstack"><inline classes="std std-ref">Running neutron-db-manage without devstack</inline></reference>.</paragraph>
                <paragraph>Stop the neutron service. Work from the base directory of the neutron (or
                    sub-project) repo. Check out the master branch and do <literal>git pull</literal> to
                    ensure it is fully up to date. Check out your development branch and rebase to
                    master.</paragraph>
                <paragraph><strong>NOTE:</strong> Make sure you have not updated the <literal>CONTRACT_HEAD</literal> or
                    <literal>EXPAND_HEAD</literal> yet at this point.</paragraph>
                <paragraph>Start with an empty database and upgrade to heads:</paragraph>
                <literal_block xml:space="preserve">mysql -e "drop database neutron; create database neutron;"
neutron-db-manage upgrade heads</literal_block>
                <paragraph>The database schema is now created without your model changes. The alembic
                    <literal>revision --autogenerate</literal> command will look for differences between the
                    schema generated by the upgrade command and the schema defined by the models,
                    including your model updates:</paragraph>
                <literal_block xml:space="preserve">neutron-db-manage revision -m "description of revision" --autogenerate</literal_block>
                <paragraph>This generates a prepopulated template with the changes needed to match the
                    database state with the models.  You should inspect the autogenerated template
                    to ensure that the proper models have been altered.
                    When running the above command you will probably get the following error
                    message:</paragraph>
                <literal_block xml:space="preserve">Multiple heads are present; please specify the head revision on which the
new revision should be based, or perform a merge.</literal_block>
                <paragraph>This is alembic telling you that it does not know which branch (contract or
                    expand) to generate the revision for. You must decide, based on whether you
                    are doing contracting or expanding changes to the schema, and provide either
                    the <literal>--contract</literal> or <literal>--expand</literal> option. If you have both types of changes,
                    you must run the command twice, once with each option, and then manually edit
                    the generated revision scripts to separate the migration operations.</paragraph>
                <paragraph>In rare circumstances, you may want to start with an empty migration template
                    and manually author the changes necessary for an upgrade.  You can create a
                    blank file for a branch via:</paragraph>
                <literal_block xml:space="preserve">neutron-db-manage revision -m "description of revision" --expand
neutron-db-manage revision -m "description of revision" --contract</literal_block>
                <paragraph><strong>NOTE:</strong> If you use above command you should check that migration is created
                    in a directory that is named as current release. If not, please raise the issue
                    with the development team (IRC, mailing list, launchpad bug).</paragraph>
                <paragraph><strong>NOTE:</strong> The “description of revision” text should be a simple English
                    sentence. The first 30 characters of the description will be used in the file
                    name for the script, with underscores substituted for spaces. If the truncation
                    occurs at an awkward point in the description, you can modify the script file
                    name manually before committing.</paragraph>
                <paragraph>The timeline on each alembic branch should remain linear and not interleave
                    with other branches, so that there is a clear path when upgrading. To verify
                    that alembic branches maintain linear timelines, you can run this command:</paragraph>
                <literal_block xml:space="preserve">neutron-db-manage check_migration</literal_block>
                <paragraph>If this command reports an error, you can troubleshoot by showing the migration
                    timelines using the <literal>history</literal> command:</paragraph>
                <literal_block xml:space="preserve">neutron-db-manage history</literal_block>
            </section>
            <section ids="expand-and-contract-scripts" names="expand\ and\ contract\ scripts">
                <title>Expand and Contract Scripts</title>
                <paragraph>The obsolete “branchless” design of a migration script included that it
                    indicates a specific “version” of the schema, and includes directives that
                    apply all necessary changes to the database at once.  If we look for example at
                    the script <literal>2d2a8a565438_hierarchical_binding.py</literal>, we will see:</paragraph>
                <literal_block xml:space="preserve"># .../alembic_migrations/versions/2d2a8a565438_hierarchical_binding.py

def upgrade():

    # .. inspection code ...

    op.create_table(
        'ml2_port_binding_levels',
        sa.Column('port_id', sa.String(length=36), nullable=False),
        sa.Column('host', sa.String(length=255), nullable=False),
        # ... more columns ...
    )

    for table in port_binding_tables:
        op.execute((
            "INSERT INTO ml2_port_binding_levels "
            "SELECT port_id, host, 0 AS level, driver, segment AS segment_id "
            "FROM %s "
            "WHERE host &lt;&gt; '' "
            "AND driver &lt;&gt; '';"
        ) % table)

    op.drop_constraint(fk_name_dvr[0], 'ml2_dvr_port_bindings', 'foreignkey')
    op.drop_column('ml2_dvr_port_bindings', 'cap_port_filter')
    op.drop_column('ml2_dvr_port_bindings', 'segment')
    op.drop_column('ml2_dvr_port_bindings', 'driver')

    # ... more DROP instructions ...</literal_block>
                <paragraph>The above script contains directives that are both under the “expand”
                    and “contract” categories, as well as some data migrations.  the <literal>op.create_table</literal>
                    directive is an “expand”; it may be run safely while the old version of the
                    application still runs, as the old code simply doesn’t look for this table.
                    The <literal>op.drop_constraint</literal> and <literal>op.drop_column</literal> directives are
                    “contract” directives (the drop column more so than the drop constraint); running
                    at least the <literal>op.drop_column</literal> directives means that the old version of the
                    application will fail, as it will attempt to access these columns which no longer
                    exist.</paragraph>
                <paragraph>The data migrations in this script are adding new
                    rows to the newly added <literal>ml2_port_binding_levels</literal> table.</paragraph>
                <paragraph>Under the new migration script directory structure, the above script would be
                    stated as two scripts; an “expand” and a “contract” script:</paragraph>
                <literal_block xml:space="preserve"># expansion operations
# .../alembic_migrations/versions/liberty/expand/2bde560fc638_hierarchical_binding.py

def upgrade():

    op.create_table(
        'ml2_port_binding_levels',
        sa.Column('port_id', sa.String(length=36), nullable=False),
        sa.Column('host', sa.String(length=255), nullable=False),
        # ... more columns ...
    )


# contraction operations
# .../alembic_migrations/versions/liberty/contract/4405aedc050e_hierarchical_binding.py

def upgrade():

    for table in port_binding_tables:
        op.execute((
            "INSERT INTO ml2_port_binding_levels "
            "SELECT port_id, host, 0 AS level, driver, segment AS segment_id "
            "FROM %s "
            "WHERE host &lt;&gt; '' "
            "AND driver &lt;&gt; '';"
        ) % table)

    op.drop_constraint(fk_name_dvr[0], 'ml2_dvr_port_bindings', 'foreignkey')
    op.drop_column('ml2_dvr_port_bindings', 'cap_port_filter')
    op.drop_column('ml2_dvr_port_bindings', 'segment')
    op.drop_column('ml2_dvr_port_bindings', 'driver')

    # ... more DROP instructions ...</literal_block>
                <paragraph>The two scripts would be present in different subdirectories and also part of
                    entirely separate versioning streams.  The “expand” operations are in the
                    “expand” script, and the “contract” operations are in the “contract” script.</paragraph>
                <paragraph>For the time being, data migration rules also belong to contract branch. There
                    is expectation that eventually live data migrations move into middleware that
                    will be aware about different database schema elements to converge on, but
                    Neutron is still not there.</paragraph>
                <paragraph>Scripts that contain only expansion or contraction rules do not require a split
                    into two parts.</paragraph>
                <paragraph>If a contraction script depends on a script from expansion stream, the
                    following directive should be added in the contraction script:</paragraph>
                <literal_block xml:space="preserve">depends_on = ('&lt;expansion-revision&gt;',)</literal_block>
            </section>
            <section ids="expand-and-contract-branch-exceptions" names="expand\ and\ contract\ branch\ exceptions">
                <title>Expand and Contract Branch Exceptions</title>
                <paragraph>In some cases, we have to have “expand” operations in contract migrations. For
                    example, table ‘networksegments’ was renamed in contract migration, so all
                    operations with this table are required to be in contract branch as well.
                    For such cases, we use the <literal>contract_creation_exceptions</literal> that should be
                    implemented as part of such migrations. This is needed to get functional tests
                    pass.</paragraph>
                <paragraph>Usage:</paragraph>
                <literal_block xml:space="preserve">def contract_creation_exceptions():
    """Docstring should explain why we allow such exception for contract
    branch.
    """
    return {
        sqlalchemy_obj_type: ['name']
        # For example: sa.Column: ['subnets.segment_id']
    }</literal_block>
            </section>
            <section ids="head-files-for-conflict-management" names="head\ files\ for\ conflict\ management">
                <title>HEAD files for conflict management</title>
                <paragraph>In directory <literal>neutron/db/migration/alembic_migrations/versions</literal> there are two
                    files, <literal>CONTRACT_HEAD</literal> and <literal>EXPAND_HEAD</literal>. These files contain the ID of the
                    head revision in each branch. The purpose of these files is to validate the
                    revision timelines and prevent non-linear changes from entering the merge queue.</paragraph>
                <paragraph>When you create a new migration script by neutron-db-manage these files will be
                    updated automatically. But if another migration script is merged while your
                    change is under review, you will need to resolve the conflict manually by
                    changing the <literal>down_revision</literal> in your migration script.</paragraph>
            </section>
            <section ids="applying-database-migration-rules" names="applying\ database\ migration\ rules">
                <title>Applying database migration rules</title>
                <paragraph>To apply just expansion rules, execute:</paragraph>
                <literal_block xml:space="preserve">neutron-db-manage upgrade --expand</literal_block>
                <paragraph>After the first step is done, you can stop neutron-server, apply remaining
                    non-expansive migration rules, if any:</paragraph>
                <literal_block xml:space="preserve">neutron-db-manage upgrade --contract</literal_block>
                <paragraph>and finally, start your neutron-server again.</paragraph>
                <paragraph>If you have multiple neutron-server instances in your cloud, and there are
                    pending contract scripts not applied to the database, full shutdown of all
                    those services is required before ‘upgrade –contract’ is executed. You can
                    determine whether there are any pending contract scripts by checking the
                    message returned from the following command:</paragraph>
                <literal_block xml:space="preserve">neutron-db-manage has_offline_migrations</literal_block>
                <paragraph>If you are not interested in applying safe migration rules while the service is
                    running, you can still upgrade database the old way, by stopping the service,
                    and then applying all available rules:</paragraph>
                <literal_block xml:space="preserve">neutron-db-manage upgrade head[s]</literal_block>
                <paragraph>It will apply all the rules from both the expand and the contract branches, in
                    proper order.</paragraph>
            </section>
            <section ids="tagging-milestone-revisions" names="tagging\ milestone\ revisions">
                <title>Tagging milestone revisions</title>
                <paragraph>When named release (liberty, mitaka, etc.) is done for neutron or a
                    sub-project, the alembic revision scripts at the head of each branch for that
                    release must be tagged. This is referred to as a milestone revision tag.</paragraph>
                <paragraph>For example, <reference name="here" refuri="https://review.openstack.org/228272">here</reference><target ids="here" names="here" refuri="https://review.openstack.org/228272"></target> is a patch that tags
                    the liberty milestone revisions for the neutron-fwaas sub-project. Note that
                    each branch (expand and contract) is tagged.</paragraph>
                <paragraph>Tagging milestones allows neutron-db-manage to upgrade the schema to a
                    milestone release, e.g.:</paragraph>
                <literal_block xml:space="preserve">neutron-db-manage upgrade liberty</literal_block>
            </section>
            <section ids="generation-of-comparable-metadata-with-current-database-schema" names="generation\ of\ comparable\ metadata\ with\ current\ database\ schema">
                <title>Generation of comparable metadata with current database schema</title>
                <paragraph>Directory <literal>neutron/db/migration/models</literal> contains module <literal>head.py</literal>, which
                    provides all database models at current HEAD. Its purpose is to create
                    comparable metadata with the current database schema. The database schema is
                    generated by alembic migration scripts. The models must match, and this is
                    verified by a model-migration sync test in Neutron’s functional test suite.
                    That test requires all modules containing DB models to be imported by head.py
                    in order to make a complete comparison.</paragraph>
                <paragraph>When adding new database models, developers must update this module, otherwise
                    the change will fail to merge.</paragraph>
            </section>
        </section>
    </section>
</document>

<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/neutron/doc/source/contributor/internals/db_layer.rst">
    <comment xml:space="preserve">Licensed under the Apache License, Version 2.0 (the "License"); you may
not use this file except in compliance with the License. You may obtain
a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations
under the License.


Convention for heading levels in Neutron devref:
=======  Heading 0 (reserved for the title in a document)
-------  Heading 1
~~~~~~~  Heading 2
+++++++  Heading 3
'''''''  Heading 4
(Avoid deeper levels because they do not render well.)</comment>
    <section ids="neutron-database-layer" names="neutron\ database\ layer">
        <title>Neutron Database Layer</title>
        <paragraph>This section contains some common information that will be useful for
            developers that need to do some db changes.</paragraph>
        <section ids="difference-between-default-and-server-default-parameters-for-columns" names="difference\ between\ 'default'\ and\ 'server_default'\ parameters\ for\ columns">
            <title>Difference between ‘default’ and ‘server_default’ parameters for columns</title>
            <paragraph>For columns it is possible to set ‘default’ or ‘server_default’. What is the
                difference between them and why should they be used?</paragraph>
            <paragraph>The explanation is quite simple:</paragraph>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph><reference name="default" refuri="http://docs.sqlalchemy.org/en/rel_0_9/core/metadata.html#sqlalchemy.schema.Column.params.default">default</reference><target ids="default" names="default" refuri="http://docs.sqlalchemy.org/en/rel_0_9/core/metadata.html#sqlalchemy.schema.Column.params.default"></target> - the default value that SQLAlchemy will specify in queries for creating instances of a given model;</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="server_default" refuri="http://docs.sqlalchemy.org/en/rel_0_9/core/metadata.html#sqlalchemy.schema.Column.params.server_default">server_default</reference><target ids="server-default" names="server_default" refuri="http://docs.sqlalchemy.org/en/rel_0_9/core/metadata.html#sqlalchemy.schema.Column.params.server_default"></target> - the default value for a column that SQLAlchemy will specify in DDL.</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>Summarizing, ‘default’ is useless in migrations and only ‘server_default’
                should be used. For synchronizing migrations with models server_default parameter
                should also be added in model. If default value in database is not needed,
                ‘server_default’ should not be used. The declarative approach can be bypassed
                (i.e. ‘default’ may be omitted in the model) if default is enforced through
                business logic.</paragraph>
        </section>
        <section ids="database-migrations" names="database\ migrations">
            <title>Database migrations</title>
            <paragraph>For details on the neutron-db-manage wrapper and alembic migrations, see
                <reference name="Alembic Migrations" refuri="alembic_migrations.html">Alembic Migrations</reference><target ids="alembic-migrations" names="alembic\ migrations" refuri="alembic_migrations.html"></target>.</paragraph>
            <target refid="testing-database-migrations"></target>
        </section>
        <section ids="module-neutron.tests.functional.db.test_migrations tests-to-verify-that-database-migrations-and-models-are-in-sync testing-database-migrations" names="tests\ to\ verify\ that\ database\ migrations\ and\ models\ are\ in\ sync testing-database-migrations">
            <title>Tests to verify that database migrations and models are in sync</title>
            <index entries="['single',\ 'neutron.tests.functional.db.test_migrations\ (module)',\ 'module-neutron.tests.functional.db.test_migrations',\ '',\ None]"></index>
            <index entries="['single',\ '_TestModelsMigrations\ (class\ in\ neutron.tests.functional.db.test_migrations)',\ 'neutron.tests.functional.db.test_migrations._TestModelsMigrations',\ '',\ None]"></index>
            <desc desctype="class" domain="py" noindex="False" objtype="class">
                <desc_signature class="" first="False" fullname="_TestModelsMigrations" ids="neutron.tests.functional.db.test_migrations._TestModelsMigrations" module="neutron.tests.functional.db.test_migrations" names="neutron.tests.functional.db.test_migrations._TestModelsMigrations"><desc_annotation xml:space="preserve">class </desc_annotation><desc_addname xml:space="preserve">neutron.tests.functional.db.test_migrations.</desc_addname><desc_name xml:space="preserve">_TestModelsMigrations</desc_name></desc_signature>
                <desc_content>
                    <paragraph>Test for checking of equality models state and migrations.</paragraph>
                    <paragraph>For the opportunistic testing you need to set up a db named
                        ‘openstack_citest’ with user ‘openstack_citest’ and password
                        ‘openstack_citest’ on localhost.
                        The test will then use that db and user/password combo to run the tests.</paragraph>
                    <paragraph>For PostgreSQL on Ubuntu this can be done with the following commands:</paragraph>
                    <literal_block xml:space="preserve">sudo -u postgres psql
postgres=# create user openstack_citest with createdb login password
          'openstack_citest';
postgres=# create database openstack_citest with owner
           openstack_citest;</literal_block>
                    <paragraph>For MySQL on Ubuntu this can be done with the following commands:</paragraph>
                    <literal_block xml:space="preserve">mysql -u root
&gt;create database openstack_citest;
&gt;grant all privileges on openstack_citest.* to
 openstack_citest@localhost identified by 'openstack_citest';</literal_block>
                    <paragraph>Output is a list that contains information about differences between db and
                        models. Output example:</paragraph>
                    <literal_block xml:space="preserve">[('add_table',
  Table('bat', MetaData(bind=None),
        Column('info', String(), table=&lt;bat&gt;), schema=None)),
 ('remove_table',
  Table(u'bar', MetaData(bind=None),
        Column(u'data', VARCHAR(), table=&lt;bar&gt;), schema=None)),
 ('add_column',
  None,
  'foo',
  Column('data', Integer(), table=&lt;foo&gt;)),
 ('remove_column',
  None,
  'foo',
  Column(u'old_data', VARCHAR(), table=None)),
 [('modify_nullable',
   None,
   'foo',
   u'x',
   {'existing_server_default': None,
   'existing_type': INTEGER()},
   True,
   False)]]</literal_block>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph><literal>remove_*</literal> means that there is extra table/column/constraint in db;</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><literal>add_*</literal> means that it is missing in db;</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><literal>modify_*</literal> means that on column in db is set wrong
                                type/nullable/server_default. Element contains information:</paragraph>
                            <block_quote>
                                <bullet_list bullet="-">
                                    <list_item>
                                        <paragraph>what should be modified,</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph>schema,</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph>table,</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph>column,</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph>existing correct column parameters,</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph>right value,</paragraph>
                                    </list_item>
                                    <list_item>
                                        <paragraph>wrong value.</paragraph>
                                    </list_item>
                                </bullet_list>
                            </block_quote>
                        </list_item>
                    </bullet_list>
                    <paragraph>This class also contains tests for branches, like that correct operations
                        are used in contract and expand branches.</paragraph>
                </desc_content>
            </desc>
        </section>
        <section ids="the-standard-attribute-table" names="the\ standard\ attribute\ table">
            <title>The Standard Attribute Table</title>
            <paragraph>There are many attributes that we would like to store in the database which
                are common across many Neutron objects (e.g. tags, timestamps, rbac entries).
                We have previously been handling this by duplicating the schema to every table
                via model mixins. This means that a DB migration is required for each object
                that wants to adopt one of these common attributes. This becomes even more
                cumbersome when the relationship between the attribute and the object is
                many-to-one because each object then needs its own table for the attributes
                (assuming referential integrity is a concern).</paragraph>
            <paragraph>To address this issue, the ‘standardattribute’ table is available. Any model
                can add support for this table by inheriting the ‘HasStandardAttributes’ mixin
                in neutron.db.standard_attr. This mixin will add a standard_attr_id BigInteger
                column to the model with a foreign key relationship to the ‘standardattribute’
                table. The model will then be able to access any columns of the
                ‘standardattribute’ table and any tables related to it.</paragraph>
            <paragraph>A model that inherits HasStandardAttributes must implement the property
                ‘api_collections’, which is a list of API resources that the new object
                may appear under. In most cases, this will only be one (e.g. ‘ports’ for
                the Port model). This is used by all of the service plugins that add standard
                attribute fields to determine which API responses need to be populated.</paragraph>
            <paragraph>A model that supports tag mechanism must implement the property
                ‘collection_resource_map’ which is a dict of ‘collection_name’ and
                ‘resource_name’ for API resources. And also the model must implement
                ‘tag_support’ with a value True.</paragraph>
            <paragraph>The introduction of a new standard attribute only requires one column addition
                to the ‘standardattribute’ table for one-to-one relationships or a new table
                for one-to-many or one-to-zero relationships. Then all of the models using the
                ‘HasStandardAttribute’ mixin will automatically gain access to the new attribute.</paragraph>
            <paragraph>Any attributes that will apply to every neutron resource (e.g. timestamps)
                can be added directly to the ‘standardattribute’ table. For things that will
                frequently be NULL for most entries (e.g. a column to store an error reason),
                a new table should be added and joined to in a query to prevent a bunch of
                NULL entries in the database.</paragraph>
        </section>
    </section>
</document>

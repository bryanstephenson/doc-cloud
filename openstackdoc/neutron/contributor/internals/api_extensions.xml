<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/neutron/doc/source/contributor/internals/api_extensions.rst">
    <comment xml:space="preserve">Licensed under the Apache License, Version 2.0 (the "License"); you may
not use this file except in compliance with the License. You may obtain
a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations
under the License.


Convention for heading levels in Neutron devref:
=======  Heading 0 (reserved for the title in a document)
-------  Heading 1
~~~~~~~  Heading 2
+++++++  Heading 3
'''''''  Heading 4
(Avoid deeper levels because they do not render well.)</comment>
    <section ids="api-extensions" names="api\ extensions">
        <title>API Extensions</title>
        <paragraph>API extensions is the standard way of introducing new functionality
            to the Neutron project, it allows plugins to
            determine if they wish to support the functionality or not.</paragraph>
        <section ids="examples" names="examples">
            <title>Examples</title>
            <paragraph>The easiest way to demonstrate how an API extension is written, is
                by studying an existing API extension and explaining the different layers.</paragraph>
            <compound classes="toctree-wrapper">
                <compact_paragraph toctree="True"><bullet_list><list_item classes="toctree-l1"><compact_paragraph classes="toctree-l1"><reference anchorname="" internal="True" refuri="security_group_api">Guided Tour: The Neutron Security Group API</reference></compact_paragraph></list_item></bullet_list></compact_paragraph>
            </compound>
        </section>
        <section ids="extensions-for-resources-with-standard-attributes" names="extensions\ for\ resources\ with\ standard\ attributes">
            <title>Extensions for Resources with standard attributes</title>
            <paragraph>Resources that inherit from the HasStandardAttributes DB class can
                automatically have the extensions written for standard attributes
                (e.g. timestamps, revision number, etc) extend their resources
                by defining the ‘api_collections’ on their model. These are used
                by extensions for standard attr resources to generate the extended
                resources map.</paragraph>
            <paragraph>Any new addition of a resource to the standard attributes collection
                must be accompanied with a new extension to ensure that it is discoverable
                via the API. If it’s a completely new resource, the extension describing
                that resource will suffice. If it’s an existing resource that was released
                in a previous cycle having the standard attributes added for the first time,
                then a dummy extension needs to be added indicating that the resource
                now has standard attributes. This ensures that an API caller can always
                discover if an attribute will be available.</paragraph>
            <paragraph>For example, if Flavors were migrated to include standard attributes, we
                need a new ‘flavor-standardattr’ extension. Then as an API caller, I will
                know that flavors will have timestamps by checking for ‘flavor-standardattr’
                and ‘timestamps’.</paragraph>
            <paragraph>Current API resources extended by standard attr extensions:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>subnets: neutron.db.models_v2.Subnet</paragraph>
                </list_item>
                <list_item>
                    <paragraph>trunks: neutron.services.trunk.models.Trunk</paragraph>
                </list_item>
                <list_item>
                    <paragraph>routers: neutron.db.l3_db.Router</paragraph>
                </list_item>
                <list_item>
                    <paragraph>segments: neutron.db.segments_db.NetworkSegment</paragraph>
                </list_item>
                <list_item>
                    <paragraph>security_group_rules: neutron.db.models.securitygroup.SecurityGroupRule</paragraph>
                </list_item>
                <list_item>
                    <paragraph>networks: neutron.db.models_v2.Network</paragraph>
                </list_item>
                <list_item>
                    <paragraph>policies: neutron.db.qos.models.QosPolicy</paragraph>
                </list_item>
                <list_item>
                    <paragraph>subnetpools: neutron.db.models_v2.SubnetPool</paragraph>
                </list_item>
                <list_item>
                    <paragraph>ports: neutron.db.models_v2.Port</paragraph>
                </list_item>
                <list_item>
                    <paragraph>security_groups: neutron.db.models.securitygroup.SecurityGroup</paragraph>
                </list_item>
                <list_item>
                    <paragraph>floatingips: neutron.db.l3_db.FloatingIP</paragraph>
                </list_item>
            </bullet_list>
        </section>
    </section>
</document>

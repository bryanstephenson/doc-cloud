<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/neutron/doc/source/contributor/internals/services_and_agents.rst">
    <comment xml:space="preserve">Licensed under the Apache License, Version 2.0 (the "License"); you may
not use this file except in compliance with the License. You may obtain
a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations
under the License.


Convention for heading levels in Neutron devref:
=======  Heading 0 (reserved for the title in a document)
-------  Heading 1
~~~~~~~  Heading 2
+++++++  Heading 3
'''''''  Heading 4
(Avoid deeper levels because they do not render well.)</comment>
    <section ids="services-and-agents" names="services\ and\ agents">
        <title>Services and agents</title>
        <paragraph>A usual Neutron setup consists of multiple services and agents running on one
            or multiple nodes (though some exotic setups potentially may not need any
            agents). Each of those services provides some of the networking or API
            services. Among those of special interest:</paragraph>
        <enumerated_list enumtype="arabic" prefix="" suffix=".">
            <list_item>
                <paragraph>neutron-server that provides API endpoints and serves as a single point of
                    access to the database. It usually runs on nodes called Controllers.</paragraph>
            </list_item>
            <list_item>
                <paragraph>Layer2 agent that can utilize Open vSwitch, Linuxbridge or other vendor
                    specific technology to provide network segmentation and isolation for project
                    networks. The L2 agent should run on every node where it is deemed
                    responsible for wiring and securing virtual interfaces (usually both Compute
                    and Network nodes).</paragraph>
            </list_item>
            <list_item>
                <paragraph>Layer3 agent that runs on Network node and provides East-West and
                    North-South routing plus some advanced services such as FWaaS or VPNaaS.</paragraph>
            </list_item>
        </enumerated_list>
        <paragraph>For the purpose of this document, we call all services, servers and agents that
            run on any node as just “services”.</paragraph>
        <section ids="entry-points" names="entry\ points">
            <title>Entry points</title>
            <paragraph>Entry points for services are defined in setup.cfg under “console_scripts”
                section.  Those entry points should generally point to main() functions located
                under neutron/cmd/… path.</paragraph>
            <paragraph>Note: some existing vendor/plugin agents still maintain their entry points in
                other locations. Developers responsible for those agents are welcome to apply
                the guideline above.</paragraph>
        </section>
        <section ids="interacting-with-eventlet" names="interacting\ with\ eventlet">
            <title>Interacting with Eventlet</title>
            <paragraph>Neutron extensively utilizes the eventlet library to provide asynchronous
                concurrency model to its services. To utilize it correctly, the following
                should be kept in mind.</paragraph>
            <paragraph>If a service utilizes the eventlet library, then it should not call
                eventlet.monkey_patch() directly but instead maintain its entry point main()
                function under neutron/cmd/eventlet/… If that is the case, the standard
                Python library will be automatically patched for the service on entry point
                import (monkey patching is done inside <reference name="python package file" refuri="http://git.openstack.org/cgit/openstack/neutron/tree/neutron/cmd/eventlet/__init__.py">python package file</reference><target ids="python-package-file" names="python\ package\ file" refuri="http://git.openstack.org/cgit/openstack/neutron/tree/neutron/cmd/eventlet/__init__.py"></target>).</paragraph>
            <paragraph>Note: an entry point ‘main()’ function may just be an indirection to a real
                callable located elsewhere, as is done for reference services such as DHCP, L3
                and the neutron-server.</paragraph>
            <paragraph>For more info on the rationale behind the code tree setup, see <reference name="the corresponding cross-project spec" refuri="https://review.openstack.org/154642">the
                    corresponding cross-project spec</reference><target ids="the-corresponding-cross-project-spec" names="the\ corresponding\ cross-project\ spec" refuri="https://review.openstack.org/154642"></target>.</paragraph>
        </section>
        <section ids="connecting-to-the-database" names="connecting\ to\ the\ database">
            <title>Connecting to the Database</title>
            <paragraph>Only the neutron-server connects to the neutron database. Agents may never
                connect directly to the database, as this would break the ability to do rolling
                upgrades.</paragraph>
        </section>
        <section ids="configuration-options" names="configuration\ options">
            <title>Configuration Options</title>
            <paragraph>In addition to database access, configuration options are segregated between
                neutron-server and agents. Both services and agents may load the main
                <literal>`neutron.conf`</literal> since this file should contain the oslo.messaging
                configuration for internal Neutron RPCs and may contain host specific
                configuration such as file paths. In addition <literal>`neutron.conf`</literal> contains the
                database, Keystone, and Nova credentials and endpoints strictly for
                neutron-server to use.</paragraph>
            <paragraph>In addition neutron-server may load a plugin specific configuration file, yet
                the agents should not. As the plugin configuration is primarily site wide
                options and the plugin provides the persistence layer for Neutron, agents
                should be instructed to act upon these values via RPC.</paragraph>
            <paragraph>Each individual agent may have its own configuration file. This file should be
                loaded after the main <literal>`neutron.conf`</literal> file, so the agent configuration takes
                precedence. The agent specific configuration may contain configurations which
                vary between hosts in a Neutron deployment such as the external_network_bridge
                for a L3 agent. If any agent requires access to additional external services
                beyond the Neutron RPC, those endpoints should be defined in the agent specific
                configuration file (e.g. nova metadata for metadata agent).</paragraph>
        </section>
    </section>
</document>

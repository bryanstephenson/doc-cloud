<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/neutron/doc/source/contributor/internals/agent_extensions.rst">
    <comment xml:space="preserve">Licensed under the Apache License, Version 2.0 (the "License"); you may
not use this file except in compliance with the License. You may obtain
a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations
under the License.


Convention for heading levels in Neutron devref:
=======  Heading 0 (reserved for the title in a document)
-------  Heading 1
~~~~~~~  Heading 2
+++++++  Heading 3
'''''''  Heading 4
(Avoid deeper levels because they do not render well.)</comment>
    <section ids="agent-extensions" names="agent\ extensions">
        <title>Agent extensions</title>
        <paragraph>All reference agents utilize a common extension mechanism that allows for the
            introduction and enabling of a core resource extension without needing to
            change agent code. This mechanism allows multiple agent extensions to be run by
            a single agent simultaneously.  The mechanism may be especially interesting to
            third parties whose extensions lie outside the neutron tree.</paragraph>
        <paragraph>Under this framework, an agent may expose its API to each of its extensions
            thereby allowing an extension to access resources internal to the agent. At
            layer 2, for instance, upon each port event the agent is then able to trigger a
            handle_port method in its extensions.</paragraph>
        <paragraph>Interactions with the agent API object are in the following order:</paragraph>
        <enumerated_list enumtype="arabic" prefix="" suffix=".">
            <list_item>
                <paragraph>The agent initializes the agent API object.</paragraph>
            </list_item>
            <list_item>
                <paragraph>The agent passes the agent API object into the extension manager.</paragraph>
            </list_item>
            <list_item>
                <paragraph>The manager passes the agent API object into each extension.</paragraph>
            </list_item>
            <list_item>
                <paragraph>An extension calls the new agent API object method to receive, for instance, bridge wrappers with cookies allocated.</paragraph>
            </list_item>
        </enumerated_list>
        <literal_block xml:space="preserve">+-----------+
| Agent API +--------------------------------------------------+
+-----+-----+                                                  |
      |                                   +-----------+        |
      |1                               +--+ Extension +--+     |
      |                                |  +-----------+  |     |
+---+-+-+---+  2  +--------------+  3  |                 |  4  |
|   Agent   +-----+ Ext. manager +-----+--+   ....    +--+-----+
+-----------+     +--------------+     |                 |
                                       |  +-----------+  |
                                       +--+ Extension +--+
                                          +-----------+</literal_block>
        <paragraph>Each extension is referenced through a stevedore entry point defined within a
            specific namespace. For example, L2 extensions are referenced through the
            neutron.agent.l2.extensions namespace.</paragraph>
        <paragraph>The relevant modules are:</paragraph>
        <bullet_list bullet="*">
            <list_item>
                <paragraph>neutron.agent.agent_extension:
                    This module defines an abstract extension interface for all agent
                    extensions across L2 and L3.</paragraph>
            </list_item>
            <list_item>
                <paragraph>neutron.agent.l2.l2_agent_extension:</paragraph>
            </list_item>
            <list_item>
                <paragraph>neutron.agent.l3.l3_agent_extension:
                    These modules subclass
                    neutron.agent.agent_extension.AgentExtension and define a
                    layer-specific abstract extension interface.</paragraph>
            </list_item>
            <list_item>
                <paragraph>neutron.agent.agent_extensions_manager:
                    This module contains a manager that allows extensions to load themselves at
                    runtime.</paragraph>
            </list_item>
            <list_item>
                <paragraph>neutron.agent.l2.l2_agent_extensions_manager:</paragraph>
            </list_item>
            <list_item>
                <paragraph>neutron.agent.l3.l3_agent_extensions_manager:
                    Each of these modules passes core resource events to loaded extensions.</paragraph>
            </list_item>
        </bullet_list>
        <section ids="agent-api-object" names="agent\ api\ object">
            <title>Agent API object</title>
            <paragraph>Every agent can pass an “agent API object” into its extensions in order to
                expose its internals to them in a controlled way. To accommodate different
                agents, each extension may define a consume_api() method that will receive
                this object.</paragraph>
            <paragraph>This agent API object is part of neutron’s public interface for third parties.
                All changes to the interface will be managed in a backwards-compatible way.</paragraph>
            <paragraph>At this time, on the L2 side, only the L2 Open vSwitch agent provides an agent
                API object to extensions. See <reference internal="True" refuri="l2_agent_extensions"><inline classes="doc">L2 agent extensions</inline></reference>.
                For L3, see <reference internal="True" refuri="l3_agent_extensions"><inline classes="doc">L3 agent extensions</inline></reference>.</paragraph>
            <paragraph>The relevant modules are:</paragraph>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>neutron.agent.agent_extension</paragraph>
                </list_item>
                <list_item>
                    <paragraph>neutron.agent.agent_extensions_manager</paragraph>
                </list_item>
                <list_item>
                    <paragraph>neutron.agent.l2.l2_agent_extension_api</paragraph>
                </list_item>
                <list_item>
                    <paragraph>neutron.agent.l2.l2_agent_extensions_manager</paragraph>
                </list_item>
                <list_item>
                    <paragraph>neutron.agent.l3.l3_agent_extension_api</paragraph>
                </list_item>
                <list_item>
                    <paragraph>neutron.agent.l3.l3_agent_extensions_manager</paragraph>
                </list_item>
            </bullet_list>
        </section>
    </section>
</document>

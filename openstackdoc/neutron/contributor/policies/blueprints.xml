<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/neutron/doc/source/contributor/policies/blueprints.rst">
    <section ids="blueprints-and-specs" names="blueprints\ and\ specs">
        <title>Blueprints and Specs</title>
        <paragraph>The Neutron team uses the <reference name="neutron-specs" refuri="http://git.openstack.org/cgit/openstack/neutron-specs">neutron-specs</reference><target ids="neutron-specs" names="neutron-specs" refuri="http://git.openstack.org/cgit/openstack/neutron-specs"></target> repository for its
            specification reviews. Detailed information can be found on the <reference name="wiki" refuri="https://wiki.openstack.org/wiki/Blueprints">wiki</reference><target ids="wiki" names="wiki" refuri="https://wiki.openstack.org/wiki/Blueprints"></target>. Please also find
            additional information in the reviews.rst file.</paragraph>
        <paragraph>The Neutron team does not enforce deadlines for specs. These can be submitted
            throughout the release cycle. The drivers team will review this on a regular
            basis throughout the release, and based on the load for the milestones, will
            assign these into milestones or move them to the backlog for selection into
            a future release.</paragraph>
        <paragraph>Please note that we use a <reference name="template" refuri="http://git.openstack.org/cgit/openstack/neutron-specs/tree/specs/template.rst">template</reference><target ids="template" names="template" refuri="http://git.openstack.org/cgit/openstack/neutron-specs/tree/specs/template.rst"></target>
            for spec submissions. It is not required to fill out all sections in the
            template. Review of the spec may require filling in information left out by
            the submitter.</paragraph>
        <section ids="sub-projects-and-specs" names="sub-projects\ and\ specs">
            <title>Sub-Projects and Specs</title>
            <paragraph>The <reference name="neutron-specs" refuri="http://git.openstack.org/cgit/openstack/neutron-specs">neutron-specs</reference><target dupnames="neutron-specs" ids="id1" refuri="http://git.openstack.org/cgit/openstack/neutron-specs"></target>
                repository is only meant for specs from Neutron itself, and the advanced
                services repositories as well. This includes FWaaS, LBaaS, and VPNaaS. Other
                sub-projects are encouraged to fold their specs into their own devref code
                in their sub-project gerrit repositories. Please see additional comments
                in the Neutron teams <reference internal="True" refuri="neutron-teams#specs-core-reviewer-team"><inline classes="std std-ref">section</inline></reference>
                for reviewer requirements of the neutron-specs repository.</paragraph>
            <target refid="request-for-feature-enhancement"></target>
        </section>
        <section ids="neutron-request-for-feature-enhancements request-for-feature-enhancement" names="neutron\ request\ for\ feature\ enhancements request-for-feature-enhancement">
            <title>Neutron Request for Feature Enhancements</title>
            <paragraph>In Liberty the team introduced the concept of feature requests. Feature
                requests are tracked as Launchpad bugs, tagged with the new ‘rfe’ tag, and
                allow for the submission and review of these feature requests before code
                is submitted.
                This allows the team to verify the validity of a feature request before the
                process of submitting a neutron-spec is undertaken, or code is written.  It
                also allows the community to express interest in a feature by subscribing to
                the bug and posting a comment in Launchpad. The ‘rfe’ tag should not be used
                for work that is already well-defined and has an assignee. If you are intending
                to submit code immediately, a simple bug report will suffice. Note the
                temptation to game the system exists, but given the history in Neutron for this
                type of activity, it will not be tolerated and will be called out as such in
                public on the mailing list.</paragraph>
            <paragraph>RFEs can be submitted by anyone and by having the community vote on them in
                Launchpad, we can gauge interest in features. The drivers team will evaluate
                these on a weekly basis along with the specs. RFEs will be evaluated in the
                current cycle against existing project priorities and available resources.</paragraph>
            <paragraph>The workflow for the life an RFE in Launchpad is as follows:</paragraph>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>The bug is submitted and will by default land in the “New” state.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>As soon as a member of the neutron-drivers team acknowledges the bug, it will
                        be moved into the “Confirmed” state. No assignee, or milestone is set at this
                        time. The importance will be set to ‘Wishlist’ to signal the fact that the
                        report is indeed a feature or enhancement and there is no severity associated
                        to it.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>The bug goes into the “Triaged” state while the discussion is ongoing.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>The neutron-drivers team will evaluate the RFE and may advise the submitter
                        to file a spec in neutron-specs to elaborate on the feature request, in case
                        the RFE requires extra scrutiny, more design discussion, etc.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>The PTL will work with the Lieutenant for the area being identified by the
                        RFE to evaluate resources against the current workload.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>A member of the Neutron release team (or the PTL) will register a matching
                        Launchpad blueprint to be used for milestone tracking purposes, and for
                        identifying the responsible assignee and approver. If the RFE has a spec
                        the blueprint will have a pointer to the spec document, which will become
                        available on <reference name="specs.o.o." refuri="http://specs.openstack.org/openstack/neutron-specs/">specs.o.o.</reference><target ids="specs-o-o" names="specs.o.o." refuri="http://specs.openstack.org/openstack/neutron-specs/"></target>
                        once it is approved and merged. The blueprint will then be linked to the
                        original RFE bug report as a pointer to the discussion that led to the
                        approval of the RFE.
                        The blueprint submitter will also need to identify the following:</paragraph>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph>Priority: there will be only two priorities to choose from, High and Low.
                                It is worth noting that priority is not to be confused with
                                <reference name="importance" refuri="https://wiki.openstack.org/wiki/Bugs#Importance">importance</reference><target ids="importance" names="importance" refuri="https://wiki.openstack.org/wiki/Bugs#Importance"></target>,
                                which is a property of Launchpad Bugs. Priority gives an indication of
                                how promptly a work item should be tackled to allow it to complete. High
                                priority is to be chosen for work items that must make substantial
                                progress in the span of the targeted release, and deal with the
                                following aspects:</paragraph>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>OpenStack cross-project interaction and interoperability issues;</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph>Issues that affect the existing system’s usability;</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph>Stability and testability of the platform;</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph>Risky implementations that may require complex and/or pervasive
                                        changes to API and the logical model;</paragraph>
                                </list_item>
                            </bullet_list>
                            <paragraph>Low priority is to be chosen for everything else. RFEs without an associated
                                blueprint are effectively equivalent to low priority items. Bear in mind that,
                                even though staffing should take priorities into account (i.e. by giving more
                                resources to high priority items over low priority ones), the open source
                                reality is that they can both proceed at their own pace and low priority items
                                can indeed complete faster than high priority ones, even though they are
                                given fewer resources.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>Drafter: who is going to submit and iterate on the spec proposal; he/she
                                may be the RFE submitter.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>Assignee: who is going to develop the bulk of the code, or the
                                go-to contributor, if more people are involved. Typically this is
                                the RFE submitter, but not necessarily.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>Approver: a member of the Neutron team who can commit enough time
                                during the ongoing release cycle to ensure that code posted for review
                                does not languish, and that all aspects of the feature development are
                                taken care of (client, server changes and/or support from other projects
                                if needed - tempest, nova, openstack-infra, devstack, etc.), as well as
                                comprehensive testing.
                                This is typically a core member who has enough experience with what it
                                takes to get code merged, but other resources amongst the wider team can
                                also be identified. Approvers are volunteers who show a specific interest
                                in the blueprint specification, and have enough insight in the area of
                                work so that they can make effective code reviews and provide design
                                feedback. An approver will not work in isolation, as he/she can and will
                                reach out for help to get the job done; however he/she is the main
                                point of contact with the following responsibilities:</paragraph>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>Pair up with the drafter/assignee in order to help skip development
                                        blockers.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph>Review patches associated with the blueprint: approver and assignee
                                        should touch base regularly and ping each other when new code is
                                        available for review, or if review feedback goes unaddressed.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph>Reach out to other reviewers for feedback in areas that may step
                                        out of the zone of her/his confidence.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph>Escalate issues, and raise warnings to the release team/PTL if the
                                        effort shows slow progress. Approver and assignee are key parts to land
                                        a blueprint: should the approver and/or assignee be unable to continue
                                        the commitment during the release cycle, it is the Approver’s
                                        responsibility to reach out the release team/PTL so that replacements
                                        can be identified.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph>Provide a status update during the Neutron IRC meeting, if required.</paragraph>
                                </list_item>
                            </bullet_list>
                            <paragraph>Approver <reference name="assignments" refuri="https://blueprints.launchpad.net/neutron/+assignments">assignments</reference><target ids="assignments" names="assignments" refuri="https://blueprints.launchpad.net/neutron/+assignments"></target>
                                must be carefully identified to ensure that no-one overcommits. A
                                Neutron contributor develops code himself/herself, and if he/she is an
                                approver of more than a couple of blueprints in a single cycle/milestone
                                (depending on the complexity of the spec), it may mean that he/she is
                                clearly oversubscribed.</paragraph>
                        </list_item>
                    </bullet_list>
                    <paragraph>The Neutron team will review the status of blueprints targeted for the
                        milestone during their weekly meeting to ensure a smooth progression of
                        the work planned. Blueprints for which resources cannot be identified
                        will have to be deferred.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>In either case (a spec being required or not), once the discussion has
                        happened and there is positive consensus on the RFE, the report is ‘approved’,
                        and its tag will move from ‘rfe’ to ‘rfe-approved’.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>At this point, the RFE needs resources, and if none are identified for
                        some time the report will be marked incomplete.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>As for setting the milestone (both for RFE bugs or blueprints), the current
                        milestone is always chosen, assuming that work will start as soon as the feature
                        is approved. Work that fails to complete by the defined milestone will roll
                        over automatically until it gets completed or abandoned.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>If the code fails to merge, the bug report may be marked as incomplete,
                        unassigned and untargeted, and it will be garbage collected by
                        the Launchpad Janitor if no-one takes over in time. Renewed interest in the
                        feature will have to go through RFE submission process once again.</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>In summary:</paragraph>
            <table>
                <tgroup cols="2">
                    <colspec colwidth="12"></colspec>
                    <colspec colwidth="77"></colspec>
                    <thead>
                        <row>
                            <entry>
                                <paragraph>State</paragraph>
                            </entry>
                            <entry>
                                <paragraph>Meaning</paragraph>
                            </entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph>New</paragraph>
                            </entry>
                            <entry>
                                <paragraph>This is where all RFE’s start, as filed by the community.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>Incomplete</paragraph>
                            </entry>
                            <entry>
                                <paragraph>Drivers/LTs - Move to this state to mean, “more needed before proceeding”</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>Confirmed</paragraph>
                            </entry>
                            <entry>
                                <paragraph>Drivers/LTs - Move to this state to mean, “yeah, I see that you filed it”</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>Triaged</paragraph>
                            </entry>
                            <entry>
                                <paragraph>Drivers/LTs - Move to this state to mean, “discussion is ongoing”</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>Won’t Fix</paragraph>
                            </entry>
                            <entry>
                                <paragraph>Drivers/LTs - Move to this state to reject an RFE.</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <paragraph>Once the triaging (discussion is complete) and the RFE is approved, the tag goes from ‘rfe’
                to ‘rfe-approved’, and at this point the bug report goes through the usual state transition.
                Note, that the importance will be set to ‘wishlist’, to reflect the fact that the bug report
                is indeed not a bug, but a new feature or enhancement. This will also help have RFEs that are
                not followed up by a blueprint standout in the Launchpad <reference name="milestone dashboards" refuri="https://launchpad.net/neutron/+milestones">milestone dashboards</reference><target ids="milestone-dashboards" names="milestone\ dashboards" refuri="https://launchpad.net/neutron/+milestones"></target>.</paragraph>
            <paragraph>The drivers team will be discussing the following bug reports during their IRC meeting:</paragraph>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph><reference name="New RFE's" refuri="https://bugs.launchpad.net/neutron/+bugs?field.status%3Alist=NEW&amp;field.tag=rfe">New RFE’s</reference><target ids="new-rfe-s" names="new\ rfe's" refuri="https://bugs.launchpad.net/neutron/+bugs?field.status%3Alist=NEW&amp;field.tag=rfe"></target></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="Incomplete RFE's" refuri="https://bugs.launchpad.net/neutron/+bugs?field.status%3Alist=INCOMPLETE&amp;field.tag=rfe">Incomplete RFE’s</reference><target ids="incomplete-rfe-s" names="incomplete\ rfe's" refuri="https://bugs.launchpad.net/neutron/+bugs?field.status%3Alist=INCOMPLETE&amp;field.tag=rfe"></target></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="Confirmed RFE's" refuri="https://bugs.launchpad.net/neutron/+bugs?field.status%3Alist=CONFIRMED&amp;field.tag=rfe">Confirmed RFE’s</reference><target ids="confirmed-rfe-s" names="confirmed\ rfe's" refuri="https://bugs.launchpad.net/neutron/+bugs?field.status%3Alist=CONFIRMED&amp;field.tag=rfe"></target></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="Triaged RFE's" refuri="https://bugs.launchpad.net/neutron/+bugs?field.status%3Alist=TRIAGED&amp;field.tag=rfe">Triaged RFE’s</reference><target ids="triaged-rfe-s" names="triaged\ rfe's" refuri="https://bugs.launchpad.net/neutron/+bugs?field.status%3Alist=TRIAGED&amp;field.tag=rfe"></target></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section ids="rfe-submission-guidelines" names="rfe\ submission\ guidelines">
            <title>RFE Submission Guidelines</title>
            <paragraph>Before we dive into the guidelines for writing a good RFE, it is worth mentioning
                that depending on your level of engagement with the Neutron project and your role
                (user, developer, deployer, operator, etc.), you are more than welcome to have
                a preliminary discussion of a potential RFE by reaching out to other people involved
                in the project. This usually happens by posting mails on the relevant mailing
                lists (e.g. <reference name="openstack-dev" refuri="http://lists.openstack.org">openstack-dev</reference><target ids="openstack-dev" names="openstack-dev" refuri="http://lists.openstack.org"></target> - include [neutron] in
                the subject) or on #openstack-neutron IRC channel on Freenode. If current ongoing
                code reviews are related to your feature, posting comments/questions on gerrit
                may also be a way to engage. Some amount of interaction with Neutron developers
                will give you an idea of the plausibility and form of your RFE before you submit
                it. That said, this is not mandatory.</paragraph>
            <paragraph>When you submit a bug report on <reference refuri="https://bugs.launchpad.net/neutron/+filebug">https://bugs.launchpad.net/neutron/+filebug</reference>,
                there are two fields that must be filled: ‘summary’ and ‘further information’.
                The ‘summary’ must be brief enough to fit in one line: if you can’t describe it
                in a few words it may mean that you are either trying to capture more than one
                RFE at once, or that you are having a hard time defining what you are trying to
                solve at all.</paragraph>
            <paragraph>The ‘further information’ section must be a description of what you would like
                to see implemented in Neutron. The description should provide enough details for
                a knowledgeable developer to understand what is the existing problem in the
                current platform that needs to be addressed, or what is the enhancement that
                would make the platform more capable, both for a functional and a non-functional
                standpoint. To this aim it is important to describe ‘why’ you believe the RFE
                should be accepted, and motivate the reason why without it Neutron is a poorer
                platform. The description should be self contained, and no external references
                should be necessary to further explain the RFE.</paragraph>
            <paragraph>In other words, when you write an RFE you should ask yourself the following
                questions:</paragraph>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>What is that I (specify what user - a user can be a human or another system)
                        cannot do today when interacting with Neutron? On the other hand, is there a
                        Neutron component X that is unable to accomplish something?</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Is there something that you would like Neutron handle better, ie. in a more
                        scalable, or in a more reliable way?</paragraph>
                </list_item>
                <list_item>
                    <paragraph>What is that I would like to see happen after the RFE is accepted and
                        implemented?</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Why do you think it is important?</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>Once you are happy with what you wrote, add ‘rfe’ as tag, and submit. Do not
                worry, we are here to help you get it right! Happy hacking.</paragraph>
        </section>
        <section ids="missing-your-target" names="missing\ your\ target">
            <title>Missing your target</title>
            <paragraph>There are occasions when a spec will be approved and the code will not land in
                the cycle it was targeted at. For these cases, the work flow to get the spec
                into the next release is as follows:</paragraph>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>During the RC window, the PTL will create a directory named ‘&lt;release&gt;’ under
                        the ‘backlog’ directory in the neutron specs repo, and he/she will move all
                        specs that did not make the release to this directory.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Anyone can propose a patch to neutron-specs which moves a spec from the
                        previous release into the new release directory.</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>The specs which are moved in this way can be fast-tracked into the next
                release. Please note that it is required to re-propose the spec for the new
                release.</paragraph>
        </section>
        <section ids="documentation" names="documentation">
            <title>Documentation</title>
            <paragraph>The above process involves two places where any given feature can start to be
                documented - namely in the RFE bug, and in the spec - and in addition to those
                Neutron has a substantial <reference internal="True" refuri="../index"><inline classes="doc">developer reference guide</inline></reference>
                (aka ‘devref’), and user-facing docs such as
                the <reference internal="True" refuri="../../admin/index"><inline classes="doc">networking guide</inline></reference>. So it might be asked:</paragraph>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>What is the relationship between all of those?</paragraph>
                </list_item>
                <list_item>
                    <paragraph>What is the point of devref documentation, if everything has already been
                        described in the spec?</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>The answers have been beautifully expressed in an <reference name="openstack-dev post" refuri="http://lists.openstack.org/pipermail/openstack-dev/2015-December/081458.html">openstack-dev post</reference><target ids="openstack-dev-post" names="openstack-dev\ post" refuri="http://lists.openstack.org/pipermail/openstack-dev/2015-December/081458.html"></target>:</paragraph>
            <enumerated_list enumtype="arabic" prefix="" suffix=".">
                <list_item>
                    <paragraph>RFE: “I want X”</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Spec: “I plan to implement X like this”</paragraph>
                </list_item>
                <list_item>
                    <paragraph>devref: “How X is implemented and how to extend it”</paragraph>
                </list_item>
                <list_item>
                    <paragraph>OS docs: “API and guide for using X”</paragraph>
                </list_item>
            </enumerated_list>
            <paragraph>Once a feature X has been implemented, we shouldn’t have to go to back to its
                RFE bug or spec to find information on it.  The devref may reuse a lot of
                content from the spec, but the spec is not maintained and the implementation
                may differ in some ways from what was intended when the spec was agreed.  The
                devref should be kept current with refactorings, etc., of the implementation.</paragraph>
            <paragraph>Devref content should be added as part of the implementation of a new feature.
                Since the spec is not maintained after the feature is implemented, the devref
                should include a maintained version of the information from the spec.</paragraph>
            <paragraph>If a feature requires OS docs (4), the commit message for the feature patch
                shall include ‘DocImpact’.  If the feature is purely a developer facing thing,
                (4) is not needed.</paragraph>
        </section>
    </section>
</document>

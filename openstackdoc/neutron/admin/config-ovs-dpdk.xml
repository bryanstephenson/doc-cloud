<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/neutron/doc/source/admin/config-ovs-dpdk.rst">
    <target refid="config-ovs-dpdk"></target>
    <section ids="open-vswitch-with-dpdk-datapath config-ovs-dpdk" names="open\ vswitch\ with\ dpdk\ datapath config-ovs-dpdk">
        <title>Open vSwitch with DPDK datapath</title>
        <paragraph>This page serves as a guide for how to use the OVS with DPDK datapath
            functionality available in the Networking service as of the Mitaka release.</paragraph>
        <section ids="the-basics" names="the\ basics">
            <title>The basics</title>
            <paragraph>Open vSwitch (OVS) provides support for a Data Plane Development Kit (DPDK)
                datapath since OVS 2.2, and a DPDK-backed <literal>vhost-user</literal> virtual interface
                since OVS 2.4. The DPDK datapath provides lower latency and higher performance
                than the standard kernel OVS datapath, while DPDK-backed <literal>vhost-user</literal>
                interfaces can connect guests to this datapath. For more information on DPDK,
                refer to the <reference name="DPDK" refuri="http://dpdk.org/">DPDK</reference> website.</paragraph>
            <paragraph>OVS with DPDK, or OVS-DPDK, can be used to provide high-performance networking
                between instances on OpenStack compute nodes.</paragraph>
            <section ids="prerequisites" names="prerequisites">
                <title>Prerequisites</title>
                <paragraph>Using DPDK in OVS requires the following minimum software versions:</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>OVS 2.4</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>DPDK 2.0</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>QEMU 2.1.0</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>libvirt 1.2.13</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>Support of <literal>vhost-user</literal> multiqueue that enables use of multiqueue with
                    <literal>virtio-net</literal> and <literal>igb_uio</literal> is available if the following newer
                    versions are used:</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>OVS 2.5</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>DPDK 2.2</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>QEMU 2.5</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>libvirt 1.2.17</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>In both cases, install and configure Open vSwitch with DPDK support for each
                    node. For more information, see the
                    <reference name="OVS-DPDK" refuri="https://github.com/openvswitch/ovs/blob/master/Documentation/intro/install/dpdk.rst">OVS-DPDK</reference>
                    installation guide (select an appropriate OVS version in the
                    <inline classes="guilabel" rawtext=":guilabel:`Branch`">Branch</inline> drop-down menu).</paragraph>
                <paragraph><reference internal="True" refuri="../contributor/internals/ovs_vhostuser"><inline classes="doc">Neutron Open vSwitch vhost-user support</inline></reference>
                    for configuration of neutron OVS agent.</paragraph>
                <paragraph>In case you wish to configure multiqueue, see the
                    <reference name="OVS configuration chapter on vhost-user" refuri="http://wiki.qemu.org/Documentation/vhost-user-ovs-dpdk#Enabling_multi-queue">OVS configuration chapter on vhost-user</reference>
                    in QEMU documentation.</paragraph>
                <paragraph>The technical background of multiqueue is explained in the corresponding
                    <reference name="blueprint" refuri="https://specs.openstack.org/openstack/nova-specs/specs/liberty/implemented/libvirt-virtiomq.html">blueprint</reference>.</paragraph>
                <paragraph>Additionally, OpenStack supports <literal>vhost-user</literal> reconnect feature starting
                    from the Ocata release, as implementation of fix for
                    <reference name="bug 1604924" refuri="https://bugs.launchpad.net/neutron/+bug/1604924">bug 1604924</reference>.
                    Starting from OpenStack Ocata release this feature is used without any
                    configuration necessary in case the following minimum software versions
                    are used:</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>OVS 2.6</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>DPDK 16.07</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>QEMU 2.7</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>The support of this feature is not yet present in ML2 OVN and ODL
                    mechanism drivers.</paragraph>
            </section>
        </section>
        <section ids="using-vhost-user-interfaces" names="using\ vhost-user\ interfaces">
            <title>Using vhost-user interfaces</title>
            <paragraph>Once OVS and neutron are correctly configured with DPDK support,
                <literal>vhost-user</literal> interfaces are completely transparent to the guest
                (except in case of multiqueue configuration described below).
                However, guests must request huge pages. This can be done through flavors.
                For example:</paragraph>
            <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ openstack flavor set m1.large --property hw:mem_page_size=large</literal_block>
            <paragraph>For more information about the syntax for <literal>hw:mem_page_size</literal>, refer to the
                <reference name="Flavors" refuri="https://docs.openstack.org/admin-guide/compute-flavors.html">Flavors</reference> guide.</paragraph>
            <note>
                <paragraph><literal>vhost-user</literal> requires file descriptor-backed shared memory. Currently, the
                    only way to request this is by requesting large pages. This is why instances
                    spawned on hosts with OVS-DPDK must request large pages. The aggregate
                    flavor affinity filter can be used to associate flavors with large page
                    support to hosts with OVS-DPDK support.</paragraph>
            </note>
            <paragraph>Create and add <literal>vhost-user</literal> network interfaces to instances in the same
                fashion as conventional interfaces. These interfaces can use the kernel
                <literal>virtio-net</literal> driver or a DPDK-compatible driver in the guest</paragraph>
            <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ openstack server create --nic net-id=$net_id ... testserver</literal_block>
        </section>
        <section ids="using-vhost-user-multiqueue" names="using\ vhost-user\ multiqueue">
            <title>Using vhost-user multiqueue</title>
            <paragraph>To use this feature, the following should be set in the flavor extra specs
                (flavor keys):</paragraph>
            <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ openstack flavor set $m1.large --property hw:vif_multiqueue_enabled=true</literal_block>
            <paragraph>This setting can be overridden by the image metadata property if the feature
                is enabled in the extra specs:</paragraph>
            <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ openstack image set --property hw_vif_mutliqueue_enabled=true IMAGE_NAME</literal_block>
            <paragraph>Support of <literal>virtio-net</literal> multiqueue needs to be present in kernel of
                guest VM and is available starting from Linux kernel 3.8.</paragraph>
            <paragraph>Check pre-set maximum for number of combined channels in channel
                configuration.
                Configuration of OVS and flavor done successfully should result in
                maximum being more than ‘1’):</paragraph>
            <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ ethtool -l INTERFACE_NAME</literal_block>
            <paragraph>To increase number of current combined channels run following command in
                guest VM:</paragraph>
            <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ ethtool -L INTERFACE_NAME combined QUEUES_NR</literal_block>
            <paragraph>The number of queues should typically match the number of vCPUs
                defined for the instance. In newer kernel versions
                this is configured automatically.</paragraph>
        </section>
        <section ids="known-limitations" names="known\ limitations">
            <title>Known limitations</title>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>This feature is only supported when using the libvirt compute driver, and the
                        KVM/QEMU hypervisor.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Huge pages are required for each instance running on hosts with OVS-DPDK.
                        If huge pages are not present in the guest, the interface will appear but
                        will not function.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Expect performance degradation of services using tap devices: these devices
                        do not support DPDK. Example services include DVR, FWaaS, or LBaaS.</paragraph>
                </list_item>
            </bullet_list>
        </section>
    </section>
</document>

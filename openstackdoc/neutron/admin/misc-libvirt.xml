<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/neutron/doc/source/admin/misc-libvirt.rst">
    <target refid="misc-disable-libvirt-networking"></target>
    <section ids="disable-libvirt-networking misc-disable-libvirt-networking" names="disable\ libvirt\ networking misc-disable-libvirt-networking">
        <title>Disable libvirt networking</title>
        <paragraph>Most OpenStack deployments use the <reference name="libvirt" refuri="https://libvirt.org">libvirt</reference>
            toolkit for interacting with the
            hypervisor. Specifically, OpenStack Compute uses libvirt for tasks such as
            booting and terminating virtual machine instances. When OpenStack Compute boots
            a new instance, libvirt provides OpenStack with the VIF associated with the
            instance, and OpenStack Compute plugs the VIF into a virtual device provided by
            OpenStack Network. The libvirt toolkit itself does not provide any networking
            functionality in OpenStack deployments.</paragraph>
        <paragraph>However, libvirt is capable of providing networking services to the virtual
            machines that it manages. In particular, libvirt can be configured to provide
            networking functionality akin to a simplified, single-node version of
            OpenStack. Users can use libvirt to create layer 2 networks that are similar to
            OpenStack Networking’s networks, confined to a single node.</paragraph>
        <section ids="libvirt-network-implementation" names="libvirt\ network\ implementation">
            <title>libvirt network implementation</title>
            <paragraph>By default, libvirt’s networking functionality is enabled, and libvirt
                creates a network when the system boots. To implement this network,
                libvirt leverages some of the same technologies that OpenStack Network
                does. In particular, libvirt uses:</paragraph>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>Linux bridging for implementing a layer 2 network</paragraph>
                </list_item>
                <list_item>
                    <paragraph>dnsmasq for providing IP addresses to virtual machines using DHCP</paragraph>
                </list_item>
                <list_item>
                    <paragraph>iptables to implement SNAT so instances can connect out to the public
                        internet, and to ensure that virtual machines are permitted to communicate
                        with dnsmasq using DHCP</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>By default, libvirt creates a network named <emphasis>default</emphasis>. The details of this
                network may vary by distribution; on Ubuntu this network involves:</paragraph>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>a Linux bridge named <literal>virbr0</literal> with an IP address of <literal>192.0.2.1/24</literal></paragraph>
                </list_item>
                <list_item>
                    <paragraph>a dnsmasq process that listens on the <literal>virbr0</literal> interface and hands out IP
                        addresses in the range <literal>192.0.2.2-192.0.2.254</literal></paragraph>
                </list_item>
                <list_item>
                    <paragraph>a set of iptables rules</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>When libvirt boots a virtual machine, it places the machine’s VIF in the bridge
                <literal>virbr0</literal> unless explicitly told not to.</paragraph>
            <paragraph>On Ubuntu, the iptables ruleset that libvirt creates includes the following
                rules:</paragraph>
            <literal_block xml:space="preserve">*nat
-A POSTROUTING -s 192.0.2.0/24 -d 224.0.0.0/24 -j RETURN
-A POSTROUTING -s 192.0.2.0/24 -d 255.255.255.255/32 -j RETURN
-A POSTROUTING -s 192.0.2.0/24 ! -d 192.0.2.0/24 -p tcp -j MASQUERADE --to-ports 1024-65535
-A POSTROUTING -s 192.0.2.0/24 ! -d 192.0.2.0/24 -p udp -j MASQUERADE --to-ports 1024-65535
-A POSTROUTING -s 192.0.2.0/24 ! -d 192.0.2.0/24 -j MASQUERADE
*mangle
-A POSTROUTING -o virbr0 -p udp -m udp --dport 68 -j CHECKSUM --checksum-fill
*filter
-A INPUT -i virbr0 -p udp -m udp --dport 53 -j ACCEPT
-A INPUT -i virbr0 -p tcp -m tcp --dport 53 -j ACCEPT
-A INPUT -i virbr0 -p udp -m udp --dport 67 -j ACCEPT
-A INPUT -i virbr0 -p tcp -m tcp --dport 67 -j ACCEPT
-A FORWARD -d 192.0.2.0/24 -o virbr0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
-A FORWARD -s 192.0.2.0/24 -i virbr0 -j ACCEPT
-A FORWARD -i virbr0 -o virbr0 -j ACCEPT
-A FORWARD -o virbr0 -j REJECT --reject-with icmp-port-unreachable
-A FORWARD -i virbr0 -j REJECT --reject-with icmp-port-unreachable
-A OUTPUT -o virbr0 -p udp -m udp --dport 68 -j ACCEPT</literal_block>
            <paragraph>The following shows the dnsmasq process that libvirt manages as it appears in
                the output of <literal_strong classes="command">ps</literal_strong>:</paragraph>
            <literal_block xml:space="preserve">2881 ?        S      0:00 /usr/sbin/dnsmasq --conf-file=/var/lib/libvirt/dnsmasq/default.conf</literal_block>
        </section>
        <section ids="how-to-disable-libvirt-networks" names="how\ to\ disable\ libvirt\ networks">
            <title>How to disable libvirt networks</title>
            <paragraph>Although OpenStack does not make use of libvirt’s networking, this
                networking will not interfere with OpenStack’s behavior, and can be
                safely left enabled. However, libvirt’s networking can be a nuisance
                when debugging OpenStack networking issues. Because libvirt creates an
                additional bridge, dnsmasq process, and iptables ruleset, these may
                distract an operator engaged in network troubleshooting.
                Unless you need to start up virtual machines using libvirt directly, you can
                safely disable libvirt’s network.</paragraph>
            <paragraph>To view the defined libvirt networks and their state:</paragraph>
            <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve"># virsh net-list
 Name                 State      Autostart     Persistent
----------------------------------------------------------
 default              active     yes           yes</literal_block>
            <paragraph>To deactivate the libvirt network named <literal>default</literal>:</paragraph>
            <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve"># virsh net-destroy default</literal_block>
            <paragraph>Deactivating the network will remove the <literal>virbr0</literal> bridge, terminate
                the dnsmasq process, and remove the iptables rules.</paragraph>
            <paragraph>To prevent the network from automatically starting on boot:</paragraph>
            <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve"># virsh net-autostart --network default --disable</literal_block>
            <paragraph>To activate the network after it has been deactivated:</paragraph>
            <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve"># virsh net-start default</literal_block>
        </section>
    </section>
</document>

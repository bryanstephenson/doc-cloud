<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/neutron/doc/source/admin/deploy-lb-selfservice.rst">
    <target refid="deploy-lb-selfservice"></target>
    <section ids="linux-bridge-self-service-networks deploy-lb-selfservice" names="linux\ bridge:\ self-service\ networks deploy-lb-selfservice">
        <title>Linux bridge: Self-service networks</title>
        <paragraph>This architecture example augments <reference internal="True" refuri="deploy-lb-provider#deploy-lb-provider"><inline classes="std std-ref">Linux bridge: Provider networks</inline></reference> to support
            a nearly limitless quantity of entirely virtual networks. Although the
            Networking service supports VLAN self-service networks, this example
            focuses on VXLAN self-service networks. For more information on
            self-service networks, see <reference internal="True" refuri="intro-os-networking#intro-os-networking-selfservice"><inline classes="std std-ref">Self-service networks</inline></reference>.</paragraph>
        <note>
            <paragraph>The Linux bridge agent lacks support for other overlay protocols such
                as GRE and Geneve.</paragraph>
        </note>
        <section ids="prerequisites" names="prerequisites">
            <title>Prerequisites</title>
            <paragraph>Add one network node with the following components:</paragraph>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>Three network interfaces: management, provider, and overlay.</paragraph>
                </list_item>
                <list_item>
                    <definition_list>
                        <definition_list_item>
                            <term>OpenStack Networking Linux bridge layer-2 agent, layer-3 agent, and any</term>
                            <definition>
                                <paragraph>dependencies.</paragraph>
                            </definition>
                        </definition_list_item>
                    </definition_list>
                </list_item>
            </bullet_list>
            <paragraph>Modify the compute nodes with the following components:</paragraph>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>Add one network interface: overlay.</paragraph>
                </list_item>
            </bullet_list>
            <note>
                <paragraph>You can keep the DHCP and metadata agents on each compute node or
                    move them to the network node.</paragraph>
            </note>
        </section>
        <section ids="architecture" names="architecture">
            <title>Architecture</title>
            <image alt="Self-service networks using Linux bridge - overview" candidates="{'*': 'admin/figures/deploy-lb-selfservice-overview.png'}" uri="admin/figures/deploy-lb-selfservice-overview.png"></image>
            <paragraph>The following figure shows components and connectivity for one self-service
                network and one untagged (flat) provider network. In this particular case, the
                instance resides on the same compute node as the DHCP agent for the network.
                If the DHCP agent resides on another compute node, the latter only contains
                a DHCP namespace and Linux bridge with a port on the overlay physical network
                interface.</paragraph>
            <image alt="Self-service networks using Linux bridge - components and connectivity - one network" candidates="{'*': 'admin/figures/deploy-lb-selfservice-compconn1.png'}" uri="admin/figures/deploy-lb-selfservice-compconn1.png"></image>
        </section>
        <section ids="example-configuration" names="example\ configuration">
            <title>Example configuration</title>
            <paragraph>Use the following example configuration as a template to add support for
                self-service networks to an existing operational environment that supports
                provider networks.</paragraph>
            <section ids="controller-node" names="controller\ node">
                <title>Controller node</title>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>In the <literal>neutron.conf</literal> file:</paragraph>
                        <bullet_list bullet="*">
                            <list_item>
                                <paragraph>Enable routing and allow overlapping IP address ranges.</paragraph>
                                <literal_block highlight_args="{}" language="ini" linenos="False" xml:space="preserve">[DEFAULT]
service_plugins = router
allow_overlapping_ips = True</literal_block>
                            </list_item>
                        </bullet_list>
                    </list_item>
                    <list_item>
                        <paragraph>In the <literal>ml2_conf.ini</literal> file:</paragraph>
                        <bullet_list bullet="*">
                            <list_item>
                                <paragraph>Add <literal>vxlan</literal> to type drivers and project network types.</paragraph>
                                <literal_block highlight_args="{}" language="ini" linenos="False" xml:space="preserve">[ml2]
type_drivers = flat,vlan,vxlan
tenant_network_types = vxlan</literal_block>
                            </list_item>
                            <list_item>
                                <paragraph>Enable the layer-2 population mechanism driver.</paragraph>
                                <literal_block highlight_args="{}" language="ini" linenos="False" xml:space="preserve">[ml2]
mechanism_drivers = linuxbridge,l2population</literal_block>
                            </list_item>
                            <list_item>
                                <paragraph>Configure the VXLAN network ID (VNI) range.</paragraph>
                                <literal_block highlight_args="{}" language="ini" linenos="False" xml:space="preserve">[ml2_type_vxlan]
vni_ranges = VNI_START:VNI_END</literal_block>
                                <paragraph>Replace <literal>VNI_START</literal> and <literal>VNI_END</literal> with appropriate numerical
                                    values.</paragraph>
                            </list_item>
                        </bullet_list>
                    </list_item>
                    <list_item>
                        <paragraph>Restart the following services:</paragraph>
                        <bullet_list bullet="*">
                            <list_item>
                                <paragraph>Server</paragraph>
                            </list_item>
                        </bullet_list>
                    </list_item>
                </enumerated_list>
            </section>
            <section ids="network-node" names="network\ node">
                <title>Network node</title>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>Install the Networking service layer-3 agent.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>In the <literal>neutron.conf</literal> file, configure common options:</paragraph>
                        <literal_block highlight_args="{}" language="ini" linenos="False" xml:space="preserve">[DEFAULT]
core_plugin = ml2
auth_strategy = keystone

[database]
# ...

[keystone_authtoken]
# ...

[nova]
# ...

[agent]
# ...</literal_block>
                        <paragraph>See the <reference name="Installation Tutorials and Guides" refuri="https://docs.openstack.org">Installation Tutorials and Guides</reference><target ids="installation-tutorials-and-guides" names="installation\ tutorials\ and\ guides" refuri="https://docs.openstack.org"></target> and
                            <reference name="Configuration Reference" refuri="https://docs.openstack.org">Configuration Reference</reference><target ids="configuration-reference" names="configuration\ reference" refuri="https://docs.openstack.org"></target> for your OpenStack
                            release to obtain the appropriate additional configuration for the
                            <literal>[DEFAULT]</literal>, <literal>[database]</literal>, <literal>[keystone_authtoken]</literal>, <literal>[nova]</literal>, and
                            <literal>[agent]</literal> sections.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>In the <literal>linuxbridge_agent.ini</literal> file, configure the layer-2 agent.</paragraph>
                        <literal_block highlight_args="{}" language="ini" linenos="False" xml:space="preserve">[linux_bridge]
physical_interface_mappings = provider:PROVIDER_INTERFACE

[vxlan]
enable_vxlan = True
l2_population = True
local_ip = OVERLAY_INTERFACE_IP_ADDRESS

[securitygroup]
firewall_driver = iptables</literal_block>
                        <paragraph>Replace <literal>PROVIDER_INTERFACE</literal> with the name of the underlying interface
                            that handles provider networks. For example, <literal>eth1</literal>.</paragraph>
                        <paragraph>Replace <literal>OVERLAY_INTERFACE_IP_ADDRESS</literal> with the IP address of the
                            interface that handles VXLAN overlays for self-service networks.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>In the <literal>l3_agent.ini</literal> file, configure the layer-3 agent.</paragraph>
                        <literal_block highlight_args="{}" language="ini" linenos="False" xml:space="preserve">[DEFAULT]
interface_driver = linuxbridge
external_network_bridge =</literal_block>
                        <note>
                            <paragraph>The <literal>external_network_bridge</literal> option intentionally contains
                                no value.</paragraph>
                        </note>
                    </list_item>
                    <list_item>
                        <paragraph>Start the following services:</paragraph>
                        <bullet_list bullet="*">
                            <list_item>
                                <paragraph>Linux bridge agent</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>Layer-3 agent</paragraph>
                            </list_item>
                        </bullet_list>
                    </list_item>
                </enumerated_list>
            </section>
            <section ids="compute-nodes" names="compute\ nodes">
                <title>Compute nodes</title>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>In the <literal>linuxbridge_agent.ini</literal> file, enable VXLAN support including
                            layer-2 population.</paragraph>
                        <literal_block highlight_args="{}" language="ini" linenos="False" xml:space="preserve">[vxlan]
enable_vxlan = True
l2_population = True
local_ip = OVERLAY_INTERFACE_IP_ADDRESS</literal_block>
                        <paragraph>Replace <literal>OVERLAY_INTERFACE_IP_ADDRESS</literal> with the IP address of the
                            interface that handles VXLAN overlays for self-service networks.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Restart the following services:</paragraph>
                        <bullet_list bullet="*">
                            <list_item>
                                <paragraph>Linux bridge agent</paragraph>
                            </list_item>
                        </bullet_list>
                    </list_item>
                </enumerated_list>
            </section>
            <section ids="verify-service-operation" names="verify\ service\ operation">
                <title>Verify service operation</title>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>Source the administrative project credentials.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Verify presence and operation of the agents.</paragraph>
                        <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ openstack network agent list
+--------------------------------------+--------------------+----------+-------------------+-------+-------+---------------------------+
| ID                                   | Agent Type         | Host     | Availability Zone | Alive | State | Binary                    |
+--------------------------------------+--------------------+----------+-------------------+-------+-------+---------------------------+
| 09de6af6-c5f1-4548-8b09-18801f068c57 | Linux bridge agent | compute2 |                   | True  | UP    | neutron-linuxbridge-agent |
| 188945d1-9e70-4803-a276-df924e0788a4 | Linux bridge agent | compute1 |                   | True  | UP    | neutron-linuxbridge-agent |
| e76c440d-d5f6-4316-a674-d689630b629e | DHCP agent         | compute1 | nova              | True  | UP    | neutron-dhcp-agent        |
| e67367de-6657-11e6-86a4-931cd04404bb | DHCP agent         | compute2 | nova              | True  | UP    | neutron-dhcp-agent        |
| e8174cae-6657-11e6-89f0-534ac6d0cb5c | Metadata agent     | compute1 |                   | True  | UP    | neutron-metadata-agent    |
| ece49ec6-6657-11e6-bafb-c7560f19197d | Metadata agent     | compute2 |                   | True  | UP    | neutron-metadata-agent    |
| 598f6357-4331-4da5-a420-0f5be000bec9 | L3 agent           | network1 | nova              | True  | UP    | neutron-l3-agent          |
| f4734e0f-bcd5-4922-a19d-e31d56b0a7ae | Linux bridge agent | network1 |                   | True  | UP    | neutron-linuxbridge-agent |
+--------------------------------------+--------------------+----------+-------------------+-------+-------+---------------------------+</literal_block>
                    </list_item>
                </enumerated_list>
            </section>
            <section ids="create-initial-networks" names="create\ initial\ networks">
                <title>Create initial networks</title>
                <paragraph>The configuration supports multiple VXLAN self-service networks. For
                    simplicity, the following procedure creates one self-service network and
                    a router with a gateway on the flat provider network. The router uses
                    NAT for IPv4 network traffic and directly routes IPv6 network traffic.</paragraph>
                <note>
                    <paragraph>IPv6 connectivity with self-service networks often requires addition of
                        static routes to nodes and physical network infrastructure.</paragraph>
                </note>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>Source the administrative project credentials.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Update the provider network to support external connectivity for
                            self-service networks.</paragraph>
                        <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ openstack network set --external provider1</literal_block>
                        <note>
                            <paragraph>This command provides no output.</paragraph>
                        </note>
                    </list_item>
                    <list_item>
                        <paragraph>Source a regular (non-administrative) project credentials.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Create a self-service network.</paragraph>
                        <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ openstack network create selfservice1
+-------------------------+--------------+
| Field                   | Value        |
+-------------------------+--------------+
| admin_state_up          | UP           |
| mtu                     | 1450         |
| name                    | selfservice1 |
| port_security_enabled   | True         |
| router:external         | Internal     |
| shared                  | False        |
| status                  | ACTIVE       |
+-------------------------+--------------+</literal_block>
                    </list_item>
                    <list_item>
                        <paragraph>Create a IPv4 subnet on the self-service network.</paragraph>
                        <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ openstack subnet create --subnet-range 192.0.2.0/24 \
  --network selfservice1 --dns-nameserver 8.8.4.4 selfservice1-v4
+-------------------+---------------------------+
| Field             | Value                     |
+-------------------+---------------------------+
| allocation_pools  | 192.0.2.2-192.0.2.254     |
| cidr              | 192.0.2.0/24              |
| dns_nameservers   | 8.8.4.4                   |
| enable_dhcp       | True                      |
| gateway_ip        | 192.0.2.1                 |
| ip_version        | 4                         |
| name              | selfservice1-v4           |
+-------------------+---------------------------+</literal_block>
                    </list_item>
                    <list_item>
                        <paragraph>Create a IPv6 subnet on the self-service network.</paragraph>
                        <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ openstack subnet create --subnet-range fd00:192:0:2::/64 --ip-version 6 \
  --ipv6-ra-mode slaac --ipv6-address-mode slaac --network selfservice1 \
  --dns-nameserver 2001:4860:4860::8844 selfservice1-v6
+-------------------+------------------------------------------------------+
| Field             | Value                                                |
+-------------------+------------------------------------------------------+
| allocation_pools  | fd00:192:0:2::2-fd00:192:0:2:ffff:ffff:ffff:ffff     |
| cidr              | fd00:192:0:2::/64                                    |
| dns_nameservers   | 2001:4860:4860::8844                                 |
| enable_dhcp       | True                                                 |
| gateway_ip        | fd00:192:0:2::1                                      |
| ip_version        | 6                                                    |
| ipv6_address_mode | slaac                                                |
| ipv6_ra_mode      | slaac                                                |
| name              | selfservice1-v6                                      |
+-------------------+------------------------------------------------------+</literal_block>
                    </list_item>
                    <list_item>
                        <paragraph>Create a router.</paragraph>
                        <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ openstack router create router1
+-----------------------+---------+
| Field                 | Value   |
+-----------------------+---------+
| admin_state_up        | UP      |
| name                  | router1 |
| status                | ACTIVE  |
+-----------------------+---------+</literal_block>
                    </list_item>
                    <list_item>
                        <paragraph>Add the IPv4 and IPv6 subnets as interfaces on the router.</paragraph>
                        <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ openstack router add subnet router1 selfservice1-v4
$ openstack router add subnet router1 selfservice1-v6</literal_block>
                        <note>
                            <paragraph>These commands provide no output.</paragraph>
                        </note>
                    </list_item>
                    <list_item>
                        <paragraph>Add the provider network as the gateway on the router.</paragraph>
                        <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ neutron router-gateway-set router1 provider1
Set gateway for router router1</literal_block>
                    </list_item>
                </enumerated_list>
            </section>
            <section ids="verify-network-operation" names="verify\ network\ operation">
                <title>Verify network operation</title>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>On each compute node, verify creation of a second <literal>qdhcp</literal> namespace.</paragraph>
                        <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve"># ip netns
qdhcp-8b868082-e312-4110-8627-298109d4401c
qdhcp-8fbc13ca-cfe0-4b8a-993b-e33f37ba66d1</literal_block>
                    </list_item>
                    <list_item>
                        <paragraph>On the network node, verify creation of the <literal>qrouter</literal> namespace.</paragraph>
                        <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve"># ip netns
qrouter-17db2a15-e024-46d0-9250-4cd4d336a2cc</literal_block>
                    </list_item>
                    <list_item>
                        <paragraph>Source a regular (non-administrative) project credentials.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Create the appropriate security group rules to allow <literal>ping</literal> and SSH
                            access instances using the network.</paragraph>
                        <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ openstack security group rule create --proto icmp default
+------------------+-----------+
| Field            | Value     |
+------------------+-----------+
| direction        | ingress   |
| ethertype        | IPv4      |
| protocol         | icmp      |
| remote_ip_prefix | 0.0.0.0/0 |
+------------------+-----------+

$ openstack security group rule create --ethertype IPv6 --proto ipv6-icmp default
+-----------+-----------+
| Field     | Value     |
+-----------+-----------+
| direction | ingress   |
| ethertype | IPv6      |
| protocol  | ipv6-icmp |
+-----------+-----------+

$ openstack security group rule create --proto tcp --dst-port 22 default
+------------------+-----------+
| Field            | Value     |
+------------------+-----------+
| direction        | ingress   |
| ethertype        | IPv4      |
| port_range_max   | 22        |
| port_range_min   | 22        |
| protocol         | tcp       |
| remote_ip_prefix | 0.0.0.0/0 |
+------------------+-----------+

$ openstack security group rule create --ethertype IPv6 --proto tcp --dst-port 22 default
+------------------+-----------+
| Field            | Value     |
+------------------+-----------+
| direction        | ingress   |
| ethertype        | IPv6      |
| port_range_max   | 22        |
| port_range_min   | 22        |
| protocol         | tcp       |
+------------------+-----------+</literal_block>
                    </list_item>
                    <list_item>
                        <paragraph>Launch an instance with an interface on the self-service network. For
                            example, a CirrOS image using flavor ID 1.</paragraph>
                        <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ openstack server create --flavor 1 --image cirros --nic net-id=NETWORK_ID selfservice-instance1</literal_block>
                        <paragraph>Replace <literal>NETWORK_ID</literal> with the ID of the self-service network.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Determine the IPv4 and IPv6 addresses of the instance.</paragraph>
                        <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ openstack server list
+--------------------------------------+-----------------------+--------+--------------------------------------------------------------+
| ID                                   | Name                  | Status | Networks                                                     |
+--------------------------------------+-----------------------+--------+--------------------------------------------------------------+
| c055cdb0-ebb4-4d65-957c-35cbdbd59306 | selfservice-instance1 | ACTIVE | selfservice1=192.0.2.4, fd00:192:0:2:f816:3eff:fe30:9cb0     |
+--------------------------------------+-----------------------+--------+--------------------------------------------------------------+</literal_block>
                        <warning>
                            <paragraph>The IPv4 address resides in a private IP address range (RFC1918). Thus,
                                the Networking service performs source network address translation (SNAT)
                                for the instance to access external networks such as the Internet. Access
                                from external networks such as the Internet to the instance requires a
                                floating IPv4 address. The Networking service performs destination
                                network address translation (DNAT) from the floating IPv4 address to the
                                instance IPv4 address on the self-service network. On the other hand,
                                the Networking service architecture for IPv6 lacks support for NAT due
                                to the significantly larger address space and complexity of NAT. Thus,
                                floating IP addresses do not exist for IPv6 and the Networking service
                                only performs routing for IPv6 subnets on self-service networks. In
                                other words, you cannot rely on NAT to “hide” instances with IPv4 and
                                IPv6 addresses or only IPv6 addresses and must properly implement
                                security groups to restrict access.</paragraph>
                        </warning>
                    </list_item>
                    <list_item>
                        <paragraph>On the controller node or any host with access to the provider network,
                            <literal>ping</literal> the IPv6 address of the instance.</paragraph>
                        <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ ping6 -c 4 fd00:192:0:2:f816:3eff:fe30:9cb0
PING fd00:192:0:2:f816:3eff:fe30:9cb0(fd00:192:0:2:f816:3eff:fe30:9cb0) 56 data bytes
64 bytes from fd00:192:0:2:f816:3eff:fe30:9cb0: icmp_seq=1 ttl=63 time=2.08 ms
64 bytes from fd00:192:0:2:f816:3eff:fe30:9cb0: icmp_seq=2 ttl=63 time=1.88 ms
64 bytes from fd00:192:0:2:f816:3eff:fe30:9cb0: icmp_seq=3 ttl=63 time=1.55 ms
64 bytes from fd00:192:0:2:f816:3eff:fe30:9cb0: icmp_seq=4 ttl=63 time=1.62 ms

--- fd00:192:0:2:f816:3eff:fe30:9cb0 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3004ms
rtt min/avg/max/mdev = 1.557/1.788/2.085/0.217 ms</literal_block>
                    </list_item>
                    <list_item>
                        <paragraph>Optionally, enable IPv4 access from external networks such as the
                            Internet to the instance.</paragraph>
                        <enumerated_list enumtype="arabic" prefix="" suffix=".">
                            <list_item>
                                <paragraph>Create a floating IPv4 address on the provider network.</paragraph>
                                <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ openstack floating ip create provider1
+-------------+--------------------------------------+
| Field       | Value                                |
+-------------+--------------------------------------+
| fixed_ip    | None                                 |
| id          | 22a1b088-5c9b-43b4-97f3-970ce5df77f2 |
| instance_id | None                                 |
| ip          | 203.0.113.16                         |
| pool        | provider1                            |
+-------------+--------------------------------------+</literal_block>
                            </list_item>
                            <list_item>
                                <paragraph>Associate the floating IPv4 address with the instance.</paragraph>
                                <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ openstack server add floating ip selfservice-instance1 203.0.113.16</literal_block>
                                <note>
                                    <paragraph>This command provides no output.</paragraph>
                                </note>
                            </list_item>
                            <list_item>
                                <paragraph>On the controller node or any host with access to the provider network,
                                    <literal>ping</literal> the floating IPv4 address of the instance.</paragraph>
                                <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ ping -c 4 203.0.113.16
PING 203.0.113.16 (203.0.113.16) 56(84) bytes of data.
64 bytes from 203.0.113.16: icmp_seq=1 ttl=63 time=3.41 ms
64 bytes from 203.0.113.16: icmp_seq=2 ttl=63 time=1.67 ms
64 bytes from 203.0.113.16: icmp_seq=3 ttl=63 time=1.47 ms
64 bytes from 203.0.113.16: icmp_seq=4 ttl=63 time=1.59 ms

--- 203.0.113.16 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3005ms
rtt min/avg/max/mdev = 1.473/2.040/3.414/0.798 ms</literal_block>
                            </list_item>
                        </enumerated_list>
                    </list_item>
                    <list_item>
                        <paragraph>Obtain access to the instance.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Test IPv4 and IPv6 connectivity to the Internet or other external network.</paragraph>
                    </list_item>
                </enumerated_list>
                <target refid="deploy-lb-selfservice-networktrafficflow"></target>
            </section>
        </section>
        <section ids="network-traffic-flow deploy-lb-selfservice-networktrafficflow" names="network\ traffic\ flow deploy-lb-selfservice-networktrafficflow">
            <title>Network traffic flow</title>
            <paragraph>The following sections describe the flow of network traffic in several
                common scenarios. <emphasis>North-south</emphasis> network traffic travels between an instance
                and external network such as the Internet. <emphasis>East-west</emphasis> network traffic
                travels between instances on the same or different networks. In all scenarios,
                the physical network infrastructure handles switching and routing among
                provider networks and external networks such as the Internet. Each case
                references one or more of the following components:</paragraph>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>Provider network (VLAN)</paragraph>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph>VLAN ID 101 (tagged)</paragraph>
                        </list_item>
                    </bullet_list>
                </list_item>
                <list_item>
                    <paragraph>Self-service network 1 (VXLAN)</paragraph>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph>VXLAN ID (VNI) 101</paragraph>
                        </list_item>
                    </bullet_list>
                </list_item>
                <list_item>
                    <paragraph>Self-service network 2 (VXLAN)</paragraph>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph>VXLAN ID (VNI) 102</paragraph>
                        </list_item>
                    </bullet_list>
                </list_item>
                <list_item>
                    <paragraph>Self-service router</paragraph>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph>Gateway on the provider network</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>Interface on self-service network 1</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>Interface on self-service network 2</paragraph>
                        </list_item>
                    </bullet_list>
                </list_item>
                <list_item>
                    <paragraph>Instance 1</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Instance 2</paragraph>
                </list_item>
            </bullet_list>
            <section ids="north-south-scenario-1-instance-with-a-fixed-ip-address" names="north-south\ scenario\ 1:\ instance\ with\ a\ fixed\ ip\ address">
                <title>North-south scenario 1: Instance with a fixed IP address</title>
                <paragraph>For instances with a fixed IPv4 address, the network node performs SNAT
                    on north-south traffic passing from self-service to external networks
                    such as the Internet. For instances with a fixed IPv6 address, the network
                    node performs conventional routing of traffic between self-service and
                    external networks.</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>The instance resides on compute node 1 and uses self-service network 1.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The instance sends a packet to a host on the Internet.</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>The following steps involve compute node 1:</paragraph>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>The instance interface (1) forwards the packet to the self-service
                            bridge instance port (2) via <literal>veth</literal> pair.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Security group rules (3) on the self-service bridge handle
                            firewalling and connection tracking for the packet.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The self-service bridge forwards the packet to the VXLAN interface (4)
                            which wraps the packet using VNI 101.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The underlying physical interface (5) for the VXLAN interface forwards
                            the packet to the network node via the overlay network (6).</paragraph>
                    </list_item>
                </enumerated_list>
                <paragraph>The following steps involve the network node:</paragraph>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>The underlying physical interface (7) for the VXLAN interface forwards
                            the packet to the VXLAN interface (8) which unwraps the packet.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The self-service bridge router port (9) forwards the packet to the
                            self-service network interface (10) in the router namespace.</paragraph>
                        <bullet_list bullet="*">
                            <list_item>
                                <paragraph>For IPv4, the router performs SNAT on the packet which changes the
                                    source IP address to the router IP address on the provider network
                                    and sends it to the gateway IP address on the provider network via
                                    the gateway interface on the provider network (11).</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>For IPv6, the router sends the packet to the next-hop IP address,
                                    typically the gateway IP address on the provider network, via the
                                    provider gateway interface (11).</paragraph>
                            </list_item>
                        </bullet_list>
                    </list_item>
                    <list_item>
                        <paragraph>The router forwards the packet to the provider bridge router
                            port (12).</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The VLAN sub-interface port (13) on the provider bridge forwards
                            the packet to the provider physical network interface (14).</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The provider physical network interface (14) adds VLAN tag 101 to the packet
                            and forwards it to the Internet via physical network infrastructure (15).</paragraph>
                    </list_item>
                </enumerated_list>
                <note>
                    <paragraph>Return traffic follows similar steps in reverse. However, without a
                        floating IPv4 address, hosts on the provider or external networks cannot
                        originate connections to instances on the self-service network.</paragraph>
                </note>
                <image alt="Self-service networks using Linux bridge - network traffic flow - north/south scenario 1" candidates="{'*': 'admin/figures/deploy-lb-selfservice-flowns1.png'}" uri="admin/figures/deploy-lb-selfservice-flowns1.png"></image>
            </section>
            <section ids="north-south-scenario-2-instance-with-a-floating-ipv4-address" names="north-south\ scenario\ 2:\ instance\ with\ a\ floating\ ipv4\ address">
                <title>North-south scenario 2: Instance with a floating IPv4 address</title>
                <paragraph>For instances with a floating IPv4 address, the network node performs SNAT
                    on north-south traffic passing from the instance to external networks
                    such as the Internet and DNAT on north-south traffic passing from external
                    networks to the instance. Floating IP addresses and NAT do not apply to IPv6.
                    Thus, the network node routes IPv6 traffic in this scenario.</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>The instance resides on compute node 1 and uses self-service network 1.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>A host on the Internet sends a packet to the instance.</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>The following steps involve the network node:</paragraph>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>The physical network infrastructure (1) forwards the packet to the
                            provider physical network interface (2).</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The provider physical network interface removes VLAN tag 101 and forwards
                            the packet to the VLAN sub-interface on the provider bridge.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The provider bridge forwards the packet to the self-service
                            router gateway port on the provider network (5).</paragraph>
                        <bullet_list bullet="*">
                            <list_item>
                                <paragraph>For IPv4, the router performs DNAT on the packet which changes the
                                    destination IP address to the instance IP address on the self-service
                                    network and sends it to the gateway IP address on the self-service
                                    network via the self-service interface (6).</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>For IPv6, the router sends the packet to the next-hop IP address,
                                    typically the gateway IP address on the self-service network, via
                                    the self-service interface (6).</paragraph>
                            </list_item>
                        </bullet_list>
                    </list_item>
                    <list_item>
                        <paragraph>The router forwards the packet to the self-service bridge router
                            port (7).</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The self-service bridge forwards the packet to the VXLAN interface (8)
                            which wraps the packet using VNI 101.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The underlying physical interface (9) for the VXLAN interface forwards
                            the packet to the network node via the overlay network (10).</paragraph>
                    </list_item>
                </enumerated_list>
                <paragraph>The following steps involve the compute node:</paragraph>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>The underlying physical interface (11) for the VXLAN interface forwards
                            the packet to the VXLAN interface (12) which unwraps the packet.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Security group rules (13) on the self-service bridge handle firewalling
                            and connection tracking for the packet.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The self-service bridge instance port (14) forwards the packet to
                            the instance interface (15) via <literal>veth</literal> pair.</paragraph>
                    </list_item>
                </enumerated_list>
                <note>
                    <paragraph>Egress instance traffic flows similar to north-south scenario 1, except SNAT
                        changes the source IP address of the packet to the floating IPv4 address
                        rather than the router IP address on the provider network.</paragraph>
                </note>
                <image alt="Self-service networks using Linux bridge - network traffic flow - north/south scenario 2" candidates="{'*': 'admin/figures/deploy-lb-selfservice-flowns2.png'}" uri="admin/figures/deploy-lb-selfservice-flowns2.png"></image>
            </section>
            <section ids="east-west-scenario-1-instances-on-the-same-network" names="east-west\ scenario\ 1:\ instances\ on\ the\ same\ network">
                <title>East-west scenario 1: Instances on the same network</title>
                <paragraph>Instances with a fixed IPv4/IPv6 or floating IPv4 address on the same network
                    communicate directly between compute nodes containing those instances.</paragraph>
                <paragraph>By default, the VXLAN protocol lacks knowledge of target location
                    and uses multicast to discover it. After discovery, it stores the
                    location in the local forwarding database. In large deployments,
                    the discovery process can generate a significant amount of network
                    that all nodes must process. To eliminate the latter and generally
                    increase efficiency, the Networking service includes the layer-2
                    population mechanism driver that automatically populates the
                    forwarding database for VXLAN interfaces. The example configuration
                    enables this driver. For more information, see <reference internal="True" refuri="config-ml2#config-plugin-ml2"><inline classes="std std-ref">ML2 plug-in</inline></reference>.</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>Instance 1 resides on compute node 1 and uses self-service network 1.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Instance 2 resides on compute node 2 and uses self-service network 1.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Instance 1 sends a packet to instance 2.</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>The following steps involve compute node 1:</paragraph>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>The instance 1 interface (1) forwards the packet to the
                            self-service bridge instance port (2) via <literal>veth</literal> pair.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Security group rules (3) on the self-service bridge handle firewalling
                            and connection tracking for the packet.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The self-service bridge forwards the packet to the VXLAN interface (4)
                            which wraps the packet using VNI 101.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The underlying physical interface (5) for the VXLAN interface forwards
                            the packet to compute node 2 via the overlay network (6).</paragraph>
                    </list_item>
                </enumerated_list>
                <paragraph>The following steps involve compute node 2:</paragraph>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>The underlying physical interface (7) for the VXLAN interface forwards
                            the packet to the VXLAN interface (8) which unwraps the packet.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Security group rules (9) on the self-service bridge handle firewalling
                            and connection tracking for the packet.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The self-service bridge instance port (10) forwards the packet to
                            the instance 1 interface (11) via <literal>veth</literal> pair.</paragraph>
                    </list_item>
                </enumerated_list>
                <note>
                    <paragraph>Return traffic follows similar steps in reverse.</paragraph>
                </note>
                <image alt="Self-service networks using Linux bridge - network traffic flow - east/west scenario 1" candidates="{'*': 'admin/figures/deploy-lb-selfservice-flowew1.png'}" uri="admin/figures/deploy-lb-selfservice-flowew1.png"></image>
            </section>
            <section ids="east-west-scenario-2-instances-on-different-networks" names="east-west\ scenario\ 2:\ instances\ on\ different\ networks">
                <title>East-west scenario 2: Instances on different networks</title>
                <paragraph>Instances using a fixed IPv4/IPv6 address or floating IPv4 address communicate
                    via router on the network node. The self-service networks must reside on the
                    same router.</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>Instance 1 resides on compute node 1 and uses self-service network 1.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Instance 2 resides on compute node 1 and uses self-service network 2.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Instance 1 sends a packet to instance 2.</paragraph>
                    </list_item>
                </bullet_list>
                <note>
                    <paragraph>Both instances reside on the same compute node to illustrate how VXLAN
                        enables multiple overlays to use the same layer-3 network.</paragraph>
                </note>
                <paragraph>The following steps involve the compute node:</paragraph>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>The instance 1 interface (1) forwards the packet to the self-service
                            bridge instance port (2) via <literal>veth</literal> pair.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Security group rules (3) on the self-service bridge handle
                            firewalling and connection tracking for the packet.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The self-service bridge forwards the packet to the VXLAN interface (4)
                            which wraps the packet using VNI 101.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The underlying physical interface (5) for the VXLAN interface forwards
                            the packet to the network node via the overlay network (6).</paragraph>
                    </list_item>
                </enumerated_list>
                <paragraph>The following steps involve the network node:</paragraph>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>The underlying physical interface (7) for the VXLAN interface forwards
                            the packet to the VXLAN interface (8) which unwraps the packet.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The self-service bridge router port (9) forwards the packet to the
                            self-service network 1 interface (10) in the router namespace.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The router sends the packet to the next-hop IP address, typically the
                            gateway IP address on self-service network 2, via the self-service
                            network 2 interface (11).</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The router forwards the packet to the self-service network 2 bridge router
                            port (12).</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The self-service network 2 bridge forwards the packet to the VXLAN
                            interface (13) which wraps the packet using VNI 102.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The physical network interface (14) for the VXLAN interface sends the
                            packet to the compute node via the overlay network (15).</paragraph>
                    </list_item>
                </enumerated_list>
                <paragraph>The following steps involve the compute node:</paragraph>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>The underlying physical interface (16) for the VXLAN interface sends
                            the packet to the VXLAN interface (17) which unwraps the packet.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Security group rules (18) on the self-service bridge handle firewalling
                            and connection tracking for the packet.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The self-service bridge instance port (19) forwards the packet to
                            the instance 2 interface (20) via <literal>veth</literal> pair.</paragraph>
                    </list_item>
                </enumerated_list>
                <note>
                    <paragraph>Return traffic follows similar steps in reverse.</paragraph>
                </note>
                <image alt="Self-service networks using Linux bridge - network traffic flow - east/west scenario 2" candidates="{'*': 'admin/figures/deploy-lb-selfservice-flowew2.png'}" uri="admin/figures/deploy-lb-selfservice-flowew2.png"></image>
            </section>
        </section>
    </section>
</document>

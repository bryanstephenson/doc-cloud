<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/neutron/doc/source/admin/deploy-ovs-provider.rst">
    <target refid="deploy-ovs-provider"></target>
    <section ids="open-vswitch-provider-networks deploy-ovs-provider" names="open\ vswitch:\ provider\ networks deploy-ovs-provider">
        <title>Open vSwitch: Provider networks</title>
        <paragraph>This architecture example provides layer-2 connectivity between instances
            and the physical network infrastructure using VLAN (802.1q) tagging. It
            supports one untagged (flat) network and up to 4095 tagged (VLAN) networks.
            The actual quantity of VLAN networks depends on the physical network
            infrastructure. For more information on provider networks, see
            <reference internal="True" refuri="intro-os-networking#intro-os-networking-provider"><inline classes="std std-ref">Provider networks</inline></reference>.</paragraph>
        <warning>
            <paragraph>Linux distributions often package older releases of Open vSwitch that can
                introduce issues during operation with the Networking service. We recommend
                using at least the latest long-term stable (LTS) release of Open vSwitch
                for the best experience and support from Open vSwitch. See
                <reference name="http://www.openvswitch.org" refuri="http://www.openvswitch.org">http://www.openvswitch.org</reference> for available releases and the
                <reference name="installation instructions" refuri="https://github.com/openvswitch/ovs/blob/master/INSTALL.md">installation instructions</reference> for</paragraph>
        </warning>
        <section ids="prerequisites" names="prerequisites">
            <title>Prerequisites</title>
            <paragraph>One controller node with the following components:</paragraph>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>Two network interfaces: management and provider.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>OpenStack Networking server service and ML2 plug-in.</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>Two compute nodes with the following components:</paragraph>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>Two network interfaces: management and provider.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>OpenStack Networking Open vSwitch (OVS) layer-2 agent, DHCP agent, metadata
                        agent, and any dependencies including OVS.</paragraph>
                </list_item>
            </bullet_list>
            <note>
                <paragraph>Larger deployments typically deploy the DHCP and metadata agents on a
                    subset of compute nodes to increase performance and redundancy. However,
                    too many agents can overwhelm the message bus. Also, to further simplify
                    any deployment, you can omit the metadata agent and use a configuration
                    drive to provide metadata to instances.</paragraph>
            </note>
        </section>
        <section ids="architecture" names="architecture">
            <title>Architecture</title>
            <image alt="Provider networks using OVS - overview" candidates="{'*': 'admin/figures/deploy-ovs-provider-overview.png'}" uri="admin/figures/deploy-ovs-provider-overview.png"></image>
            <paragraph>The following figure shows components and connectivity for one untagged
                (flat) network. In this particular case, the instance resides on the
                same compute node as the DHCP agent for the network. If the DHCP agent
                resides on another compute node, the latter only contains a DHCP namespace
                with a port on the OVS integration bridge.</paragraph>
            <image alt="Provider networks using OVS - components and connectivity - one network" candidates="{'*': 'admin/figures/deploy-ovs-provider-compconn1.png'}" uri="admin/figures/deploy-ovs-provider-compconn1.png"></image>
            <paragraph>The following figure describes virtual connectivity among components for
                two tagged (VLAN) networks. Essentially, all networks use a single OVS
                integration bridge with different internal VLAN tags. The internal VLAN
                tags almost always differ from the network VLAN assignment in the Networking
                service. Similar to the untagged network case, the DHCP agent may reside on
                a different compute node.</paragraph>
            <image alt="Provider networks using OVS - components and connectivity - multiple networks" candidates="{'*': 'admin/figures/deploy-ovs-provider-compconn2.png'}" uri="admin/figures/deploy-ovs-provider-compconn2.png"></image>
            <note>
                <paragraph>These figures omit the controller node because it does not handle instance
                    network traffic.</paragraph>
            </note>
        </section>
        <section ids="example-configuration" names="example\ configuration">
            <title>Example configuration</title>
            <paragraph>Use the following example configuration as a template to deploy provider
                networks in your environment.</paragraph>
            <section ids="controller-node" names="controller\ node">
                <title>Controller node</title>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>Install the Networking service components that provide the
                            <literal>neutron-server</literal> service and ML2 plug-in.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>In the <literal>neutron.conf</literal> file:</paragraph>
                        <bullet_list bullet="*">
                            <list_item>
                                <paragraph>Configure common options:</paragraph>
                                <literal_block highlight_args="{}" language="ini" linenos="False" xml:space="preserve">[DEFAULT]
core_plugin = ml2
auth_strategy = keystone

[database]
# ...

[keystone_authtoken]
# ...

[nova]
# ...

[agent]
# ...</literal_block>
                                <paragraph>See the <reference name="Installation Tutorials and Guides" refuri="https://docs.openstack.org">Installation Tutorials and Guides</reference><target ids="installation-tutorials-and-guides" names="installation\ tutorials\ and\ guides" refuri="https://docs.openstack.org"></target> and
                                    <reference name="Configuration Reference" refuri="https://docs.openstack.org">Configuration Reference</reference><target ids="configuration-reference" names="configuration\ reference" refuri="https://docs.openstack.org"></target> for your OpenStack
                                    release to obtain the appropriate additional configuration for the
                                    <literal>[DEFAULT]</literal>, <literal>[database]</literal>, <literal>[keystone_authtoken]</literal>, <literal>[nova]</literal>, and
                                    <literal>[agent]</literal> sections.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>Disable service plug-ins because provider networks do not require
                                    any. However, this breaks portions of the dashboard that manage
                                    the Networking service. See the
                                    <reference name="Ocata Install Tutorials and Guides" refuri="https://docs.openstack.org/project-install-guide/ocata">Ocata Install Tutorials and Guides</reference> for more
                                    information.</paragraph>
                                <literal_block highlight_args="{}" language="ini" linenos="False" xml:space="preserve">[DEFAULT]
service_plugins =</literal_block>
                            </list_item>
                            <list_item>
                                <paragraph>Enable two DHCP agents per network so both compute nodes can
                                    provide DHCP service provider networks.</paragraph>
                                <literal_block highlight_args="{}" language="ini" linenos="False" xml:space="preserve">[DEFAULT]
dhcp_agents_per_network = 2</literal_block>
                            </list_item>
                            <list_item>
                                <paragraph>If necessary, <reference internal="True" refuri="config-mtu#config-mtu"><inline classes="std std-ref">configure MTU</inline></reference>.</paragraph>
                            </list_item>
                        </bullet_list>
                    </list_item>
                    <list_item>
                        <paragraph>In the <literal>ml2_conf.ini</literal> file:</paragraph>
                        <bullet_list bullet="*">
                            <list_item>
                                <paragraph>Configure drivers and network types:</paragraph>
                                <literal_block highlight_args="{}" language="ini" linenos="False" xml:space="preserve">[ml2]
type_drivers = flat,vlan
tenant_network_types =
mechanism_drivers = openvswitch
extension_drivers = port_security</literal_block>
                            </list_item>
                            <list_item>
                                <paragraph>Configure network mappings:</paragraph>
                                <literal_block highlight_args="{}" language="ini" linenos="False" xml:space="preserve">[ml2_type_flat]
flat_networks = provider

[ml2_type_vlan]
network_vlan_ranges = provider</literal_block>
                                <note>
                                    <paragraph>The <literal>tenant_network_types</literal> option contains no value because the
                                        architecture does not support self-service networks.</paragraph>
                                </note>
                                <note>
                                    <paragraph>The <literal>provider</literal> value in the <literal>network_vlan_ranges</literal> option lacks VLAN
                                        ID ranges to support use of arbitrary VLAN IDs.</paragraph>
                                </note>
                            </list_item>
                        </bullet_list>
                    </list_item>
                    <list_item>
                        <paragraph>Populate the database.</paragraph>
                        <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve"># su -s /bin/sh -c "neutron-db-manage --config-file /etc/neutron/neutron.conf \
  --config-file /etc/neutron/plugins/ml2/ml2_conf.ini upgrade head" neutron</literal_block>
                    </list_item>
                    <list_item>
                        <paragraph>Start the following services:</paragraph>
                        <bullet_list bullet="*">
                            <list_item>
                                <paragraph>Server</paragraph>
                            </list_item>
                        </bullet_list>
                    </list_item>
                </enumerated_list>
            </section>
            <section ids="compute-nodes" names="compute\ nodes">
                <title>Compute nodes</title>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>Install the Networking service OVS layer-2 agent, DHCP agent, and
                            metadata agent.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Install OVS.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>In the <literal>neutron.conf</literal> file, configure common options:</paragraph>
                        <literal_block highlight_args="{}" language="ini" linenos="False" xml:space="preserve">[DEFAULT]
core_plugin = ml2
auth_strategy = keystone

[database]
# ...

[keystone_authtoken]
# ...

[nova]
# ...

[agent]
# ...</literal_block>
                        <paragraph>See the <reference name="Installation Tutorials and Guides" refuri="https://docs.openstack.org">Installation Tutorials and Guides</reference><target dupnames="installation\ tutorials\ and\ guides" ids="id1" refuri="https://docs.openstack.org"></target> and
                            <reference name="Configuration Reference" refuri="https://docs.openstack.org">Configuration Reference</reference><target dupnames="configuration\ reference" ids="id2" refuri="https://docs.openstack.org"></target> for your OpenStack
                            release to obtain the appropriate additional configuration for the
                            <literal>[DEFAULT]</literal>, <literal>[database]</literal>, <literal>[keystone_authtoken]</literal>, <literal>[nova]</literal>, and
                            <literal>[agent]</literal> sections.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>In the <literal>openvswitch_agent.ini</literal> file, configure the OVS agent:</paragraph>
                        <literal_block highlight_args="{}" language="ini" linenos="False" xml:space="preserve">[ovs]
bridge_mappings = provider:br-provider

[securitygroup]
firewall_driver = iptables_hybrid</literal_block>
                    </list_item>
                    <list_item>
                        <paragraph>In the <literal>dhcp_agent.ini</literal> file, configure the DHCP agent:</paragraph>
                        <literal_block highlight_args="{}" language="ini" linenos="False" xml:space="preserve">[DEFAULT]
interface_driver = openvswitch
enable_isolated_metadata = True
force_metadata = True</literal_block>
                        <note>
                            <paragraph>The <literal>force_metadata</literal> option forces the DHCP agent to provide
                                a host route to the metadata service on <literal>169.254.169.254</literal>
                                regardless of whether the subnet contains an interface on a
                                router, thus maintaining similar and predictable metadata behavior
                                among subnets.</paragraph>
                        </note>
                    </list_item>
                    <list_item>
                        <paragraph>In the <literal>metadata_agent.ini</literal> file, configure the metadata agent:</paragraph>
                        <literal_block highlight_args="{}" language="ini" linenos="False" xml:space="preserve">[DEFAULT]
nova_metadata_host = controller
metadata_proxy_shared_secret = METADATA_SECRET</literal_block>
                        <paragraph>The value of <literal>METADATA_SECRET</literal> must match the value of the same option
                            in the <literal>[neutron]</literal> section of the <literal>nova.conf</literal> file.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Start the following services:</paragraph>
                        <bullet_list bullet="*">
                            <list_item>
                                <paragraph>OVS</paragraph>
                            </list_item>
                        </bullet_list>
                    </list_item>
                    <list_item>
                        <paragraph>Create the OVS provider bridge <literal>br-provider</literal>:</paragraph>
                        <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ ovs-vsctl add-br br-provider</literal_block>
                    </list_item>
                    <list_item>
                        <paragraph>Add the provider network interface as a port on the OVS provider
                            bridge <literal>br-provider</literal>:</paragraph>
                        <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ ovs-vsctl add-port br-provider PROVIDER_INTERFACE</literal_block>
                        <paragraph>Replace <literal>PROVIDER_INTERFACE</literal> with the name of the underlying interface
                            that handles provider networks. For example, <literal>eth1</literal>.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Start the following services:</paragraph>
                        <bullet_list bullet="*">
                            <list_item>
                                <paragraph>OVS agent</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>DHCP agent</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>Metadata agent</paragraph>
                            </list_item>
                        </bullet_list>
                    </list_item>
                </enumerated_list>
            </section>
            <section ids="verify-service-operation" names="verify\ service\ operation">
                <title>Verify service operation</title>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>Source the administrative project credentials.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Verify presence and operation of the agents:</paragraph>
                        <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ openstack network agent list
+--------------------------------------+--------------------+----------+-------------------+-------+-------+---------------------------+
| ID                                   | Agent Type         | Host     | Availability Zone | Alive | State | Binary                    |
+--------------------------------------+--------------------+----------+-------------------+-------+-------+---------------------------+
| 1236bbcb-e0ba-48a9-80fc-81202ca4fa51 | Metadata agent     | compute2 |                   | True  | UP    | neutron-metadata-agent    |
| 457d6898-b373-4bb3-b41f-59345dcfb5c5 | Open vSwitch agent | compute2 |                   | True  | UP    | neutron-openvswitch-agent |
| 71f15e84-bc47-4c2a-b9fb-317840b2d753 | DHCP agent         | compute2 | nova              | True  | UP    | neutron-dhcp-agent        |
| a6c69690-e7f7-4e56-9831-1282753e5007 | Metadata agent     | compute1 |                   | True  | UP    | neutron-metadata-agent    |
| af11f22f-a9f4-404f-9fd8-cd7ad55c0f68 | DHCP agent         | compute1 | nova              | True  | UP    | neutron-dhcp-agent        |
| bcfc977b-ec0e-4ba9-be62-9489b4b0e6f1 | Open vSwitch agent | compute1 |                   | True  | UP    | neutron-openvswitch-agent |
+--------------------------------------+--------------------+----------+-------------------+-------+-------+---------------------------+</literal_block>
                    </list_item>
                </enumerated_list>
            </section>
            <section ids="create-initial-networks" names="create\ initial\ networks">
                <title>Create initial networks</title>
                <paragraph>The configuration supports one flat or multiple VLAN provider networks. For
                    simplicity, the following procedure creates one flat provider network.</paragraph>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>Source the administrative project credentials.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Create a flat network.</paragraph>
                        <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ openstack network create --share --provider-physical-network provider \
  --provider-network-type flat provider1
+---------------------------+-----------+-
| Field                     | Value     |
+---------------------------+-----------+
| admin_state_up            | UP        |
| mtu                       | 1500      |
| name                      | provider1 |
| port_security_enabled     | True      |
| provider:network_type     | flat      |
| provider:physical_network | provider  |
| provider:segmentation_id  | None      |
| router:external           | Internal  |
| shared                    | True      |
| status                    | ACTIVE    |
+---------------------------+-----------+</literal_block>
                        <note>
                            <paragraph>The <literal>share</literal> option allows any project to use this network. To limit
                                access to provider networks, see <reference internal="True" refuri="config-rbac#config-rbac"><inline classes="std std-ref">Role-Based Access Control (RBAC)</inline></reference>.</paragraph>
                        </note>
                        <note>
                            <paragraph>To create a VLAN network instead of a flat network, change
                                <literal>--provider:network_type flat</literal> to <literal>--provider-network-type vlan</literal>
                                and add <literal>--provider-segment</literal> with a value referencing
                                the VLAN ID.</paragraph>
                        </note>
                    </list_item>
                    <list_item>
                        <paragraph>Create a IPv4 subnet on the provider network.</paragraph>
                        <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ openstack subnet create --subnet-range 203.0.113.0/24 --gateway 203.0.113.1 \
  --network provider1 --allocation-pool start=203.0.113.11,end=203.0.113.250 \
  --dns-nameserver 8.8.4.4 provider1-v4
+-------------------+----------------------------+
| Field             | Value                      |
+-------------------+----------------------------+
| allocation_pools  | 203.0.113.11-203.0.113.250 |
| cidr              | 203.0.113.0/24             |
| dns_nameservers   | 8.8.4.4                    |
| enable_dhcp       | True                       |
| gateway_ip        | 203.0.113.1                |
| ip_version        | 4                          |
| name              | provider1-v4               |
+-------------------+----------------------------+</literal_block>
                        <important>
                            <paragraph>Enabling DHCP causes the Networking service to provide DHCP which can
                                interfere with existing DHCP services on the physical network
                                infrastructure. Use the <literal>--no-dhcp</literal> option to have the subnet managed
                                by existing DHCP services.</paragraph>
                        </important>
                    </list_item>
                    <list_item>
                        <paragraph>Create a IPv6 subnet on the provider network.</paragraph>
                        <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ openstack subnet create --subnet-range fd00:203:0:113::/64 --gateway fd00:203:0:113::1 \
  --ip-version 6 --ipv6-address-mode slaac --network provider1 \
  --dns-nameserver 2001:4860:4860::8844 provider1-v6
+-------------------+------------------------------------------------------+
| Field             | Value                                                |
+-------------------+------------------------------------------------------+
| allocation_pools  | fd00:203:0:113::2-fd00:203:0:113:ffff:ffff:ffff:ffff |
| cidr              | fd00:203:0:113::/64                                  |
| dns_nameservers   | 2001:4860:4860::8844                                 |
| enable_dhcp       | True                                                 |
| gateway_ip        | fd00:203:0:113::1                                    |
| ip_version        | 6                                                    |
| ipv6_address_mode | slaac                                                |
| ipv6_ra_mode      | None                                                 |
| name              | provider1-v6                                         |
+-------------------+------------------------------------------------------+</literal_block>
                        <note>
                            <paragraph>The Networking service uses the layer-3 agent to provide router
                                advertisement. Provider networks rely on physical network infrastructure
                                for layer-3 services rather than the layer-3 agent. Thus, the physical
                                network infrastructure must provide router advertisement on provider
                                networks for proper operation of IPv6.</paragraph>
                        </note>
                    </list_item>
                </enumerated_list>
            </section>
            <section ids="verify-network-operation" names="verify\ network\ operation">
                <title>Verify network operation</title>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>On each compute node, verify creation of the <literal>qdhcp</literal> namespace.</paragraph>
                        <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve"># ip netns
qdhcp-8b868082-e312-4110-8627-298109d4401c</literal_block>
                    </list_item>
                    <list_item>
                        <paragraph>Source a regular (non-administrative) project credentials.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Create the appropriate security group rules to allow <literal>ping</literal> and SSH
                            access instances using the network.</paragraph>
                        <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ openstack security group rule create --proto icmp default
+------------------+-----------+
| Field            | Value     |
+------------------+-----------+
| direction        | ingress   |
| ethertype        | IPv4      |
| protocol         | icmp      |
| remote_ip_prefix | 0.0.0.0/0 |
+------------------+-----------+

$ openstack security group rule create --ethertype IPv6 --proto ipv6-icmp default
+-----------+-----------+
| Field     | Value     |
+-----------+-----------+
| direction | ingress   |
| ethertype | IPv6      |
| protocol  | ipv6-icmp |
+-----------+-----------+

$ openstack security group rule create --proto tcp --dst-port 22 default
+------------------+-----------+
| Field            | Value     |
+------------------+-----------+
| direction        | ingress   |
| ethertype        | IPv4      |
| port_range_max   | 22        |
| port_range_min   | 22        |
| protocol         | tcp       |
| remote_ip_prefix | 0.0.0.0/0 |
+------------------+-----------+

$ openstack security group rule create --ethertype IPv6 --proto tcp --dst-port 22 default
+------------------+-----------+
| Field            | Value     |
+------------------+-----------+
| direction        | ingress   |
| ethertype        | IPv6      |
| port_range_max   | 22        |
| port_range_min   | 22        |
| protocol         | tcp       |
+------------------+-----------+</literal_block>
                    </list_item>
                    <list_item>
                        <paragraph>Launch an instance with an interface on the provider network. For example,
                            a CirrOS image using flavor ID 1.</paragraph>
                        <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ openstack server create --flavor 1 --image cirros \
  --nic net-id=NETWORK_ID provider-instance1</literal_block>
                        <paragraph>Replace <literal>NETWORK_ID</literal> with the ID of the provider network.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Determine the IPv4 and IPv6 addresses of the instance.</paragraph>
                        <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ openstack server list
+--------------------------------------+--------------------+--------+------------------------------------------------------------+------------+
| ID                                   | Name               | Status | Networks                                                   | Image Name |
+--------------------------------------+--------------------+--------+------------------------------------------------------------+------------+
| 018e0ae2-b43c-4271-a78d-62653dd03285 | provider-instance1 | ACTIVE | provider1=203.0.113.13, fd00:203:0:113:f816:3eff:fe58:be4e | cirros     |
+--------------------------------------+--------------------+--------+------------------------------------------------------------+------------+</literal_block>
                    </list_item>
                    <list_item>
                        <paragraph>On the controller node or any host with access to the provider network,
                            <literal>ping</literal> the IPv4 and IPv6 addresses of the instance.</paragraph>
                        <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ ping -c 4 203.0.113.13
PING 203.0.113.13 (203.0.113.13) 56(84) bytes of data.
64 bytes from 203.0.113.13: icmp_req=1 ttl=63 time=3.18 ms
64 bytes from 203.0.113.13: icmp_req=2 ttl=63 time=0.981 ms
64 bytes from 203.0.113.13: icmp_req=3 ttl=63 time=1.06 ms
64 bytes from 203.0.113.13: icmp_req=4 ttl=63 time=0.929 ms

--- 203.0.113.13 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3002ms
rtt min/avg/max/mdev = 0.929/1.539/3.183/0.951 ms

$ ping6 -c 4 fd00:203:0:113:f816:3eff:fe58:be4e
PING fd00:203:0:113:f816:3eff:fe58:be4e(fd00:203:0:113:f816:3eff:fe58:be4e) 56 data bytes
64 bytes from fd00:203:0:113:f816:3eff:fe58:be4e icmp_seq=1 ttl=64 time=1.25 ms
64 bytes from fd00:203:0:113:f816:3eff:fe58:be4e icmp_seq=2 ttl=64 time=0.683 ms
64 bytes from fd00:203:0:113:f816:3eff:fe58:be4e icmp_seq=3 ttl=64 time=0.762 ms
64 bytes from fd00:203:0:113:f816:3eff:fe58:be4e icmp_seq=4 ttl=64 time=0.486 ms

--- fd00:203:0:113:f816:3eff:fe58:be4e ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.486/0.796/1.253/0.282 ms</literal_block>
                    </list_item>
                    <list_item>
                        <paragraph>Obtain access to the instance.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Test IPv4 and IPv6 connectivity to the Internet or other external network.</paragraph>
                    </list_item>
                </enumerated_list>
            </section>
        </section>
        <section ids="network-traffic-flow" names="network\ traffic\ flow">
            <title>Network traffic flow</title>
            <paragraph>The following sections describe the flow of network traffic in several
                common scenarios. <emphasis>North-south</emphasis> network traffic travels between an instance
                and external network such as the Internet. <emphasis>East-west</emphasis> network traffic
                travels between instances on the same or different networks. In all scenarios,
                the physical network infrastructure handles switching and routing among
                provider networks and external networks such as the Internet. Each case
                references one or more of the following components:</paragraph>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>Provider network 1 (VLAN)</paragraph>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph>VLAN ID 101 (tagged)</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>IP address ranges 203.0.113.0/24 and fd00:203:0:113::/64</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>Gateway (via physical network infrastructure)</paragraph>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>IP addresses 203.0.113.1 and fd00:203:0:113:0::1</paragraph>
                                </list_item>
                            </bullet_list>
                        </list_item>
                    </bullet_list>
                </list_item>
                <list_item>
                    <paragraph>Provider network 2 (VLAN)</paragraph>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph>VLAN ID 102 (tagged)</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>IP address range 192.0.2.0/24 and fd00:192:0:2::/64</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>Gateway</paragraph>
                            <bullet_list bullet="*">
                                <list_item>
                                    <paragraph>IP addresses 192.0.2.1 and fd00:192:0:2::1</paragraph>
                                </list_item>
                            </bullet_list>
                        </list_item>
                    </bullet_list>
                </list_item>
                <list_item>
                    <paragraph>Instance 1</paragraph>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph>IP addresses 203.0.113.101 and fd00:203:0:113:0::101</paragraph>
                        </list_item>
                    </bullet_list>
                </list_item>
                <list_item>
                    <paragraph>Instance 2</paragraph>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph>IP addresses 192.0.2.101 and fd00:192:0:2:0::101</paragraph>
                        </list_item>
                    </bullet_list>
                </list_item>
            </bullet_list>
            <section ids="north-south" names="north-south">
                <title>North-south</title>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>The instance resides on compute node 1 and uses provider network 1.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The instance sends a packet to a host on the Internet.</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>The following steps involve compute node 1.</paragraph>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>The instance interface (1) forwards the packet to the security group
                            bridge instance port (2) via <literal>veth</literal> pair.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Security group rules (3) on the security group bridge handle firewalling
                            and connection tracking for the packet.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The security group bridge OVS port (4) forwards the packet to the OVS
                            integration bridge security group port (5) via <literal>veth</literal> pair.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The OVS integration bridge adds an internal VLAN tag to the packet.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The OVS integration bridge <literal>int-br-provider</literal> patch port (6) forwards
                            the packet to the OVS provider bridge <literal>phy-br-provider</literal> patch port (7).</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The OVS provider bridge swaps the internal VLAN tag with actual VLAN tag
                            101.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The OVS provider bridge provider network port (8) forwards the packet to
                            the physical network interface (9).</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The physical network interface forwards the packet to the physical
                            network infrastructure switch (10).</paragraph>
                    </list_item>
                </enumerated_list>
                <paragraph>The following steps involve the physical network infrastructure:</paragraph>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>The switch removes VLAN tag 101 from the packet and forwards it to the
                            router (11).</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The router routes the packet from the provider network (12) to the
                            external network (13) and forwards the packet to the switch (14).</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The switch forwards the packet to the external network (15).</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The external network (16) receives the packet.</paragraph>
                    </list_item>
                </enumerated_list>
                <image alt="Provider networks using Open vSwitch - network traffic flow - north/south" candidates="{'*': 'admin/figures/deploy-ovs-provider-flowns1.png'}" uri="admin/figures/deploy-ovs-provider-flowns1.png"></image>
                <note>
                    <paragraph>Return traffic follows similar steps in reverse.</paragraph>
                </note>
            </section>
            <section ids="east-west-scenario-1-instances-on-the-same-network" names="east-west\ scenario\ 1:\ instances\ on\ the\ same\ network">
                <title>East-west scenario 1: Instances on the same network</title>
                <paragraph>Instances on the same network communicate directly between compute nodes
                    containing those instances.</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>Instance 1 resides on compute node 1 and uses provider network 1.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Instance 2 resides on compute node 2 and uses provider network 1.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Instance 1 sends a packet to instance 2.</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>The following steps involve compute node 1:</paragraph>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>The instance 1 interface (1) forwards the packet to the security group
                            bridge instance port (2) via <literal>veth</literal> pair.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Security group rules (3) on the security group bridge handle firewalling
                            and connection tracking for the packet.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The security group bridge OVS port (4) forwards the packet to the OVS
                            integration bridge security group port (5) via <literal>veth</literal> pair.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The OVS integration bridge adds an internal VLAN tag to the packet.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The OVS integration bridge <literal>int-br-provider</literal> patch port (6) forwards
                            the packet to the OVS provider bridge <literal>phy-br-provider</literal> patch port (7).</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The OVS provider bridge swaps the internal VLAN tag with actual VLAN tag
                            101.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The OVS provider bridge provider network port (8) forwards the packet to
                            the physical network interface (9).</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The physical network interface forwards the packet to the physical
                            network infrastructure switch (10).</paragraph>
                    </list_item>
                </enumerated_list>
                <paragraph>The following steps involve the physical network infrastructure:</paragraph>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>The switch forwards the packet from compute node 1 to compute node 2 (11).</paragraph>
                    </list_item>
                </enumerated_list>
                <paragraph>The following steps involve compute node 2:</paragraph>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>The physical network interface (12) forwards the packet to the OVS
                            provider bridge provider network port (13).</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The OVS provider bridge <literal>phy-br-provider</literal> patch port (14) forwards the
                            packet to the OVS integration bridge <literal>int-br-provider</literal> patch port (15).</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The OVS integration bridge swaps the actual VLAN tag 101 with the internal
                            VLAN tag.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The OVS integration bridge security group port (16) forwards the packet
                            to the security group bridge OVS port (17).</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Security group rules (18) on the security group bridge handle firewalling
                            and connection tracking for the packet.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The security group bridge instance port (19) forwards the packet to the
                            instance 2 interface (20) via <literal>veth</literal> pair.</paragraph>
                    </list_item>
                </enumerated_list>
                <image alt="Provider networks using Open vSwitch - network traffic flow - east/west scenario 1" candidates="{'*': 'admin/figures/deploy-ovs-provider-flowew1.png'}" uri="admin/figures/deploy-ovs-provider-flowew1.png"></image>
                <note>
                    <paragraph>Return traffic follows similar steps in reverse.</paragraph>
                </note>
            </section>
            <section ids="east-west-scenario-2-instances-on-different-networks" names="east-west\ scenario\ 2:\ instances\ on\ different\ networks">
                <title>East-west scenario 2: Instances on different networks</title>
                <paragraph>Instances communicate via router on the physical network infrastructure.</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>Instance 1 resides on compute node 1 and uses provider network 1.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Instance 2 resides on compute node 1 and uses provider network 2.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Instance 1 sends a packet to instance 2.</paragraph>
                    </list_item>
                </bullet_list>
                <note>
                    <paragraph>Both instances reside on the same compute node to illustrate how VLAN
                        tagging enables multiple logical layer-2 networks to use the same
                        physical layer-2 network.</paragraph>
                </note>
                <paragraph>The following steps involve the compute node:</paragraph>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>The instance 1 interface (1) forwards the packet to the security group
                            bridge instance port (2) via <literal>veth</literal> pair.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Security group rules (3) on the security group bridge handle firewalling
                            and connection tracking for the packet.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The security group bridge OVS port (4) forwards the packet to the OVS
                            integration bridge security group port (5) via <literal>veth</literal> pair.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The OVS integration bridge adds an internal VLAN tag to the packet.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The OVS integration bridge <literal>int-br-provider</literal> patch port (6) forwards
                            the packet to the OVS provider bridge <literal>phy-br-provider</literal> patch port (7).</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The OVS provider bridge swaps the internal VLAN tag with actual VLAN tag
                            101.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The OVS provider bridge provider network port (8) forwards the packet to
                            the physical network interface (9).</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The physical network interface forwards the packet to the physical
                            network infrastructure switch (10).</paragraph>
                    </list_item>
                </enumerated_list>
                <paragraph>The following steps involve the physical network infrastructure:</paragraph>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>The switch removes VLAN tag 101 from the packet and forwards it to the
                            router (11).</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The router routes the packet from provider network 1 (12) to provider
                            network 2 (13).</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The router forwards the packet to the switch (14).</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The switch adds VLAN tag 102 to the packet and forwards it to compute
                            node 1 (15).</paragraph>
                    </list_item>
                </enumerated_list>
                <paragraph>The following steps involve the compute node:</paragraph>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>The physical network interface (16) forwards the packet to the OVS
                            provider bridge provider network port (17).</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The OVS provider bridge <literal>phy-br-provider</literal> patch port (18) forwards the
                            packet to the OVS integration bridge <literal>int-br-provider</literal> patch port (19).</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The OVS integration bridge swaps the actual VLAN tag 102 with the internal
                            VLAN tag.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The OVS integration bridge security group port (20) removes the internal
                            VLAN tag and forwards the packet to the security group bridge OVS port
                            (21).</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Security group rules (22) on the security group bridge handle firewalling
                            and connection tracking for the packet.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The security group bridge instance port (23) forwards the packet to the
                            instance 2 interface (24) via <literal>veth</literal> pair.</paragraph>
                    </list_item>
                </enumerated_list>
                <image alt="Provider networks using Open vSwitch - network traffic flow - east/west scenario 2" candidates="{'*': 'admin/figures/deploy-ovs-provider-flowew2.png'}" uri="admin/figures/deploy-ovs-provider-flowew2.png"></image>
                <note>
                    <paragraph>Return traffic follows similar steps in reverse.</paragraph>
                </note>
            </section>
        </section>
    </section>
</document>

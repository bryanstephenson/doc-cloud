<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/neutron/doc/source/admin/deploy-ovs-ha-dvr.rst">
    <target refid="deploy-ovs-ha-dvr"></target>
    <section ids="open-vswitch-high-availability-using-dvr deploy-ovs-ha-dvr" names="open\ vswitch:\ high\ availability\ using\ dvr deploy-ovs-ha-dvr">
        <title>Open vSwitch: High availability using DVR</title>
        <paragraph>This architecture example augments the self-service deployment example
            with the Distributed Virtual Router (DVR) high-availability mechanism that
            provides connectivity between self-service and provider networks on compute
            nodes rather than network nodes for specific scenarios. For instances with a
            floating IPv4 address, routing between self-service and provider networks
            resides completely on the compute nodes to eliminate single point of
            failure and performance issues with network nodes. Routing also resides
            completely on the compute nodes for instances with a fixed or floating IPv4
            address using self-service networks on the same distributed virtual router.
            However, instances with a fixed IP address still rely on the network node for
            routing and SNAT services between self-service and provider networks.</paragraph>
        <paragraph>Consider the following attributes of this high-availability mechanism to
            determine practicality in your environment:</paragraph>
        <bullet_list bullet="*">
            <list_item>
                <paragraph>Only provides connectivity to an instance via the compute node on which
                    the instance resides if the instance resides on a self-service network
                    with a floating IPv4 address. Instances on self-service networks with
                    only an IPv6 address or both IPv4 and IPv6 addresses rely on the network
                    node for IPv6 connectivity.</paragraph>
            </list_item>
            <list_item>
                <paragraph>The instance of a router on each compute node consumes an IPv4 address
                    on the provider network on which it contains a gateway.</paragraph>
            </list_item>
        </bullet_list>
        <section ids="prerequisites" names="prerequisites">
            <title>Prerequisites</title>
            <paragraph>Modify the compute nodes with the following components:</paragraph>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>Install the OpenStack Networking layer-3 agent.</paragraph>
                </list_item>
            </bullet_list>
            <note>
                <paragraph>Consider adding at least one additional network node to provide
                    high-availability for instances with a fixed IP address. See
                    See <reference internal="True" refuri="config-dvr-ha-snat#config-dvr-snat-ha-ovs"><inline classes="std std-ref">Distributed Virtual Routing with VRRP</inline></reference> for more information.</paragraph>
            </note>
        </section>
        <section ids="architecture" names="architecture">
            <title>Architecture</title>
            <image alt="High-availability using Open vSwitch with DVR - overview" candidates="{'*': 'admin/figures/deploy-ovs-ha-dvr-overview.png'}" uri="admin/figures/deploy-ovs-ha-dvr-overview.png"></image>
            <paragraph>The following figure shows components and connectivity for one self-service
                network and one untagged (flat) network. In this particular case, the
                instance resides on the same compute node as the DHCP agent for the network.
                If the DHCP agent resides on another compute node, the latter only contains
                a DHCP namespace with a port on the OVS integration bridge.</paragraph>
            <image alt="High-availability using Open vSwitch with DVR - components and connectivity - one network" candidates="{'*': 'admin/figures/deploy-ovs-ha-dvr-compconn1.png'}" uri="admin/figures/deploy-ovs-ha-dvr-compconn1.png"></image>
        </section>
        <section ids="example-configuration" names="example\ configuration">
            <title>Example configuration</title>
            <paragraph>Use the following example configuration as a template to add support for
                high-availability using DVR to an existing operational environment that
                supports self-service networks.</paragraph>
            <section ids="controller-node" names="controller\ node">
                <title>Controller node</title>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>In the <literal>neutron.conf</literal> file:</paragraph>
                        <bullet_list bullet="*">
                            <list_item>
                                <paragraph>Enable distributed routing by default for all routers.</paragraph>
                                <literal_block highlight_args="{}" language="ini" linenos="False" xml:space="preserve">[DEFAULT]
router_distributed = True</literal_block>
                            </list_item>
                        </bullet_list>
                    </list_item>
                    <list_item>
                        <paragraph>Restart the following services:</paragraph>
                        <bullet_list bullet="*">
                            <list_item>
                                <paragraph>Server</paragraph>
                            </list_item>
                        </bullet_list>
                    </list_item>
                </enumerated_list>
            </section>
            <section ids="network-node" names="network\ node">
                <title>Network node</title>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>In the <literal>openswitch_agent.ini</literal> file, enable distributed routing.</paragraph>
                        <literal_block highlight_args="{}" language="ini" linenos="False" xml:space="preserve">[DEFAULT]
enable_distributed_routing = True</literal_block>
                    </list_item>
                    <list_item>
                        <paragraph>In the <literal>l3_agent.ini</literal> file, configure the layer-3 agent to provide
                            SNAT services.</paragraph>
                        <literal_block highlight_args="{}" language="ini" linenos="False" xml:space="preserve">[DEFAULT]
agent_mode = dvr_snat</literal_block>
                        <note>
                            <paragraph>The <literal>external_network_bridge</literal> option intentionally contains
                                no value.</paragraph>
                        </note>
                    </list_item>
                    <list_item>
                        <paragraph>Restart the following services:</paragraph>
                        <bullet_list bullet="*">
                            <list_item>
                                <paragraph>Open vSwitch agent</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>Layer-3 agent</paragraph>
                            </list_item>
                        </bullet_list>
                    </list_item>
                </enumerated_list>
            </section>
            <section ids="compute-nodes" names="compute\ nodes">
                <title>Compute nodes</title>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>Install the Networking service layer-3 agent.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>In the <literal>openswitch_agent.ini</literal> file, enable distributed routing.</paragraph>
                        <literal_block highlight_args="{}" language="ini" linenos="False" xml:space="preserve">[DEFAULT]
enable_distributed_routing = True</literal_block>
                    </list_item>
                    <list_item>
                        <paragraph>In the <literal>l3_agent.ini</literal> file, configure the layer-3 agent.</paragraph>
                        <literal_block highlight_args="{}" language="ini" linenos="False" xml:space="preserve">[DEFAULT]
interface_driver = openvswitch
external_network_bridge =
agent_mode = dvr</literal_block>
                        <note>
                            <paragraph>The <literal>external_network_bridge</literal> option intentionally contains
                                no value.</paragraph>
                        </note>
                    </list_item>
                    <list_item>
                        <paragraph>Restart the following services:</paragraph>
                        <bullet_list bullet="*">
                            <list_item>
                                <paragraph>Open vSwitch agent</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>Layer-3 agent</paragraph>
                            </list_item>
                        </bullet_list>
                    </list_item>
                </enumerated_list>
            </section>
            <section ids="verify-service-operation" names="verify\ service\ operation">
                <title>Verify service operation</title>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>Source the administrative project credentials.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Verify presence and operation of the agents.</paragraph>
                        <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ openstack network agent list
+--------------------------------------+--------------------+----------+-------------------+-------+-------+---------------------------+
| ID                                   | Agent Type         | Host     | Availability Zone | Alive | State | Binary                    |
+--------------------------------------+--------------------+----------+-------------------+-------+-------+---------------------------+
| 05d980f2-a4fc-4815-91e7-a7f7e118c0db | L3 agent           | compute1 | nova              | True  | UP    | neutron-l3-agent          |
| 1236bbcb-e0ba-48a9-80fc-81202ca4fa51 | Metadata agent     | compute2 |                   | True  | UP    | neutron-metadata-agent    |
| 2a2e9a90-51b8-4163-a7d6-3e199ba2374b | L3 agent           | compute2 | nova              | True  | UP    | neutron-l3-agent          |
| 457d6898-b373-4bb3-b41f-59345dcfb5c5 | Open vSwitch agent | compute2 |                   | True  | UP    | neutron-openvswitch-agent |
| 513caa68-0391-4e53-a530-082e2c23e819 | Linux bridge agent | compute1 |                   | True  | UP    | neutron-linuxbridge-agent |
| 71f15e84-bc47-4c2a-b9fb-317840b2d753 | DHCP agent         | compute2 | nova              | True  | UP    | neutron-dhcp-agent        |
| 8805b962-de95-4e40-bdc2-7a0add7521e8 | L3 agent           | network1 | nova              | True  | UP    | neutron-l3-agent          |
| a33cac5a-0266-48f6-9cac-4cef4f8b0358 | Open vSwitch agent | network1 |                   | True  | UP    | neutron-openvswitch-agent |
| a6c69690-e7f7-4e56-9831-1282753e5007 | Metadata agent     | compute1 |                   | True  | UP    | neutron-metadata-agent    |
| af11f22f-a9f4-404f-9fd8-cd7ad55c0f68 | DHCP agent         | compute1 | nova              | True  | UP    | neutron-dhcp-agent        |
| bcfc977b-ec0e-4ba9-be62-9489b4b0e6f1 | Open vSwitch agent | compute1 |                   | True  | UP    | neutron-openvswitch-agent |
+--------------------------------------+--------------------+----------+-------------------+-------+-------+---------------------------+</literal_block>
                    </list_item>
                </enumerated_list>
            </section>
            <section ids="create-initial-networks" names="create\ initial\ networks">
                <title>Create initial networks</title>
                <paragraph>Similar to the self-service deployment example, this configuration supports
                    multiple VXLAN self-service networks. After enabling high-availability, all
                    additional routers use distributed routing. The following procedure creates
                    an additional self-service network and router. The Networking service also
                    supports adding distributed routing to existing routers.</paragraph>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>Source a regular (non-administrative) project credentials.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Create a self-service network.</paragraph>
                        <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ openstack network create selfservice2
+-------------------------+--------------+
| Field                   | Value        |
+-------------------------+--------------+
| admin_state_up          | UP           |
| mtu                     | 1450         |
| name                    | selfservice2 |
| port_security_enabled   | True         |
| router:external         | Internal     |
| shared                  | False        |
| status                  | ACTIVE       |
+-------------------------+--------------+</literal_block>
                    </list_item>
                    <list_item>
                        <paragraph>Create a IPv4 subnet on the self-service network.</paragraph>
                        <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ openstack subnet create --subnet-range 192.0.2.0/24 \
  --network selfservice2 --dns-nameserver 8.8.4.4 selfservice2-v4
+-------------------+---------------------------+
| Field             | Value                     |
+-------------------+---------------------------+
| allocation_pools  | 192.0.2.2-192.0.2.254     |
| cidr              | 192.0.2.0/24              |
| dns_nameservers   | 8.8.4.4                   |
| enable_dhcp       | True                      |
| gateway_ip        | 192.0.2.1                 |
| ip_version        | 4                         |
| name              | selfservice2-v4           |
+-------------------+---------------------------+</literal_block>
                    </list_item>
                    <list_item>
                        <paragraph>Create a IPv6 subnet on the self-service network.</paragraph>
                        <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ openstack subnet create --subnet-range fd00:192:0:2::/64 --ip-version 6 \
  --ipv6-ra-mode slaac --ipv6-address-mode slaac --network selfservice2 \
  --dns-nameserver 2001:4860:4860::8844 selfservice2-v6
+-------------------+------------------------------------------------------+
| Field             | Value                                                |
+-------------------+------------------------------------------------------+
| allocation_pools  | fd00:192:0:2::2-fd00:192:0:2:ffff:ffff:ffff:ffff     |
| cidr              | fd00:192:0:2::/64                                    |
| dns_nameservers   | 2001:4860:4860::8844                                 |
| enable_dhcp       | True                                                 |
| gateway_ip        | fd00:192:0:2::1                                      |
| ip_version        | 6                                                    |
| ipv6_address_mode | slaac                                                |
| ipv6_ra_mode      | slaac                                                |
| name              | selfservice2-v6                                      |
+-------------------+------------------------------------------------------+</literal_block>
                    </list_item>
                    <list_item>
                        <paragraph>Create a router.</paragraph>
                        <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ openstack router create router2
+-----------------------+---------+
| Field                 | Value   |
+-----------------------+---------+
| admin_state_up        | UP      |
| name                  | router2 |
| status                | ACTIVE  |
+-----------------------+---------+</literal_block>
                    </list_item>
                    <list_item>
                        <paragraph>Add the IPv4 and IPv6 subnets as interfaces on the router.</paragraph>
                        <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ openstack router add subnet router2 selfservice2-v4
$ openstack router add subnet router2 selfservice2-v6</literal_block>
                        <note>
                            <paragraph>These commands provide no output.</paragraph>
                        </note>
                    </list_item>
                    <list_item>
                        <paragraph>Add the provider network as a gateway on the router.</paragraph>
                        <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ openstack router set router2 --external-gateway provider1</literal_block>
                    </list_item>
                </enumerated_list>
            </section>
            <section ids="verify-network-operation" names="verify\ network\ operation">
                <title>Verify network operation</title>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>Source the administrative project credentials.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Verify distributed routing on the router.</paragraph>
                        <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ openstack router show router2
+-------------------------+---------+
| Field                   | Value   |
+-------------------------+---------+
| admin_state_up          | UP      |
| distributed             | True    |
| ha                      | False   |
| name                    | router2 |
| status                  | ACTIVE  |
+-------------------------+---------+</literal_block>
                    </list_item>
                    <list_item>
                        <paragraph>On each compute node, verify creation of a <literal>qrouter</literal> namespace with
                            the same ID.</paragraph>
                        <paragraph>Compute node 1:</paragraph>
                        <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve"># ip netns
qrouter-78d2f628-137c-4f26-a257-25fc20f203c1</literal_block>
                        <paragraph>Compute node 2:</paragraph>
                        <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve"># ip netns
qrouter-78d2f628-137c-4f26-a257-25fc20f203c1</literal_block>
                    </list_item>
                    <list_item>
                        <paragraph>On the network node, verify creation of the <literal>snat</literal> and <literal>qrouter</literal>
                            namespaces with the same ID.</paragraph>
                        <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve"># ip netns
snat-78d2f628-137c-4f26-a257-25fc20f203c1
qrouter-78d2f628-137c-4f26-a257-25fc20f203c1</literal_block>
                        <note>
                            <paragraph>The namespace for router 1 from <reference internal="True" refuri="deploy-ovs-selfservice#deploy-ovs-selfservice"><inline classes="std std-ref">Open vSwitch: Self-service networks</inline></reference> should
                                also appear on network node 1 because of creation prior to enabling
                                distributed routing.</paragraph>
                        </note>
                    </list_item>
                    <list_item>
                        <paragraph>Launch an instance with an interface on the additional self-service network.
                            For example, a CirrOS image using flavor ID 1.</paragraph>
                        <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ openstack server create --flavor 1 --image cirros --nic net-id=NETWORK_ID selfservice-instance2</literal_block>
                        <paragraph>Replace <literal>NETWORK_ID</literal> with the ID of the additional self-service
                            network.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Determine the IPv4 and IPv6 addresses of the instance.</paragraph>
                        <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ openstack server list
+--------------------------------------+-----------------------+--------+---------------------------------------------------------------------------+
| ID                                   | Name                  | Status | Networks                                                                  |
+--------------------------------------+-----------------------+--------+---------------------------------------------------------------------------+
| bde64b00-77ae-41b9-b19a-cd8e378d9f8b | selfservice-instance2 | ACTIVE | selfservice2=fd00:192:0:2:f816:3eff:fe71:e93e, 192.0.2.4                  |
+--------------------------------------+-----------------------+--------+---------------------------------------------------------------------------+</literal_block>
                    </list_item>
                    <list_item>
                        <paragraph>Create a floating IPv4 address on the provider network.</paragraph>
                        <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ openstack floating ip create provider1
+-------------+--------------------------------------+
| Field       | Value                                |
+-------------+--------------------------------------+
| fixed_ip    | None                                 |
| id          | 0174056a-fa56-4403-b1ea-b5151a31191f |
| instance_id | None                                 |
| ip          | 203.0.113.17                         |
| pool        | provider1                            |
+-------------+--------------------------------------+</literal_block>
                    </list_item>
                    <list_item>
                        <paragraph>Associate the floating IPv4 address with the instance.</paragraph>
                        <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve">$ openstack server add floating ip selfservice-instance2 203.0.113.17</literal_block>
                        <note>
                            <paragraph>This command provides no output.</paragraph>
                        </note>
                    </list_item>
                    <list_item>
                        <paragraph>On the compute node containing the instance, verify creation of the
                            <literal>fip</literal> namespace with the same ID as the provider network.</paragraph>
                        <literal_block highlight_args="{}" language="console" linenos="False" xml:space="preserve"># ip netns
fip-4bfa3075-b4b2-4f7d-b88e-df1113942d43</literal_block>
                    </list_item>
                </enumerated_list>
            </section>
        </section>
        <section ids="network-traffic-flow" names="network\ traffic\ flow">
            <title>Network traffic flow</title>
            <paragraph>The following sections describe the flow of network traffic in several
                common scenarios. <emphasis>North-south</emphasis> network traffic travels between an instance
                and external network such as the Internet. <emphasis>East-west</emphasis> network traffic
                travels between instances on the same or different networks. In all scenarios,
                the physical network infrastructure handles switching and routing among
                provider networks and external networks such as the Internet. Each case
                references one or more of the following components:</paragraph>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>Provider network (VLAN)</paragraph>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph>VLAN ID 101 (tagged)</paragraph>
                        </list_item>
                    </bullet_list>
                </list_item>
                <list_item>
                    <paragraph>Self-service network 1 (VXLAN)</paragraph>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph>VXLAN ID (VNI) 101</paragraph>
                        </list_item>
                    </bullet_list>
                </list_item>
                <list_item>
                    <paragraph>Self-service network 2 (VXLAN)</paragraph>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph>VXLAN ID (VNI) 102</paragraph>
                        </list_item>
                    </bullet_list>
                </list_item>
                <list_item>
                    <paragraph>Self-service router</paragraph>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph>Gateway on the provider network</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>Interface on self-service network 1</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>Interface on self-service network 2</paragraph>
                        </list_item>
                    </bullet_list>
                </list_item>
                <list_item>
                    <paragraph>Instance 1</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Instance 2</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>This section only contains flow scenarios that benefit from distributed
                virtual routing or that differ from conventional operation. For other
                flow scenarios, see <reference internal="True" refuri="deploy-ovs-selfservice#deploy-ovs-selfservice-networktrafficflow"><inline classes="std std-ref">Network traffic flow</inline></reference>.</paragraph>
            <section ids="north-south-scenario-1-instance-with-a-fixed-ip-address" names="north-south\ scenario\ 1:\ instance\ with\ a\ fixed\ ip\ address">
                <title>North-south scenario 1: Instance with a fixed IP address</title>
                <paragraph>Similar to <reference internal="True" refuri="deploy-ovs-selfservice#deploy-ovs-selfservice-networktrafficflow-ns1"><inline classes="std std-ref">North-south scenario 1: Instance with a fixed IP address</inline></reference>, except
                    the router namespace on the network node becomes the SNAT namespace. The
                    network node still contains the router namespace, but it serves no purpose
                    in this case.</paragraph>
                <image alt="High-availability using Open vSwitch with DVR - network traffic flow - north/south scenario 1" candidates="{'*': 'admin/figures/deploy-ovs-ha-dvr-flowns1.png'}" uri="admin/figures/deploy-ovs-ha-dvr-flowns1.png"></image>
            </section>
            <section ids="north-south-scenario-2-instance-with-a-floating-ipv4-address" names="north-south\ scenario\ 2:\ instance\ with\ a\ floating\ ipv4\ address">
                <title>North-south scenario 2: Instance with a floating IPv4 address</title>
                <paragraph>For instances with a floating IPv4 address using a self-service network
                    on a distributed router, the compute node containing the instance performs
                    SNAT on north-south traffic passing from the instance to external networks
                    such as the Internet and DNAT on north-south traffic passing from external
                    networks to the instance. Floating IP addresses and NAT do not apply to
                    IPv6. Thus, the network node routes IPv6 traffic in this scenario.
                    north-south traffic passing between the instance and external networks
                    such as the Internet.</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>Instance 1 resides on compute node 1 and uses self-service network 1.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>A host on the Internet sends a packet to the instance.</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>The following steps involve the compute node:</paragraph>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>The physical network infrastructure (1) forwards the packet to the
                            provider physical network interface (2).</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The provider physical network interface forwards the packet to the
                            OVS provider bridge provider network port (3).</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The OVS provider bridge swaps actual VLAN tag 101 with the internal
                            VLAN tag.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The OVS provider bridge <literal>phy-br-provider</literal> port (4) forwards the
                            packet to the OVS integration bridge <literal>int-br-provider</literal> port (5).</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The OVS integration bridge port for the provider network (6) removes
                            the internal VLAN tag and forwards the packet to the provider network
                            interface (7) in the floating IP namespace. This interface responds
                            to any ARP requests for the instance floating IPv4 address.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The floating IP namespace routes the packet (8) to the distributed
                            router namespace (9) using a pair of IP addresses on the DVR internal
                            network. This namespace contains the instance floating IPv4 address.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The router performs DNAT on the packet which changes the destination
                            IP address to the instance IP address on the self-service network via
                            the self-service network interface (10).</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The router forwards the packet to the OVS integration bridge port for
                            the self-service network (11).</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The OVS integration bridge adds an internal VLAN tag to the packet.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The OVS integration bridge removes the internal VLAN tag from the packet.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The OVS integration bridge security group port (12) forwards the packet
                            to the security group bridge OVS port (13) via <literal>veth</literal> pair.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Security group rules (14) on the security group bridge handle firewalling
                            and connection tracking for the packet.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The security group bridge instance port (15) forwards the packet to the
                            instance interface (16) via <literal>veth</literal> pair.</paragraph>
                    </list_item>
                </enumerated_list>
                <image alt="High-availability using Open vSwitch with DVR - network traffic flow - north/south scenario 2" candidates="{'*': 'admin/figures/deploy-ovs-ha-dvr-flowns2.png'}" uri="admin/figures/deploy-ovs-ha-dvr-flowns2.png"></image>
                <note>
                    <paragraph>Egress traffic follows similar steps in reverse, except SNAT changes
                        the source IPv4 address of the packet to the floating IPv4 address.</paragraph>
                </note>
            </section>
            <section ids="east-west-scenario-1-instances-on-different-networks-on-the-same-router" names="east-west\ scenario\ 1:\ instances\ on\ different\ networks\ on\ the\ same\ router">
                <title>East-west scenario 1: Instances on different networks on the same router</title>
                <paragraph>Instances with fixed IPv4/IPv6 address or floating IPv4 address on the
                    same compute node communicate via router on the compute node. Instances
                    on different compute nodes communicate via an instance of the router on
                    each compute node.</paragraph>
                <note>
                    <paragraph>This scenario places the instances on different compute nodes to
                        show the most complex situation.</paragraph>
                </note>
                <paragraph>The following steps involve compute node 1:</paragraph>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>The instance interface (1) forwards the packet to the security group
                            bridge instance port (2) via <literal>veth</literal> pair.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Security group rules (3) on the security group bridge handle firewalling
                            and connection tracking for the packet.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The security group bridge OVS port (4) forwards the packet to the OVS
                            integration bridge security group port (5) via <literal>veth</literal> pair.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The OVS integration bridge adds an internal VLAN tag to the packet.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The OVS integration bridge port for self-service network 1 (6) removes the
                            internal VLAN tag and forwards the packet to the self-service network 1
                            interface in the distributed router namespace (6).</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The distributed router namespace routes the packet to self-service network
                            2.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The self-service network 2 interface in the distributed router namespace
                            (8) forwards the packet to the OVS integration bridge port for
                            self-service network 2 (9).</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The OVS integration bridge adds an internal VLAN tag to the packet.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The OVS integration bridge exchanges the internal VLAN tag for an
                            internal tunnel ID.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The OVS integration bridge <literal>patch-tun</literal> port (10) forwards the packet
                            to the OVS tunnel bridge <literal>patch-int</literal> port (11).</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The OVS tunnel bridge (12) wraps the packet using VNI 101.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The underlying physical interface (13) for overlay networks forwards
                            the packet to compute node 2 via the overlay network (14).</paragraph>
                    </list_item>
                </enumerated_list>
                <paragraph>The following steps involve compute node 2:</paragraph>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>The underlying physical interface (15) for overlay networks forwards
                            the packet to the OVS tunnel bridge (16).</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The OVS tunnel bridge unwraps the packet and adds an internal tunnel ID
                            to it.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The OVS tunnel bridge exchanges the internal tunnel ID for an internal
                            VLAN tag.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The OVS tunnel bridge <literal>patch-int</literal> patch port (17) forwards the packet
                            to the OVS integration bridge <literal>patch-tun</literal> patch port (18).</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The OVS integration bridge removes the internal VLAN tag from the packet.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The OVS integration bridge security group port (19) forwards the packet
                            to the security group bridge OVS port (20) via <literal>veth</literal> pair.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Security group rules (21) on the security group bridge handle firewalling
                            and connection tracking for the packet.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The security group bridge instance port (22) forwards the packet to the
                            instance 2 interface (23) via <literal>veth</literal> pair.</paragraph>
                    </list_item>
                </enumerated_list>
                <note>
                    <paragraph>Routing between self-service networks occurs on the compute node containing
                        the instance sending the packet. In this scenario, routing occurs on
                        compute node 1 for packets from instance 1 to instance 2 and on compute
                        node 2 for packets from instance 2 to instance 1.</paragraph>
                </note>
                <image alt="High-availability using Open vSwitch with DVR - network traffic flow - east/west scenario 2" candidates="{'*': 'admin/figures/deploy-ovs-ha-dvr-flowew1.png'}" uri="admin/figures/deploy-ovs-ha-dvr-flowew1.png"></image>
            </section>
        </section>
    </section>
</document>

<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/neutron/doc/source/admin/intro-nat.rst">
    <target refid="intro-nat"></target>
    <section ids="network-address-translation intro-nat" names="network\ address\ translation intro-nat">
        <title>Network address translation</title>
        <paragraph><emphasis>Network Address Translation</emphasis> (NAT) is a process for modifying the source or
            destination addresses in the headers of an IP packet while the packet is
            in transit. In general, the sender and receiver applications are not aware that
            the IP packets are being manipulated.</paragraph>
        <paragraph>NAT is often implemented by routers, and so we will refer to the host
            performing NAT as a <emphasis>NAT router</emphasis>. However, in OpenStack deployments it
            is typically Linux servers that implement the NAT functionality, not
            hardware routers. These servers use the
            <reference name="iptables" refuri="https://www.netfilter.org/projects/iptables/index.html">iptables</reference><target ids="iptables" names="iptables" refuri="https://www.netfilter.org/projects/iptables/index.html"></target>
            software package to implement the NAT functionality.</paragraph>
        <paragraph>There are multiple variations of NAT, and here we describe three kinds
            commonly found in OpenStack deployments.</paragraph>
        <section ids="snat" names="snat">
            <title>SNAT</title>
            <paragraph>In <emphasis>Source Network Address Translation</emphasis> (SNAT), the NAT router modifies the IP
                address of the sender in IP packets. SNAT is commonly used to enable
                hosts with <emphasis>private addresses</emphasis> to communicate with servers on the
                public Internet.</paragraph>
            <paragraph><reference name="RFC 5737" refuri="https://tools.ietf.org/rfc/rfc5737">RFC 5737</reference><target ids="rfc-5737" names="rfc\ 5737" refuri="https://tools.ietf.org/rfc/rfc5737"></target>
                reserves the following three subnets as private addresses:</paragraph>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph><literal>192.0.2.0/24</literal></paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>198.51.100.0/24</literal></paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>203.0.113.0/24</literal></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>These IP addresses are not publicly routable, meaning that a host on the public
                Internet can not send an IP packet to any of these addresses. Private IP
                addresses are widely used in both residential and corporate environments.</paragraph>
            <paragraph>Often, an application running on a host with a private IP address will need to
                connect to a server on the public Internet. An example is a user
                who wants to access a public website such as www.openstack.org. If the IP
                packets reach the web server at www.openstack.org with a private IP address as
                the source, then the web server cannot send packets back to the sender.</paragraph>
            <paragraph>SNAT solves this problem by modifying the source IP address to an IP address
                that is routable on the public Internet. There are different variations of
                SNAT; in the form that OpenStack deployments use, a NAT router on the path
                between the sender and receiver replaces the packet’s source IP
                address with the router’s public IP address. The router also modifies
                the source TCP or UDP port to another value, and the router maintains
                a record of the sender’s true IP address and port, as well as the
                modified IP address and port.</paragraph>
            <paragraph>When the router receives a packet with the matching IP address and port, it
                translates these back to the private IP address and port, and forwards the
                packet along.</paragraph>
            <paragraph>Because the NAT router modifies ports as well as IP addresses, this
                form of SNAT is sometimes referred to as <emphasis>Port Address Translation</emphasis>
                (PAT). It is also sometimes referred to as <emphasis>NAT overload</emphasis>.</paragraph>
            <paragraph>OpenStack uses SNAT to enable applications running inside of instances to
                connect out to the public Internet.</paragraph>
        </section>
        <section ids="dnat" names="dnat">
            <title>DNAT</title>
            <paragraph>In <emphasis>Destination Network Address Translation</emphasis> (DNAT), the NAT router
                modifies the IP address of the destination in IP packet headers.</paragraph>
            <paragraph>OpenStack uses DNAT to route packets from instances to the OpenStack
                metadata service. Applications running inside of instances access the
                OpenStack metadata service by making HTTP GET requests to a web server
                with IP address 169.254.169.254. In an OpenStack deployment, there is
                no host with this IP address. Instead, OpenStack uses DNAT to change
                the destination IP of these packets so they reach the network
                interface that a metadata service is listening on.</paragraph>
        </section>
        <section ids="one-to-one-nat" names="one-to-one\ nat">
            <title>One-to-one NAT</title>
            <paragraph>In <emphasis>one-to-one NAT</emphasis>, the NAT router maintains a one-to-one mapping
                between private IP addresses and public IP addresses. OpenStack uses
                one-to-one NAT to implement floating IP addresses.</paragraph>
        </section>
    </section>
</document>

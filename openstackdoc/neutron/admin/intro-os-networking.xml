<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.13.1 -->
<document source="/home/fbaumanis/openstack/soc8_test/openstack_repo/neutron/doc/source/admin/intro-os-networking.rst">
    <target refid="intro-os-networking"></target>
    <section ids="openstack-networking intro-os-networking" names="openstack\ networking intro-os-networking">
        <title>OpenStack Networking</title>
        <paragraph>OpenStack Networking allows you to create and manage network objects,
            such as networks, subnets, and ports, which other OpenStack services
            can use. Plug-ins can be implemented to accommodate different
            networking equipment and software, providing flexibility to OpenStack
            architecture and deployment.</paragraph>
        <paragraph>The Networking service, code-named neutron, provides an API that lets you
            define network connectivity and addressing in the cloud. The Networking
            service enables operators to leverage different networking technologies
            to power their cloud networking. The Networking service also provides an
            API to configure and manage a variety of network services ranging from L3
            forwarding and Network Address Translation (NAT) to load
            balancing, perimeter firewalls, and virtual private networks.</paragraph>
        <paragraph>It includes the following components:</paragraph>
        <definition_list>
            <definition_list_item>
                <term>API server</term>
                <definition>
                    <paragraph>The OpenStack Networking API includes support for Layer 2 networking
                        and IP Address Management (IPAM), as well as an extension for a Layer 3
                        router construct that enables routing between Layer 2 networks and gateways
                        to external networks. OpenStack Networking includes a growing list of
                        plug-ins that enable interoperability with various commercial and open
                        source network technologies, including routers, switches, virtual
                        switches and software-defined networking (SDN) controllers.</paragraph>
                </definition>
            </definition_list_item>
            <definition_list_item>
                <term>OpenStack Networking plug-in and agents</term>
                <definition>
                    <paragraph>Plugs and unplugs ports, creates networks or subnets, and provides
                        IP addressing. The chosen plug-in and agents differ depending on the
                        vendor and technologies used in the particular cloud. It is
                        important to mention that only one plug-in can be used at a time.</paragraph>
                </definition>
            </definition_list_item>
            <definition_list_item>
                <term>Messaging queue</term>
                <definition>
                    <paragraph>Accepts and routes RPC requests between agents to complete API operations.
                        Message queue is used in the ML2 plug-in for RPC between the neutron
                        server and neutron agents that run on each hypervisor, in the ML2
                        mechanism drivers for Open vSwitch and Linux bridge.</paragraph>
                </definition>
            </definition_list_item>
        </definition_list>
        <section ids="concepts" names="concepts">
            <title>Concepts</title>
            <paragraph>To configure rich network topologies, you can create and configure networks
                and subnets and instruct other OpenStack services like Compute to attach
                virtual devices to ports on these networks.
                OpenStack Compute is a prominent consumer of OpenStack Networking to provide
                connectivity for its instances.
                In particular, OpenStack Networking supports each project having multiple
                private networks and enables projects to choose their own IP addressing scheme,
                even if those IP addresses overlap with those that other projects use. There
                are two types of network, project and provider networks. It is possible to
                share any of these types of networks among projects as part of the network
                creation process.</paragraph>
            <target refid="intro-os-networking-provider"></target>
            <section ids="provider-networks intro-os-networking-provider" names="provider\ networks intro-os-networking-provider">
                <title>Provider networks</title>
                <paragraph>Provider networks offer layer-2 connectivity to instances with optional
                    support for DHCP and metadata services. These networks connect, or map, to
                    existing layer-2 networks in the data center, typically using VLAN (802.1q)
                    tagging to identify and separate them.</paragraph>
                <paragraph>Provider networks generally offer simplicity, performance, and reliability
                    at the cost of flexibility. By default only administrators can create or
                    update provider networks because they require configuration of physical
                    network infrastructure. It is possible to change the user who is allowed to
                    create or update provider networks with the following parameters of
                    <literal>policy.json</literal>:</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph><literal>create_network:provider:physical_network</literal></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>update_network:provider:physical_network</literal></paragraph>
                    </list_item>
                </bullet_list>
                <warning>
                    <paragraph>The creation and modification of provider networks enables use of
                        physical network resources, such as VLAN-s. Enable these changes
                        only for trusted projects.</paragraph>
                </warning>
                <paragraph>Also, provider networks only handle layer-2 connectivity for instances, thus
                    lacking support for features such as routers and floating IP addresses.</paragraph>
                <paragraph>In many cases, operators who are already familiar with virtual networking
                    architectures that rely on physical network infrastructure for layer-2,
                    layer-3, or other services can seamlessly deploy the OpenStack Networking
                    service. In particular, provider networks appeal to operators looking to
                    migrate from the Compute networking service (nova-network) to the OpenStack
                    Networking service. Over time, operators can build on this minimal
                    architecture to enable more cloud networking features.</paragraph>
                <paragraph>In general, the OpenStack Networking software components that handle layer-3
                    operations impact performance and reliability the most. To improve performance
                    and reliability, provider networks move layer-3 operations to the physical
                    network infrastructure.</paragraph>
                <paragraph>In one particular use case, the OpenStack deployment resides in a mixed
                    environment with conventional virtualization and bare-metal hosts that use a
                    sizable physical network infrastructure. Applications that run inside the
                    OpenStack deployment might require direct layer-2 access, typically using
                    VLANs, to applications outside of the deployment.</paragraph>
            </section>
            <section ids="routed-provider-networks" names="routed\ provider\ networks">
                <title>Routed provider networks</title>
                <paragraph>Routed provider networks offer layer-3 connectivity to instances. These
                    networks map to existing layer-3 networks in the data center. More
                    specifically, the network maps to multiple layer-2 segments, each of which is
                    essentially a provider network. Each has a router gateway attached to it which
                    routes traffic between them and externally. The Networking service does not
                    provide the routing.</paragraph>
                <paragraph>Routed provider networks offer performance at scale that is difficult to
                    achieve with a plain provider network at the expense of guaranteed layer-2
                    connectivity.</paragraph>
                <paragraph>See <reference internal="True" refuri="config-routed-networks#config-routed-provider-networks"><inline classes="std std-ref">Routed provider networks</inline></reference> for more information.</paragraph>
                <target refid="intro-os-networking-selfservice"></target>
            </section>
            <section ids="self-service-networks intro-os-networking-selfservice" names="self-service\ networks intro-os-networking-selfservice">
                <title>Self-service networks</title>
                <paragraph>Self-service networks primarily enable general (non-privileged) projects
                    to manage networks without involving administrators. These networks are
                    entirely virtual and require virtual routers to interact with provider
                    and external networks such as the Internet. Self-service networks also
                    usually provide DHCP and metadata services to instances.</paragraph>
                <paragraph>In most cases, self-service networks use overlay protocols such as VXLAN
                    or GRE because they can support many more networks than layer-2 segmentation
                    using VLAN tagging (802.1q). Furthermore, VLANs typically require additional
                    configuration of physical network infrastructure.</paragraph>
                <paragraph>IPv4 self-service networks typically use private IP address ranges (RFC1918)
                    and interact with provider networks via source NAT on virtual routers.
                    Floating IP addresses enable access to instances from provider networks
                    via destination NAT on virtual routers. IPv6 self-service networks always
                    use public IP address ranges and interact with provider networks via
                    virtual routers with static routes.</paragraph>
                <paragraph>The Networking service implements routers using a layer-3 agent that typically
                    resides at least one network node. Contrary to provider networks that connect
                    instances to the physical network infrastructure at layer-2, self-service
                    networks must traverse a layer-3 agent. Thus, oversubscription or failure
                    of a layer-3 agent or network node can impact a significant quantity of
                    self-service networks and instances using them. Consider implementing one or
                    more high-availability features to increase redundancy and performance
                    of self-service networks.</paragraph>
                <paragraph>Users create project networks for connectivity within projects. By default,
                    they are fully isolated and are not shared with other projects. OpenStack
                    Networking supports the following types of network isolation and overlay
                    technologies.</paragraph>
                <definition_list>
                    <definition_list_item>
                        <term>Flat</term>
                        <definition>
                            <paragraph>All instances reside on the same network, which can also be shared
                                with the hosts. No VLAN tagging or other network segregation takes place.</paragraph>
                        </definition>
                    </definition_list_item>
                    <definition_list_item>
                        <term>VLAN</term>
                        <definition>
                            <paragraph>Networking allows users to create multiple provider or project networks
                                using VLAN IDs (802.1Q tagged) that correspond to VLANs present in the
                                physical network. This allows instances to communicate with each other
                                across the environment. They can also communicate with dedicated servers,
                                firewalls, load balancers, and other networking infrastructure on the
                                same layer 2 VLAN.</paragraph>
                        </definition>
                    </definition_list_item>
                    <definition_list_item>
                        <term>GRE and VXLAN</term>
                        <definition>
                            <paragraph>VXLAN and GRE are encapsulation protocols that create overlay networks
                                to activate and control communication between compute instances. A
                                Networking router is required to allow traffic to flow outside of the
                                GRE or VXLAN project network. A router is also required to connect
                                directly-connected project networks with external networks, including the
                                Internet. The router provides the ability to connect to instances directly
                                from an external network using floating IP addresses.</paragraph>
                        </definition>
                    </definition_list_item>
                </definition_list>
                <image alt="Project and provider networks" candidates="{'*': 'admin/figures/NetworkTypes.png'}" uri="admin/figures/NetworkTypes.png" width="100%"></image>
            </section>
            <section ids="subnets" names="subnets">
                <title>Subnets</title>
                <paragraph>A block of IP addresses and associated configuration state. This
                    is also known as the native IPAM (IP Address Management) provided by the
                    networking service for both project and provider networks.
                    Subnets are used to allocate IP addresses when new ports are created on a
                    network.</paragraph>
            </section>
            <section ids="subnet-pools" names="subnet\ pools">
                <title>Subnet pools</title>
                <paragraph>End users normally can create subnets with any valid IP addresses without other
                    restrictions. However, in some cases, it is nice for the admin or the project
                    to pre-define a pool of addresses from which to create subnets with automatic
                    allocation.</paragraph>
                <paragraph>Using subnet pools constrains what addresses can be used by requiring that
                    every subnet be within the defined pool. It also prevents address reuse or
                    overlap by two subnets from the same pool.</paragraph>
                <paragraph>See <reference internal="True" refuri="config-subnet-pools#config-subnet-pools"><inline classes="std std-ref">Subnet pools</inline></reference> for more information.</paragraph>
            </section>
            <section ids="ports" names="ports">
                <title>Ports</title>
                <paragraph>A port is a connection point for attaching a single device, such as the NIC
                    of a virtual server, to a virtual network. The port also describes the
                    associated network configuration, such as the MAC and IP addresses to be
                    used on that port.</paragraph>
            </section>
            <section ids="routers" names="routers">
                <title>Routers</title>
                <paragraph>Routers provide virtual layer-3 services such as routing and NAT
                    between self-service and provider networks or among self-service
                    networks belonging to a project. The Networking service uses a
                    layer-3 agent to manage routers via namespaces.</paragraph>
            </section>
            <section ids="security-groups" names="security\ groups">
                <title>Security groups</title>
                <paragraph>Security groups provide a container for virtual firewall rules that control
                    ingress (inbound to instances) and egress (outbound from instances) network
                    traffic at the port level. Security groups use a default deny policy and
                    only contain rules that allow specific traffic. Each port can reference one
                    or more security groups in an additive fashion. The firewall driver
                    translates security group rules to a configuration for the underlying packet
                    filtering technology such as <literal>iptables</literal>.</paragraph>
                <paragraph>Each project contains a <literal>default</literal> security group that allows all egress
                    traffic and denies all ingress traffic. You can change the rules in the
                    <literal>default</literal> security group. If you launch an instance without specifying a
                    security group, the <literal>default</literal> security group automatically applies to it.
                    Similarly, if you create a port without specifying a security group, the
                    <literal>default</literal> security group automatically applies to it.</paragraph>
                <note>
                    <paragraph>If you use the metadata service, removing the default egress rules denies
                        access to TCP port 80 on 169.254.169.254, thus preventing instances from
                        retrieving metadata.</paragraph>
                </note>
                <paragraph>Security group rules are stateful. Thus, allowing ingress TCP port 22 for
                    secure shell automatically creates rules that allow return egress traffic
                    and ICMP error messages involving those TCP connections.</paragraph>
                <paragraph>By default, all security groups contain a series of basic (sanity) and
                    anti-spoofing rules that perform the following actions:</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>Allow egress traffic only if it uses the source MAC and IP addresses
                            of the port for the instance, source MAC and IP combination in
                            <literal>allowed-address-pairs</literal>, or valid MAC address (port or
                            <literal>allowed-address-pairs</literal>) and associated EUI64 link-local IPv6 address.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Allow egress DHCP discovery and request messages that use the source MAC
                            address of the port for the instance and the unspecified IPv4 address
                            (0.0.0.0).</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Allow ingress DHCP and DHCPv6 responses from the DHCP server on the
                            subnet so instances can acquire IP addresses.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Deny egress DHCP and DHCPv6 responses to prevent instances from
                            acting as DHCP(v6) servers.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Allow ingress/egress ICMPv6 MLD, neighbor solicitation, and neighbor
                            discovery messages so instances can discover neighbors and join
                            multicast groups.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Deny egress ICMPv6 router advertisements to prevent instances from acting
                            as IPv6 routers and forwarding IPv6 traffic for other instances.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Allow egress ICMPv6 MLD reports (v1 and v2) and neighbor solicitation
                            messages that use the source MAC address of a particular instance and
                            the unspecified IPv6 address (::). Duplicate address detection (DAD) relies
                            on these messages.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Allow egress non-IP traffic from the MAC address of the port for the
                            instance and any additional MAC addresses in <literal>allowed-address-pairs</literal> on
                            the port for the instance.</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>Although non-IP traffic, security groups do not implicitly allow all ARP
                    traffic. Separate ARP filtering rules prevent instances from using ARP
                    to intercept traffic for another instance. You cannot disable or remove
                    these rules.</paragraph>
                <paragraph>You can disable security groups including basic and anti-spoofing rules
                    by setting the port attribute <literal>port_security_enabled</literal> to <literal>False</literal>.</paragraph>
            </section>
            <section ids="extensions" names="extensions">
                <title>Extensions</title>
                <paragraph>The OpenStack Networking service is extensible. Extensions serve two
                    purposes: they allow the introduction of new features in the API
                    without requiring a version change and they allow the introduction of
                    vendor specific niche functionality. Applications can programmatically
                    list available extensions by performing a GET on the
                    <literal classes="code">/extensions</literal> URI. Note that this is a versioned request; that
                    is, an extension available in one API version might not be available
                    in another.</paragraph>
            </section>
            <section ids="dhcp" names="dhcp">
                <title>DHCP</title>
                <paragraph>The optional DHCP service manages IP addresses for instances on provider
                    and self-service networks. The Networking service implements the DHCP
                    service using an agent that manages <literal>qdhcp</literal> namespaces and the
                    <literal>dnsmasq</literal> service.</paragraph>
            </section>
            <section ids="metadata" names="metadata">
                <title>Metadata</title>
                <paragraph>The optional metadata service provides an API for instances to obtain
                    metadata such as SSH keys.</paragraph>
            </section>
        </section>
        <section ids="service-and-component-hierarchy" names="service\ and\ component\ hierarchy">
            <title>Service and component hierarchy</title>
            <section ids="server" names="server">
                <title>Server</title>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>Provides API, manages database, etc.</paragraph>
                    </list_item>
                </bullet_list>
            </section>
            <section ids="plug-ins" names="plug-ins">
                <title>Plug-ins</title>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>Manages agents</paragraph>
                    </list_item>
                </bullet_list>
            </section>
            <section ids="agents" names="agents">
                <title>Agents</title>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>Provides layer 2/3 connectivity to instances</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Handles physical-virtual network transition</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Handles metadata, etc.</paragraph>
                    </list_item>
                </bullet_list>
                <section ids="layer-2-ethernet-and-switching" names="layer\ 2\ (ethernet\ and\ switching)">
                    <title>Layer 2 (Ethernet and Switching)</title>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph>Linux Bridge</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>OVS</paragraph>
                        </list_item>
                    </bullet_list>
                </section>
                <section ids="layer-3-ip-and-routing" names="layer\ 3\ (ip\ and\ routing)">
                    <title>Layer 3 (IP and Routing)</title>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph>L3</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>DHCP</paragraph>
                        </list_item>
                    </bullet_list>
                </section>
                <section ids="miscellaneous" names="miscellaneous">
                    <title>Miscellaneous</title>
                    <bullet_list bullet="*">
                        <list_item>
                            <paragraph>Metadata</paragraph>
                        </list_item>
                    </bullet_list>
                </section>
            </section>
            <section ids="services" names="services">
                <title>Services</title>
                <section ids="routing-services" names="routing\ services">
                    <title>Routing services</title>
                </section>
                <section ids="vpnaas" names="vpnaas">
                    <title>VPNaaS</title>
                    <paragraph>The Virtual Private Network-as-a-Service (VPNaaS) is a neutron
                        extension that introduces the VPN feature set.</paragraph>
                </section>
                <section ids="lbaas" names="lbaas">
                    <title>LBaaS</title>
                    <paragraph>The Load-Balancer-as-a-Service (LBaaS) API provisions and configures
                        load balancers. The reference implementation is based on the HAProxy
                        software load balancer.</paragraph>
                </section>
                <section ids="fwaas" names="fwaas">
                    <title>FWaaS</title>
                    <paragraph>The Firewall-as-a-Service (FWaaS) API is an experimental API that
                        enables early adopters and vendors to test their networking
                        implementations.</paragraph>
                </section>
            </section>
        </section>
    </section>
</document>

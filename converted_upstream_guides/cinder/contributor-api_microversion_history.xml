<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<section xmlns="http://docbook.org/ns/docbook">
  <title>REST API Version History</title>
  <para>This documents the changes made to the REST API with every
            microversion change. The description for each version should be a
            verbose one which has enough information to be suitable for use in
            user documentation.</para>
  <section>
    <title>3.0</title>
    <para>The 3.0 Cinder API includes all v2 core APIs existing prior to
                    the introduction of microversions.  The /v3 URL is used to call
                    3.0 APIs.
                    This is the initial version of the Cinder API which supports
                    microversions.</para>
    <para>A user can specify a header in the API request:</para>
    <screen>OpenStack-API-Version: volume &lt;version&gt;</screen>
    <para>where <literal>&lt;version&gt;</literal> is any valid api version for this API.</para>
    <para>If no version is specified then the API will behave as if version 3.0
                    was requested.</para>
    <para>The only API change in version 3.0 is versions, i.e.
                    GET <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://localhost:8786/"/>, which now returns information about
                    3.0 and later versions and their respective /v3 endpoints.</para>
    <para>All other 3.0 APIs are functionally identical to version 2.0.</para>
  </section>
  <section>
    <title>3.1</title>
    <para>Added the parameters <literal>protected</literal> and <literal>visibility</literal> to
                    _volume_upload_image requests.</para>
  </section>
  <section>
    <title>3.2</title>
    <para>Change in return value of ‘GET API request’ for fetching cinder volume
                    list on the basis of ‘bootable’ status of volume as filter.</para>
    <para>Before V3.2, ‘GET API request’ to fetch volume list returns non-bootable
                    volumes if bootable filter value is any of the false or False.
                    For any other value provided to this filter, it always returns
                    bootable volume list.</para>
    <para>But in V3.2, this behavior is updated.
                    In V3.2, bootable volume list will be returned for any of the
                    ‘T/True/1/true’ bootable filter values only.
                    Non-bootable volume list will be returned for any of ‘F/False/0/false’
                    bootable filter values.
                    But for any other values passed for bootable filter, it will return
                    “Invalid input received: bootable={filter value}’ error.</para>
  </section>
  <section>
    <title>3.3</title>
    <para>Added /messages API.</para>
  </section>
  <section>
    <title>3.4</title>
    <para>Added the filter parameters <literal>glance_metadata</literal> to
                    list/detail volumes requests.</para>
  </section>
  <section>
    <title>3.5</title>
    <para>Added pagination support to /messages API</para>
  </section>
  <section>
    <title>3.6</title>
    <para>Allowed to set empty description and empty name for consistency
                    group in consisgroup-update operation.</para>
  </section>
  <section>
    <title>3.7</title>
    <para>Added <literal>cluster_name</literal> field to service list/detail.</para>
    <para>Added /clusters endpoint to list/show/update clusters.</para>
    <para>Show endpoint requires the cluster name and optionally the binary as a URL
                    parameter (default is “cinder-volume”).  Returns:</para>
    <screen language="json">{
    "cluster": {
        "created_at": "",
        "disabled_reason": null,
        "last_heartbeat": "",
        "name": "cluster_name",
        "num_down_hosts": 4,
        "num_hosts": 2,
        "state": "up",
        "status": "enabled",
        "updated_at": ""
    }
}</screen>
    <para>Update endpoint allows enabling and disabling a cluster in a similar way to
                    service’s update endpoint, but in the body we must specify the name and
                    optionally the binary (“cinder-volume” is the default) and the disabled
                    reason. Returns:</para>
    <screen language="json">{
    "cluster": {
        "name": "cluster_name",
        "state": "up",
        "status": "enabled",
        "disabled_reason": null
    }
}</screen>
    <para>Index and detail accept filtering by <literal>name</literal>, <literal>binary</literal>, <literal>disabled</literal>,
                    <literal>num_hosts</literal> , <literal>num_down_hosts</literal>, and up/down status (<literal>is_up</literal>) as URL
                    parameters.</para>
    <para>Index endpoint returns:</para>
    <screen language="json">{
    "clusters": [
        {
            "name": "cluster_name",
            "state": "up",
            "status": "enabled"
        }
    ]
 }</screen>
    <para>Detail endpoint returns:</para>
    <screen language="json">{
    "clusters": [
        {
            "created_at": "",
            "disabled_reason": null,
            "last_heartbeat": "",
            "name": "cluster_name",
            "num_down_hosts": 4,
            "num_hosts": 2,
            "state": "up",
            "status": "enabled",
            "updated_at": ""
        }
    ]
}</screen>
  </section>
  <section>
    <title>3.8</title>
    <para>Adds the following resources that were previously in extensions:
                    - os-volume-manage =&gt; /v3/&lt;project_id&gt;/manageable_volumes
                    - os-snapshot-manage =&gt; /v3/&lt;project_id&gt;/manageable_snapshots</para>
  </section>
  <section>
    <title>3.9</title>
    <para>Added backup update interface to change name and description.
                    Returns:</para>
    <screen language="json">{
    "backup": {
        "id": "backup_id",
        "name": "backup_name",
        "links": "backup_link"
    }
}</screen>
  </section>
  <section>
    <title>3.10</title>
    <para>Added the filter parameters <literal>group_id</literal> to
                    list/detail volumes requests.</para>
  </section>
  <section>
    <title>3.11</title>
    <para>Added group types and group specs APIs.</para>
  </section>
  <section>
    <title>3.12</title>
    <para>Added volumes/summary API.</para>
  </section>
  <section>
    <title>3.13</title>
    <para>Added create/delete/update/list/show APIs for generic volume groups.</para>
  </section>
  <section>
    <title>3.14</title>
    <para>Added group snapshots and create group from src APIs.</para>
  </section>
  <section>
    <title>3.15 (Maximum in Newton)</title>
    <para>Added injecting the response’s <literal>Etag</literal> header to avoid the lost update
                    problem with volume metadata.</para>
  </section>
  <section>
    <title>3.16</title>
    <para>os-migrate_volume now accepts <literal>cluster</literal> parameter when we want to migrate a
                    volume to a cluster.  If we pass the <literal>host</literal> parameter for a volume that is
                    in a cluster, the request will be sent to the cluster as if we had requested
                    that specific cluster.  Only <literal>host</literal> or <literal>cluster</literal> can be provided.</para>
    <para>Creating a managed volume also supports the cluster parameter.</para>
  </section>
  <section>
    <title>3.17</title>
    <para>os-snapshot-manage and os-volume-manage now support <literal>cluster</literal> parameter on
                    listings (summary and detailed).  Both location parameters, <literal>cluster</literal> and
                    <literal>host</literal> are exclusive and only one should be provided.</para>
  </section>
  <section>
    <title>3.18</title>
    <para>Added backup project attribute.</para>
  </section>
  <section>
    <title>3.19</title>
    <para>Added reset status actions ‘reset_status’ to group snapshot.</para>
  </section>
  <section>
    <title>3.20</title>
    <para>Added reset status actions ‘reset_status’ to generic volume group.</para>
  </section>
  <section>
    <title>3.21</title>
    <para>Show provider_id in detailed view of a volume for admin.</para>
  </section>
  <section>
    <title>3.22</title>
    <para>Added support to filter snapshot list based on metadata of snapshot.</para>
  </section>
  <section>
    <title>3.23</title>
    <para>Allow passing force parameter to volume delete.</para>
  </section>
  <section>
    <title>3.24</title>
    <para>New API endpoint /workers/cleanup allows triggering cleanup for cinder-volume
                    services.  Meant for cleaning ongoing operations from failed nodes.</para>
    <para>The cleanup will be performed by other services belonging to the same
                    cluster, so at least one of them must be up to be able to do the cleanup.</para>
    <para>Cleanup cannot be triggered during a cloud upgrade.</para>
    <para>If no arguments are provided cleanup will try to issue a clean message for
                    all nodes that are down, but we can restrict which nodes we want to be
                    cleaned using parameters <literal>service_id</literal>, <literal>cluster_name</literal>, <literal>host</literal>,
                    <literal>binary</literal>, and <literal>disabled</literal>.</para>
    <para>Cleaning specific resources is also possible using <literal>resource_type</literal> and
                    <literal>resource_id</literal> parameters.</para>
    <para>We can even force cleanup on nodes that are up with <literal>is_up</literal>, but that’s
                    not recommended and should only used if you know what you are doing.  For
                    example if you know a specific cinder-volume is down even though it’s still
                    not being reported as down when listing the services and you know the cluster
                    has at least another service to do the cleanup.</para>
    <para>API will return a dictionary with 2 lists, one with services that have been
                    issued a cleanup request (<literal>cleaning</literal> key) and the other with services
                    that cannot be cleaned right now because there is no alternative service to
                    do the cleanup in that cluster (<literal>unavailable</literal> key).</para>
    <para>Data returned for each service element in these two lists consist of the
                    <literal>id</literal>, <literal>host</literal>, <literal>binary</literal>, and <literal>cluster_name</literal>.  These are not the
                    services that will be performing the cleanup, but the services that will be
                    cleaned up or couldn’t be cleaned up.</para>
  </section>
  <section>
    <title>3.25</title>
    <para>Add <literal>volumes</literal> field to group list/detail and group show.</para>
  </section>
  <section>
    <title>3.26</title>
    <itemizedlist>
      <listitem>
        <para>New <literal>failover</literal> action equivalent to <literal>failover_host</literal>, but accepting
                            <literal>cluster</literal> parameter as well as the <literal>host</literal> cluster that
                            <literal>failover_host</literal> accepts.</para>
      </listitem>
      <listitem>
        <para><literal>freeze</literal> and <literal>thaw</literal> actions accept <literal>cluster</literal> parameter.</para>
      </listitem>
      <listitem>
        <para>Cluster listing accepts <literal>replication_status</literal>, <literal>frozen</literal> and
                            <literal>active_backend_id</literal> as filters, and returns additional fields for each
                            cluster: <literal>replication_status</literal>, <literal>frozen</literal>, <literal>active_backend_id</literal>.</para>
      </listitem>
    </itemizedlist>
  </section>
  <section>
    <title>3.27 (Maximum in Ocata)</title>
    <para>Added new attachment APIs</para>
  </section>
  <section>
    <title>3.28</title>
    <para>Add filters support to get_pools</para>
  </section>
  <section>
    <title>3.29</title>
    <para>Add filter, sorter and pagination support in group snapshot.</para>
  </section>
  <section>
    <title>3.30</title>
    <para>Support sort snapshots with “name”.</para>
  </section>
  <section>
    <title>3.31</title>
    <para>Add support for configure resource query filters.</para>
  </section>
  <section>
    <title>3.32</title>
    <para>Added <literal>set-log</literal> and <literal>get-log</literal> service actions.</para>
  </section>
  <section>
    <title>3.33</title>
    <para>Add <literal>resource_filters</literal> API to retrieve configured resource filters.</para>
  </section>
  <section>
    <title>3.34</title>
    <para>Add like filter support in <literal>volume</literal>, <literal>backup</literal>, <literal>snapshot</literal>, <literal>message</literal>,
                    <literal>attachment</literal>, <literal>group</literal> and <literal>group-snapshot</literal> list APIs.</para>
  </section>
  <section>
    <title>3.35</title>
    <para>Add <literal>volume-type</literal> filter to Get-Pools API.</para>
  </section>
  <section>
    <title>3.36</title>
    <para>Add metadata to volumes/summary response body.</para>
  </section>
  <section>
    <title>3.37</title>
    <para>Support sort backup by “name”.</para>
  </section>
  <section>
    <title>3.38</title>
    <para>Added enable_replication/disable_replication/failover_replication/
                    list_replication_targets for replication groups (Tiramisu).</para>
  </section>
  <section>
    <title>3.39</title>
    <para>Add <literal>project_id</literal> admin filters support to limits.</para>
  </section>
  <section>
    <title>3.40</title>
    <para>Add volume revert to its latest snapshot support.</para>
  </section>
  <section>
    <title>3.41</title>
    <para>Add <literal>user_id</literal> field to snapshot list/detail and snapshot show.</para>
  </section>
  <section>
    <title>3.42</title>
    <para>Add ability to extend ‘in-use’ volume. User should be aware of the
                    whole environment before using this feature because it’s dependent
                    on several external factors below:</para>
    <procedure>
      <step>
        <para>nova-compute version - needs to be the latest for Pike.</para>
      </step>
      <step>
        <para>only the libvirt compute driver supports this currently.</para>
      </step>
      <step>
        <para>only iscsi and fibre channel volume types are supported on the
                            nova side currently.</para>
      </step>
    </procedure>
    <para>Administrator can disable this ability by updating the
                    <literal>volume:extend_attached_volume</literal> policy rule.  Extend of a resered
                    Volume is NOT allowed.</para>
  </section>
  <section>
    <title>3.43</title>
    <para>Support backup CRUD with metadata.</para>
  </section>
</section>

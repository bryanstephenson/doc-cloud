<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<section xmlns="http://docbook.org/ns/docbook">
  <title>Cinder System Architecture</title>
  <para>The Cinder Block Storage Service is intended to be ran on one or more nodes.</para>
  <para>Cinder uses a sql-based central database that is shared by all Cinder services in the system.  The amount and depth of the data fits into a sql database quite well.  For small deployments this seems like an optimal solution.  For larger deployments, and especially if security is a concern, cinder will be moving towards multiple data stores with some kind of aggregation system.</para>
  <section>
    <title>Components</title>
    <para>Below you will find a brief explanation of the different components.</para>
    <screen><?dbsuse-fo font-size="8pt"?>                                                 /- ( LDAP )
                             [ Auth Manager ] ---
                                    |            \- ( DB )
                                    |
                                    |
                   cinderclient     |
                  /             \   |                   /- [ scheduler ] -- [ volume ] -- ( iSCSI )
[ Web Dashboard ]-               -[ api ] -- &lt; AMQP &gt; --
                  \             /   |                   \- [ backup ]
                   novaclient       |
                                    |
                                    |
                                    |
                                 &lt; REST &gt;</screen>
    <itemizedlist>
      <listitem>
        <para>DB: sql database for data storage. Used by all components (LINKS NOT SHOWN).</para>
      </listitem>
      <listitem>
        <para>Web Dashboard: potential external component that talks to the api.</para>
      </listitem>
      <listitem>
        <para>api: component that receives http requests, converts commands and communicates with other components via the queue or http.</para>
      </listitem>
      <listitem>
        <para>Auth Manager: component responsible for users/projects/and roles.  Can backend to DB or LDAP.  This is not a separate binary, but rather a python class that is used by most components in the system.</para>
      </listitem>
      <listitem>
        <para>scheduler: decides which host gets each volume.</para>
      </listitem>
      <listitem>
        <para>volume: manages dynamically attachable block devices.</para>
      </listitem>
      <listitem>
        <para>backup: manages backups of block storage devices.</para>
      </listitem>
    </itemizedlist>
  </section>
</section>

<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<section xmlns="http://docbook.org/ns/docbook">
  <title>Volume Attach/Detach workflow - V2</title>
  <para>Previously there were six API calls associated with attach/detach of volumes in
            Cinder (3 calls for each operation).  As the projects grew and the
            functionality of <emphasis>simple</emphasis> things like attach/detach evolved things have become
            a bit vague and we have a number of race issues during the calls that
            continually cause us some problems.</para>
  <para>Additionally, the existing code path makes things like multi-attach extremely
            difficult to implement due to no real good tracking mechanism of attachment
            info.</para>
  <para>To try and improve this we’ve proposed a new Attachments Object and API.  Now
            we keep an Attachment record for each attachment that we want to perform as
            opposed to trying to infer the information from the Volume Object.</para>
  <section>
    <title>Attachment Object</title>
    <para>We actually already had a VolumeAttachment Table in the db, however we
                weren’t really using it, or at least using it efficiently. For V2 of attach
                implementation (V3 API) flow we’ll use the Attachment Table (object) as
                the primary handle for managing attachment(s) for a volume.</para>
    <para>In addition, we also introduce the AttachmentSpecs Table which will store the
                connector information for an Attachment so we no longer have the problem of
                lost connector info, or trying to reassemble it.</para>
  </section>
  <section>
    <title>New API and Flow</title>
    <section>
      <title>attachment-create</title>
      <para>
        <literal>`
cinder --os-volume-api-version 3.27 attachment-create &lt;volume-id&gt; &lt;instance-uuid&gt;
`</literal>
      </para>
      <para>The attachment_create call simply creates an empty Attachment record for the
                    specified Volume with an Instance UUID field set.  This is particularly
                    useful for cases like Nova Boot from Volume where Nova hasn’t sent
                    the job to the actual Compute host yet, but needs to make initial preparations
                    to reserve the volume for use, so here we can reserve the volume and indicate
                    that we will be attaching it to &lt;Instance-UUID&gt; in the future.</para>
      <para>Alternatively, the caller may provide a connector in which case the Cinder API
                    will create the attachment and perform the update on the attachment to set the
                    connector info and return the connection data needed to make a connection.</para>
      <para>The attachment_create call can be used in one of two ways:</para>
      <procedure>
        <step>
          <para>Create an empty Attachment object (reserve). In this case the
                            attachment_create call requires an instance_uuid and a volume_uuid,
                            and just creates an empty Attachment object and returns the UUID of
                            Attachment to the caller.</para>
        </step>
        <step>
          <para>Create and complete the Attachment process in one call.  The reserve process
                            is only needed in certain cases, in many cases Nova actually has enough
                            information to do everything in a single call.  Also, non-nova consumers
                            typically don’t require the granularity of a separate reserve at all.</para>
          <para>To perform the complete operation, include the connector data in the
                            attachment_create call and the Cinder API will perform the reserve and
                            initialize the connection in the single request.</para>
        </step>
      </procedure>
      <para>This full usage of attachment-create would be:</para>
      <screen><?dbsuse-fo font-size="8pt"?>usage: cinder --os-volume-api-version 3.27 attachment-create
       &lt;volume&gt;  &lt;instance_uuid&gt; ...

Positional arguments:
&lt;volume&gt;                  Name or ID of volume or volumes to attach.
&lt;instance_uuid&gt;           ID of instance attaching to.

Optional arguments:
--connect &lt;connect&gt;       Make an active connection using provided connector info (True or False).
--initiator &lt;initiator&gt;   iqn of the initiator attaching to. Default=None.
--ip &lt;ip&gt;                 ip of the system attaching to. Default=None.
--host &lt;host&gt;             Name of the host attaching to. Default=None.
--platform &lt;platform&gt;     Platform type. Default=x86_64.
--ostype &lt;ostype&gt;         OS type. Default=linux2.
--multipath &lt;multipath&gt;   Use multipath. Default=False.
--mountpoint &lt;mountpoint&gt; Mountpoint volume will be attached at. Default=None.</screen>
      <para>Returns the connection information for the attachment:</para>
      <screen><?dbsuse-fo font-size="8pt"?>+-------------------+-----------------------------------------------------------------------+
| Property          | Value                                                                 |
+-------------------+-----------------------------------------------------------------------+
| access_mode       | rw                                                                    |
| attachment_id     | 6ab061ad-5c45-48f3-ad9c-bbd3b6275bf2                                  |
| auth_method       | CHAP                                                                  |
| auth_password     | kystSioDKHSV2j9y                                                      |
| auth_username     | hxGUgiWvsS4GqAQcfA78                                                  |
| encrypted         | False                                                                 |
| qos_specs         | None                                                                  |
| target_discovered | False                                                                 |
| target_iqn        | iqn.2010-10.org.openstack:volume-23212c97-5ed7-42d7-b433-dbf8fc38ec35 |
| target_lun        | 0                                                                     |
| target_portal     | 192.168.0.9:3260                                                      |
| volume_id         | 23212c97-5ed7-42d7-b433-dbf8fc38ec35                                  |
+-------------------+-----------------------------------------------------------------------+</screen>
    </section>
    <section>
      <title>attachment-update</title>
      <para>
        <literal>`
cinder --os-volume-api-version 3.27 attachment-update &lt;attachment-id&gt;
`</literal>
      </para>
      <para>Once we have a reserved volume, this CLI can be used to update an attachment for a cinder volume.
                    This call is designed to be more of an attachment completion than anything else.
                    It expects the value of a connector object to notify the driver that the volume is going to be
                    connected and where it’s being connected to. The usage is the following:</para>
      <screen>usage: cinder --os-volume-api-version 3.27 attachment-update
       &lt;attachment-id&gt; ...

Positional arguments:
  &lt;attachment-id&gt;           ID of attachment.

Optional arguments:
  --initiator &lt;initiator&gt;   iqn of the initiator attaching to. Default=None.
  --ip &lt;ip&gt;                 ip of the system attaching to. Default=None.
  --host &lt;host&gt;             Name of the host attaching to. Default=None.
  --platform &lt;platform&gt;     Platform type. Default=x86_64.
  --ostype &lt;ostype&gt;         OS type. Default=linux2.
  --multipath &lt;multipath&gt;   Use multipath. Default=False.
  --mountpoint &lt;mountpoint&gt; Mountpoint volume will be attached at. Default=None.</screen>
    </section>
    <section>
      <title>attachment-delete</title>
      <para>
        <literal>`
cinder --os-volume-api-version 3.27 attachment-delete &lt;attachment-id&gt;
`</literal>
      </para>
    </section>
  </section>
</section>

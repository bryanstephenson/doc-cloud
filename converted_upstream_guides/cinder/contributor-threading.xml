<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<section xmlns="http://docbook.org/ns/docbook">
  <title>Threading model</title>
  <para>All OpenStack services use <emphasis>green thread</emphasis> model of threading, implemented
            through using the Python <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://eventlet.net/">eventlet</link> and
            <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://packages.python.org/greenlet/">greenlet</link> libraries.</para>
  <para>Green threads use a cooperative model of threading: thread context
            switches can only occur when specific eventlet or greenlet library calls are
            made (e.g., sleep, certain I/O calls). From the operating system’s point of
            view, each OpenStack service runs in a single thread.</para>
  <para>The use of green threads reduces the likelihood of race conditions, but does
            not completely eliminate them. In some cases, you may need to use the
            <literal>@utils.synchronized(...)</literal> decorator to avoid races.</para>
  <para>In addition, since there is only one operating system thread, a call that
            blocks that main thread will block the entire process.</para>
  <section>
    <title>Yielding the thread in long-running tasks</title>
    <para>If a code path takes a long time to execute and does not contain any methods
                that trigger an eventlet context switch, the long-running thread will block
                any pending threads.</para>
    <para>This scenario can be avoided by adding calls to the eventlet sleep method
                in the long-running code path. The sleep call will trigger a context switch
                if there are pending threads, and using an argument of 0 will avoid introducing
                delays in the case that there is only a single green thread:</para>
    <screen>from eventlet import greenthread
...
greenthread.sleep(0)</screen>
    <para>In current code, time.sleep(0）does the same thing as greenthread.sleep(0) if
                time module is patched through eventlet.monkey_patch(). To be explicit, we recommend
                contributors use <literal>greenthread.sleep()</literal> instead of <literal>time.sleep()</literal>.</para>
  </section>
  <section>
    <title>MySQL access and eventlet</title>
    <para>There are some MySQL DB API drivers for oslo.db, like <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://wiki.openstack.org/wiki/PyMySQL_evaluation">PyMySQL</link>, MySQL-python
                etc. PyMySQL is the default MySQL DB API driver for oslo.db, and it works well with
                eventlet. MySQL-python uses an external C library for accessing the MySQL database.
                Since eventlet cannot use monkey-patching to intercept blocking calls in a C library,
                queries to the MySQL database using libraries like MySQL-python will block the main
                thread of a service.</para>
    <para>The Diablo release contained a thread-pooling implementation that did not
                block, but this implementation resulted in a <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://bugs.launchpad.net/cinder/+bug/838581">bug</link> and was removed.</para>
    <para>See this <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://lists.launchpad.net/openstack/msg08118.html">mailing list thread</link> for a discussion of this issue, including
                a discussion of the <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://lists.launchpad.net/openstack/msg08217.html">impact on performance</link>.</para>
  </section>
</section>

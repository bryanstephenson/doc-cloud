<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.1">
  <title>Guru Meditation Reports</title>
  <para>Cinder contains a mechanism whereby developers and system administrators can
            generate a report about the state of a running Cinder executable.
            This report is called a <emphasis>Guru Meditation Report</emphasis> (<emphasis>GMR</emphasis> for short).</para>
  <section>
    <title>Generating a GMR</title>
    <para>A <emphasis>GMR</emphasis> can be generated by sending the <emphasis>USR2</emphasis> signal to any Cinder process
                with support (see below).
                The <emphasis>GMR</emphasis> will then output to standard error for that particular process.</para>
    <para>For example, suppose that <literal>cinder-api</literal> has process id <literal>8675</literal>, and was run
                with <literal>2&gt;/var/log/cinder/cinder-api-err.log</literal>.
                Then, <literal>kill -USR2 8675</literal> will trigger the Guru Meditation report to be printed
                to <literal>/var/log/cinder/cinder-api-err.log</literal>.</para>
    <para>There is other way to trigger a generation of report, user should add
                a configuration in Cinder’s conf file:</para>
    <screen>[oslo_reports]
file_event_handler=['The path to a file to watch for changes to trigger '
                    'the reports, instead of signals. Setting this option '
                    'disables the signal trigger for the reports.']
file_event_handler_interval=['How many seconds to wait between polls when '
                             'file_event_handler is set, default value '
                             'is 1']</screen>
    <para>a <emphasis>GMR</emphasis> can be generated by “touch”ing the file which was specified in
                file_event_handler. The <emphasis>GMR</emphasis> will then output to standard error for
                that particular process.</para>
    <para>For example, suppose that <literal>cinder-api</literal> was run with
                <literal>2&gt;/var/log/cinder/cinder-api-err.log</literal>, and the file path is
                <literal>/tmp/guru_report</literal>.
                Then, <literal>touch /tmp/guru_report</literal> will trigger the Guru Meditation report to be
                printed to <literal>/var/log/cinder/cinder-api-err.log</literal>.</para>
  </section>
  <section>
    <title>Structure of a GMR</title>
    <para>The <emphasis>GMR</emphasis> is designed to be extensible; any particular executable may add
                its own sections.  However, the base <emphasis>GMR</emphasis> consists of several sections:</para>
    <variablelist>
      <varlistentry>
        <term>Package</term>
        <listitem>
          <para>Shows information about the package to which this process belongs,
                            including version information</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Threads</term>
        <listitem>
          <para>Shows stack traces and thread ids for each of the threads within this process</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Green Threads</term>
        <listitem>
          <para>Shows stack traces for each of the green threads within this process
                            (green threads don’t have thread ids)</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Configuration</term>
        <listitem>
          <para>Lists all the configuration options currently accessible via the CONF object
                            for the current process</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
  <section>
    <title>Adding Support for GMRs to New Executables</title>
    <para>Adding support for a <emphasis>GMR</emphasis> to a given executable is fairly easy.</para>
    <para>First import the module (currently residing in oslo-incubator), as well as the
                Cinder version module:</para>
    <screen language="python">from oslo_reports import guru_meditation_report as gmr
from cinder import version</screen>
    <para>Then, register any additional sections (optional):</para>
    <screen language="python">TextGuruMeditation.register_section('Some Special Section',
                                    some_section_generator)</screen>
    <para>Finally (under main), before running the “main loop” of the executable
                (usually <literal>service.server(server)</literal> or something similar), register the <emphasis>GMR</emphasis>
                hook:</para>
    <screen language="python">TextGuruMeditation.setup_autorun(version)</screen>
  </section>
  <section>
    <title>Extending the GMR</title>
    <para>As mentioned above, additional sections can be added to the GMR for a
                particular executable.  For more information, see the inline documentation
                about oslo.reports:
                <link xlink:href="http://docs.openstack.org/developer/oslo.reports/">oslo.reports</link></para>
  </section>
</section>

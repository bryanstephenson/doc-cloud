<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.1">
  <title>Horizon Exceptions</title>
  <para>Exceptions raised by the Horizon code and the machinery for handling them.</para>
  <variablelist>
    <varlistentry xml:id="horizon.exceptions.AlreadyExists">
      <term>
        <literal>horizon.exceptions.AlreadyExists</literal>
      </term>
      <listitem>
        <para>API resources tried to create already exists.</para>
      </listitem>
    </varlistentry>
  </variablelist>
  <variablelist>
    <varlistentry xml:id="horizon.exceptions.BadRequest">
      <term>
        <literal>horizon.exceptions.BadRequest</literal>
      </term>
      <listitem>
        <para>Generic error to replace all “BadRequest”-type API errors.</para>
      </listitem>
    </varlistentry>
  </variablelist>
  <variablelist>
    <varlistentry xml:id="horizon.exceptions.ConfigurationError">
      <term>
        <literal>horizon.exceptions.ConfigurationError</literal>
      </term>
      <listitem>
        <para>Exception to be raised when invalid settings have been provided.</para>
      </listitem>
    </varlistentry>
  </variablelist>
  <variablelist>
    <varlistentry xml:id="horizon.exceptions.Conflict">
      <term>
        <literal>horizon.exceptions.Conflict</literal>
      </term>
      <listitem>
        <para>Generic error to replace all “Conflict”-type API errors.</para>
      </listitem>
    </varlistentry>
  </variablelist>
  <variablelist>
    <varlistentry xml:id="horizon.exceptions.GetFileError">
      <term>
        <literal>horizon.exceptions.GetFileError</literal>
      </term>
      <listitem>
        <para>Exception to be raised when the value of get_file is not expected.</para>
        <para>The expected values start with <link xlink:href="https://"/> or <link xlink:href="http://"/>.
                    Otherwise this exception will be raised.</para>
      </listitem>
    </varlistentry>
  </variablelist>
  <variablelist>
    <varlistentry xml:id="horizon.exceptions.HandledException">
      <term>
        <literal>horizon.exceptions.HandledException</literal>
      </term>
      <listitem>
        <para>Used internally to track exceptions that are already handled.</para>
        <para>It is used to track exceptions that have gone through
                    <xref linkend="horizon.exceptions.handle"/> more than once.</para>
      </listitem>
    </varlistentry>
  </variablelist>
  <variablelist>
    <varlistentry xml:id="horizon.exceptions.HorizonException">
      <term>
        <literal>horizon.exceptions.HorizonException</literal>
      </term>
      <listitem>
        <para>Base exception class for distinguishing our own exception classes.</para>
      </listitem>
    </varlistentry>
  </variablelist>
  <variablelist>
    <varlistentry xml:id="horizon.exceptions.HorizonReporterFilter">
      <term>
        <literal>horizon.exceptions.HorizonReporterFilter</literal>
      </term>
      <listitem>
        <para>Error report filter that’s always active, even in DEBUG mode.</para>
      </listitem>
    </varlistentry>
  </variablelist>
  <variablelist>
    <varlistentry xml:id="horizon.exceptions.Http302">
      <term>
        <literal>horizon.exceptions.Http302</literal>
      </term>
      <listitem>
        <para>Exception used to redirect at the middleware level.</para>
        <para>This error class which can be raised from within a handler to cause
                    an early bailout and redirect at the middleware level.</para>
      </listitem>
    </varlistentry>
  </variablelist>
  <variablelist>
    <varlistentry xml:id="horizon.exceptions.MessageFailure">
      <term>
        <literal>horizon.exceptions.MessageFailure</literal>
      </term>
      <listitem>
        <para>Exception raised during message notification.</para>
      </listitem>
    </varlistentry>
  </variablelist>
  <variablelist>
    <varlistentry xml:id="horizon.exceptions.NotAuthenticated">
      <term>
        <literal>horizon.exceptions.NotAuthenticated</literal>
      </term>
      <listitem>
        <para>Raised when a user is trying to make requests and they are not logged in.</para>
        <para>The included <xref linkend="horizon.middleware.HorizonMiddleware"/> catches
                    <literal>NotAuthenticated</literal> and handles it gracefully by displaying an error
                    message and redirecting the user to a login page.</para>
      </listitem>
    </varlistentry>
  </variablelist>
  <variablelist>
    <varlistentry xml:id="horizon.exceptions.NotAuthorized">
      <term>
        <literal>horizon.exceptions.NotAuthorized</literal>
      </term>
      <listitem>
        <para>User tries to access a resource without sufficient permissions.</para>
        <para>Raised whenever a user attempts to access a resource which they do not
                    have permission-based access to (such as when failing the
                    <xref linkend="horizon.decorators.require_perms"/> decorator).</para>
        <para>The included <xref linkend="horizon.middleware.HorizonMiddleware"/> catches
                    <literal>NotAuthorized</literal> and handles it gracefully by displaying an error
                    message and redirecting the user to a login page.</para>
      </listitem>
    </varlistentry>
  </variablelist>
  <variablelist>
    <varlistentry xml:id="horizon.exceptions.NotAvailable">
      <term>
        <literal>horizon.exceptions.NotAvailable</literal>
      </term>
      <listitem>
        <para>Exception to be raised when something is not available.</para>
      </listitem>
    </varlistentry>
  </variablelist>
  <variablelist>
    <varlistentry xml:id="horizon.exceptions.NotFound">
      <term>
        <literal>horizon.exceptions.NotFound</literal>
      </term>
      <listitem>
        <para>Generic error to replace all “Not Found”-type API errors.</para>
      </listitem>
    </varlistentry>
  </variablelist>
  <variablelist>
    <varlistentry xml:id="horizon.exceptions.RecoverableError">
      <term>
        <literal>horizon.exceptions.RecoverableError</literal>
      </term>
      <listitem>
        <para>Generic error to replace any “Recoverable”-type API errors.</para>
      </listitem>
    </varlistentry>
  </variablelist>
  <variablelist>
    <varlistentry xml:id="horizon.exceptions.ServiceCatalogException">
      <term>
        <literal>horizon.exceptions.ServiceCatalogException</literal>
      </term>
      <listitem>
        <para>A requested service is not available in the <literal>ServiceCatalog</literal>.</para>
        <para><literal>ServiceCatalog</literal> is fetched from Keystone.</para>
      </listitem>
    </varlistentry>
  </variablelist>
  <variablelist>
    <varlistentry xml:id="horizon.exceptions.WorkflowError">
      <term>
        <literal>horizon.exceptions.WorkflowError</literal>
      </term>
      <listitem>
        <para>Exception to be raised when something goes wrong in a workflow.</para>
      </listitem>
    </varlistentry>
  </variablelist>
  <variablelist>
    <varlistentry xml:id="horizon.exceptions.WorkflowValidationError">
      <term>
        <literal>horizon.exceptions.WorkflowValidationError</literal>
      </term>
      <listitem>
        <para>Exception raised during workflow validation.</para>
        <para>It is raised if required data is missing,
                    or existing data is not valid.</para>
      </listitem>
    </varlistentry>
  </variablelist>
  <variablelist>
    <varlistentry xml:id="horizon.exceptions.check_message">
      <term>
        <function>horizon.exceptions.check_message</function>
      </term>
      <listitem>
        <para>Checks an exception for given keywords and raises an error if found.</para>
        <para>It raises a new <literal>ActionError</literal> with the desired message if the
                    keywords are found. This allows selective
                    control over API error messages.</para>
      </listitem>
    </varlistentry>
  </variablelist>
  <variablelist>
    <varlistentry xml:id="horizon.exceptions.handle">
      <term>
        <function>horizon.exceptions.handle</function>
      </term>
      <listitem>
        <para>Centralized error handling for Horizon.</para>
        <para>Because Horizon consumes so many different APIs with completely
                    different <literal>Exception</literal> types, it’s necessary to have a centralized
                    place for handling exceptions which may be raised.</para>
        <para>Exceptions are roughly divided into 3 types:</para>
        <procedure>
          <step>
            <para><literal>UNAUTHORIZED</literal>: Errors resulting from authentication or authorization
                            problems. These result in being logged out and sent to the login screen.</para>
          </step>
          <step>
            <para><literal>NOT_FOUND</literal>: Errors resulting from objects which could not be
                            located via the API. These generally result in a user-facing error
                            message, but are otherwise returned to the normal code flow. Optionally
                            a redirect value may be passed to the error handler so users are
                            returned to a different view than the one requested in addition to the
                            error message.</para>
          </step>
          <step>
            <para><literal>RECOVERABLE</literal>: Generic API errors which generate a user-facing message
                            but drop directly back to the regular code flow.</para>
          </step>
        </procedure>
        <para>All other exceptions bubble the stack as normal unless the <literal>ignore</literal>
                    argument is passed in as <literal>True</literal>, in which case only unrecognized
                    errors are bubbled.</para>
        <para>If the exception is not re-raised, an appropriate wrapper exception
                    class indicating the type of exception that was encountered will be
                    returned.</para>
      </listitem>
    </varlistentry>
  </variablelist>
</section>

<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.1" xml:id="tutorials-dashboard">
  <title>Tutorial: Building a Dashboard using Horizon</title>
  <para>This tutorial covers how to use the various components in horizon to build
            an example dashboard and a panel with a tab which has a table containing data
            from the back end.</para>
  <para>As an example, we’ll create a new <literal>My Dashboard</literal> dashboard with a <literal>My Panel</literal>
            panel that has an <literal>Instances Tab</literal> tab. The tab has a table which contains the
            data pulled by the Nova instances API.</para>
  <note>
    <para>This tutorial assumes you have either a <literal>devstack</literal> or
                <literal>openstack</literal> environment up and running.  There are a variety of
                other resources which may be helpful to read first.  For example,
                you may want to start with the <xref linkend="quickstart"/> or the <link xlink:href="https://docs.djangoproject.com/en/dev/intro/tutorial01/">Django
                    tutorial</link>.</para>
  </note>
  <section>
    <title>Creating a dashboard</title>
    <section>
      <title>The quick version</title>
      <para>Horizon provides a custom management command to create a typical base
                    dashboard structure for you. Run the following commands in your Horizon root
                    directory. It generates most of the boilerplate code you need:</para>
      <screen>$ mkdir openstack_dashboard/dashboards/mydashboard

$ tox -e manage -- startdash mydashboard \
  --target openstack_dashboard/dashboards/mydashboard

$ mkdir openstack_dashboard/dashboards/mydashboard/mypanel

$ tox -e manage -- startpanel mypanel \
  --dashboard=openstack_dashboard.dashboards.mydashboard \
  --target=openstack_dashboard/dashboards/mydashboard/mypanel</screen>
      <para>You will notice that the directory <literal>mydashboard</literal> gets automatically
                    populated with the files related to a dashboard and the <literal>mypanel</literal> directory
                    gets automatically populated with the files related to a panel.</para>
    </section>
    <section>
      <title>Structure</title>
      <para>If you use the <literal>tree mydashboard</literal> command to list the <literal>mydashboard</literal>
                    directory in <literal>openstack_dashboard/dashboards</literal> , you will see a directory
                    structure that looks like the following:</para>
      <screen>mydashboard
├── dashboard.py
├── dashboard.pyc
├── __init__.py
├── __init__.pyc
├── mypanel
│   ├── __init__.py
│   ├── panel.py
│   ├── templates
│   │   └── mypanel
│   │       └── index.html
│   ├── tests.py
│   ├── urls.py
│   └── views.py
├── static
│   └── mydashboard
│       ├── css
│       │   └── mydashboard.css
│       └── js
│           └── mydashboard.js
└── templates
    └── mydashboard
        └── base.html</screen>
      <para>For this tutorial, we will not deal with the static directory, or the
                    <literal>tests.py</literal> file. Leave them as they are.</para>
      <para>With the rest of the files and directories in place, we can move on to add our
                    own dashboard.</para>
    </section>
    <section>
      <title>Defining a dashboard</title>
      <para>Open the <literal>dashboard.py</literal> file. You will notice the following code has been
                    automatically generated:</para>
      <screen>from django.utils.translation import ugettext_lazy as _

import horizon


class Mydashboard(horizon.Dashboard):
   name = _("Mydashboard")
   slug = "mydashboard"
   panels = ()           # Add your panels here.
   default_panel = ''    # Specify the slug of the dashboard's default panel.


horizon.register(Mydashboard)</screen>
      <para>If you want the dashboard name to be something else, you can change the <literal>name</literal>
                    attribute in the <literal>dashboard.py</literal> file . For example, you can change it
                    to be <literal>My Dashboard</literal></para>
      <screen>name = _("My Dashboard")</screen>
      <para>A dashboard class will usually contain a <literal>name</literal> attribute (the display name of
                    the dashboard), a <literal>slug</literal> attribute (the internal name that could be referenced
                    by other components), a list of panels, default panel, etc. We will cover how
                    to add a panel in the next section.</para>
    </section>
  </section>
  <section>
    <title>Creating a panel</title>
    <para>We’ll create a panel and call it <literal>My Panel</literal>.</para>
    <section>
      <title>Structure</title>
      <para>As described above, the <literal>mypanel</literal> directory under
                    <literal>openstack_dashboard/dashboards/mydashboard</literal> should look like the following:</para>
      <screen>mypanel
 ├── __init__.py
 ├── models.py
 ├── panel.py
 ├── templates
 │   └── mypanel
 │     └── index.html
 ├── tests.py
 ├── urls.py
 └── views.py</screen>
    </section>
    <section>
      <title>Defining a panel</title>
      <para>The <literal>panel.py</literal> file referenced above has a special meaning.
                    Within a dashboard, any module name listed in the <literal>panels</literal> attribute on the
                    dashboard class will be auto-discovered by looking for the <literal>panel.py</literal> file in
                    a corresponding directory (the details are a bit magical, but have been
                    thoroughly vetted in Django’s admin codebase).</para>
      <para>Open the <literal>panel.py</literal> file, you will have the following auto-generated code:</para>
      <screen>from django.utils.translation import ugettext_lazy as _

import horizon

from openstack_dashboard.dashboards.mydashboard import dashboard


class Mypanel(horizon.Panel):
    name = _("Mypanel")
    slug = "mypanel"


dashboard.Mydashboard.register(Mypanel)</screen>
      <para>If you want the panel name to be something else, you can change the <literal>name</literal>
                    attribute in the <literal>panel.py</literal> file . For example, you can change it to be
                    <literal>My Panel</literal>:</para>
      <screen>name = _("My Panel")</screen>
      <para>Open the <literal>dashboard.py</literal> file again, insert the following code above the
                    <literal>Mydashboard</literal> class. This code defines the <literal>Mygroup</literal> class and adds a panel
                    called <literal>mypanel</literal>:</para>
      <screen>class Mygroup(horizon.PanelGroup):
    slug = "mygroup"
    name = _("My Group")
    panels = ('mypanel',)</screen>
      <para>Modify the <literal>Mydashboard</literal> class to include <literal>Mygroup</literal> and add <literal>mypanel</literal> as
                    the default panel:</para>
      <screen>class Mydashboard(horizon.Dashboard):
   name = _("My Dashboard")
   slug = "mydashboard"
   panels = (Mygroup,)  # Add your panels here.
   default_panel = 'mypanel'  # Specify the slug of the default panel.</screen>
      <para>The completed <literal>dashboard.py</literal> file should look like
                    the following:</para>
      <screen>from django.utils.translation import ugettext_lazy as _

import horizon


class Mygroup(horizon.PanelGroup):
    slug = "mygroup"
    name = _("My Group")
    panels = ('mypanel',)


class Mydashboard(horizon.Dashboard):
    name = _("My Dashboard")
    slug = "mydashboard"
    panels = (Mygroup,)  # Add your panels here.
    default_panel = 'mypanel'  # Specify the slug of the default panel.


horizon.register(Mydashboard)</screen>
    </section>
    <section>
      <title>Tables, Tabs, and Views</title>
      <para>We’ll start with the table, combine that with the tabs, and then build our
                    view from the pieces.</para>
      <section>
        <title>Defining a table</title>
        <para>Horizon provides a <literal>SelfHandlingForm</literal><xref linkend="horizon.tables.DataTable"/> class which simplifies the vast majority of
                        displaying data to an end-user. We’re just going to skim the surface here, but
                        it has a tremendous number of capabilities. Create a <literal>tables.py</literal> file under
                        the <literal>mypanel</literal> directory and add the following code:</para>
        <screen>from django.utils.translation import ugettext_lazy as _

from horizon import tables


class InstancesTable(tables.DataTable):
    name = tables.Column("name", verbose_name=_("Name"))
    status = tables.Column("status", verbose_name=_("Status"))
    zone = tables.Column('availability_zone',
                          verbose_name=_("Availability Zone"))
    image_name = tables.Column('image_name', verbose_name=_("Image Name"))

    class Meta(object):
        name = "instances"
        verbose_name = _("Instances")</screen>
        <para>There are several things going on here… we created a table subclass,
                        and defined four columns that we want to retrieve data and display.
                        Each of those columns defines what attribute it accesses on the instance object
                        as the first argument, and since we like to make everything translatable,
                        we give each column a <literal>verbose_name</literal> that’s marked for translation.</para>
        <para>Lastly, we added a <literal>Meta</literal> class which indicates the meta object that describes
                        the <literal>instances</literal> table.</para>
        <note>
          <para>This is a slight simplification from the reality of how the instance
                            object is actually structured. In reality, accessing other attributes
                            requires an additional step.</para>
        </note>
      </section>
      <section>
        <title>Adding actions to a table</title>
        <para>Horizon provides three types of basic action classes which can be taken
                        on a table’s data:</para>
        <itemizedlist>
          <listitem>
            <para>
              <xref linkend="horizon.tables.Action"/>
            </para>
          </listitem>
          <listitem>
            <para>
              <xref linkend="horizon.tables.LinkAction"/>
            </para>
          </listitem>
          <listitem>
            <para>
              <xref linkend="horizon.tables.FilterAction"/>
            </para>
          </listitem>
        </itemizedlist>
        <para>There are also additional actions which are extensions of the basic Action
                        classes:</para>
        <itemizedlist>
          <listitem>
            <para>
              <xref linkend="horizon.tables.BatchAction"/>
            </para>
          </listitem>
          <listitem>
            <para>
              <xref linkend="horizon.tables.DeleteAction"/>
            </para>
          </listitem>
          <listitem>
            <para>
              <xref linkend="horizon.tables.UpdateAction"/>
              <emphasis role="bold">DEPRECATED</emphasis>
            </para>
          </listitem>
          <listitem>
            <para>
              <xref linkend="horizon.tables.FixedFilterAction"/>
            </para>
          </listitem>
        </itemizedlist>
        <para>Now let’s create and add a filter action to the table. To do so, we will need
                        to edit the <literal>tables.py</literal> file used above. To add a filter action which will
                        only show rows which contain the string entered in the filter field, we
                        must first define the action:</para>
        <screen>class MyFilterAction(tables.FilterAction):
    name = "myfilter"</screen>
        <note>
          <para>The action specified above will default the <literal>filter_type</literal> to be <literal>"query"</literal>.
                            This means that the filter will use the client side table sorter.</para>
        </note>
        <para>Then, we add that action to the table actions for our table.:</para>
        <screen>class InstancesTable:
    class Meta(object):
        table_actions = (MyFilterAction,)</screen>
        <para>The completed <literal>tables.py</literal> file should look like the following:</para>
        <screen>from django.utils.translation import ugettext_lazy as _

from horizon import tables


class MyFilterAction(tables.FilterAction):
    name = "myfilter"


class InstancesTable(tables.DataTable):
    name = tables.Column('name', \
                         verbose_name=_("Name"))
    status = tables.Column('status', \
                           verbose_name=_("Status"))
    zone = tables.Column('availability_zone', \
                         verbose_name=_("Availability Zone"))
    image_name = tables.Column('image_name', \
                               verbose_name=_("Image Name"))

    class Meta(object):
        name = "instances"
        verbose_name = _("Instances")
        table_actions = (MyFilterAction,)</screen>
      </section>
      <section>
        <title>Defining tabs</title>
        <para>So we have a table, ready to receive our data. We could go straight to a view
                        from here, but in this case we’re also going to use horizon’s
                        <xref linkend="horizon.tabs.TabGroup"/> class.</para>
        <para>Create a <literal>tabs.py</literal> file under the <literal>mypanel</literal> directory. Let’s make a tab
                        group which has one tab. The completed code should look like the following:</para>
        <screen>from django.utils.translation import ugettext_lazy as _

from horizon import exceptions
from horizon import tabs

from openstack_dashboard import api
from openstack_dashboard.dashboards.mydashboard.mypanel import tables


class InstanceTab(tabs.TableTab):
    name = _("Instances Tab")
    slug = "instances_tab"
    table_classes = (tables.InstancesTable,)
    template_name = ("horizon/common/_detail_table.html")
    preload = False

    def has_more_data(self, table):
        return self._has_more

    def get_instances_data(self):
        try:
            marker = self.request.GET.get(
                        tables.InstancesTable._meta.pagination_param, None)

            instances, self._has_more = api.nova.server_list(
                self.request,
                search_opts={'marker': marker, 'paginate': True})

            return instances
        except Exception:
            self._has_more = False
            error_message = _('Unable to get instances')
            exceptions.handle(self.request, error_message)

            return []

class MypanelTabs(tabs.TabGroup):
    slug = "mypanel_tabs"
    tabs = (InstanceTab,)
    sticky = True</screen>
        <para>This tab gets a little more complicated. The tab handles data tables (and
                        all their associated features), and it also uses the <literal>preload</literal> attribute to
                        specify that this tab shouldn’t be loaded by default. It will instead be loaded
                        via AJAX when someone clicks on it, saving us on API calls in the vast majority
                        of cases.</para>
        <para>Additionally, the displaying of the table is handled by a reusable template,
                        <literal>horizon/common/_detail_table.html</literal>. Some simple pagination code was added
                        to handle large instance lists.</para>
        <para>Lastly, this code introduces the concept of error handling in horizon.
                        The <xref linkend="horizon.exceptions.handle"/> function is a centralized error
                        handling mechanism that takes all the guess-work and inconsistency out of
                        dealing with exceptions from the API. Use it everywhere.</para>
      </section>
      <section>
        <title>Tying it together in a view</title>
        <para>There are lots of pre-built class-based views in horizon. We try to provide
                        the starting points for all the common combinations of components.</para>
        <para>Open the <literal>views.py</literal> file, the auto-generated code is like the following:</para>
        <screen>from horizon import views


class IndexView(views.APIView):
    # A very simple class-based view...
    template_name = 'mydashboard/mypanel/index.html'

    def get_data(self, request, context, *args, **kwargs):
        # Add data to the context here...
        return context</screen>
        <para>In this case we want a starting view type that works with both tabs and
                        tables… that’d be the <xref linkend="horizon.tabs.TabbedTableView"/> class. It takes
                        the best of the dynamic delayed-loading capabilities tab groups provide and
                        mixes in the actions and AJAX-updating that tables are capable of with almost
                        no work on the user’s end. Change <literal>views.APIView</literal> to be
                        <literal>tabs.TabbedTableView</literal> and add <literal>MypanelTabs</literal> as the tab group class in the
                        <literal>IndexView</literal> class:</para>
        <screen>class IndexView(tabs.TabbedTableView):
    tab_group_class = mydashboard_tabs.MypanelTabs</screen>
        <para>After importing the proper package, the completed <literal>views.py</literal> file  now looks
                        like the following:</para>
        <screen>from horizon import tabs

from openstack_dashboard.dashboards.mydashboard.mypanel \
    import tabs as mydashboard_tabs


class IndexView(tabs.TabbedTableView):
    tab_group_class = mydashboard_tabs.MypanelTabs
    template_name = 'mydashboard/mypanel/index.html'

    def get_data(self, request, context, *args, **kwargs):
        # Add data to the context here...
        return context</screen>
      </section>
    </section>
    <section>
      <title>URLs</title>
      <para>The auto-generated <literal>urls.py</literal> file is like:</para>
      <screen>from django.conf.urls import url

from openstack_dashboard.dashboards.mydashboard.mypanel import views


urlpatterns = [
    url(r'^$', views.IndexView.as_view(), name='index'),
]</screen>
      <section>
        <title>The template</title>
        <para>Open the <literal>index.html</literal> file in the <literal>mydashboard/mypanel/templates/mypanel</literal>
                        directory, the auto-generated code is like the following:</para>
        <screen>{% extends 'base.html' %}
{% load i18n %}
{% block title %}{% trans "Mypanel" %}{% endblock %}

{% block page_header %}
    {% include "horizon/common/_page_header.html" with title=_("Mypanel") %}
{% endblock page_header %}

{% block main %}
{% endblock %}</screen>
        <para>The <literal>main</literal> block must be modified to insert the following code:</para>
        <screen>&lt;div class="row"&gt;
   &lt;div class="col-sm-12"&gt;
   {{ tab_group.render }}
   &lt;/div&gt;
&lt;/div&gt;</screen>
        <para>If you want to change the title of the <literal>index.html</literal> file to be something else,
                        you can change it. For example, change it to be <literal>My Panel</literal> in the
                        <literal>block title</literal> section.  If you want the <literal>title</literal> in the <literal>block page_header</literal>
                        section to be something else, you can change it. For example, change it to be
                        <literal>My Panel</literal>. The updated code could be like:</para>
        <screen>{% extends 'base.html' %}
{% load i18n %}
{% block title %}{% trans "My Panel" %}{% endblock %}

{% block page_header %}
   {% include "horizon/common/_page_header.html" with title=_("My Panel") %}
{% endblock page_header %}

{% block main %}
&lt;div class="row"&gt;
   &lt;div class="col-sm-12"&gt;
   {{ tab_group.render }}
   &lt;/div&gt;
&lt;/div&gt;
{% endblock %}</screen>
        <para>This gives us a custom page title, a header, and renders our tab group provided
                        by the view.</para>
        <para>With all our code in place, the only thing left to do is to integrate it into
                        our OpenStack Dashboard site.</para>
        <note>
          <para>For more information about Django views, URLs and templates, please refer
                            to the <link xlink:href="https://docs.djangoproject.com/en/dev/">Django documentation</link>.</para>
        </note>
      </section>
    </section>
  </section>
  <section>
    <title>Enable and show the dashboard</title>
    <para>In order to make <literal>My Dashboard</literal> show up along with the existing dashboards
                like <literal>Project</literal> or <literal>Admin</literal> on horizon, you need to create a file called
                <literal>_50_mydashboard.py</literal> under <literal>openstack_dashboard/enabled</literal> and add the
                following:</para>
    <screen># The name of the dashboard to be added to HORIZON['dashboards']. Required.
DASHBOARD = 'mydashboard'

# If set to True, this dashboard will not be added to the settings.
DISABLED = False

# A list of applications to be added to INSTALLED_APPS.
ADD_INSTALLED_APPS = [
    'openstack_dashboard.dashboards.mydashboard',
]</screen>
  </section>
  <section>
    <title>Run and check the dashboard</title>
    <para>Everything is in place, now run <literal>Horizon</literal> on the different port:</para>
    <screen>$ tox -e runserver -- 0:9000</screen>
    <para>Go to <literal>http://&lt;your server&gt;:9000</literal> using a browser. After login as an admin
                you should be able see <literal>My Dashboard</literal> shows up at the left side on horizon.
                Click it, <literal>My Group</literal> will expand with <literal>My Panel</literal>. Click on <literal>My Panel</literal>,
                the right side panel will display an <literal>Instances Tab</literal> which has an
                <literal>Instances</literal> table.</para>
    <para>If you don’t see any instance data, you haven’t created any instances yet. Go to
                dashboard <literal>Project</literal> -&gt; <literal>Images</literal>, select a small image, for example,
                <literal>cirros-0.3.1-x86_64-uec</literal> , click <literal>Launch</literal> and enter an <literal>Instance Name</literal>,
                click the button <literal>Launch</literal>. It should create an instance if the OpenStack or
                devstack is correctly set up. Once the creation of an instance is successful, go
                to <literal>My Dashboard</literal> again to check the data.</para>
  </section>
  <section>
    <title>Adding a complex action to a table</title>
    <para>For a more detailed look into adding a table action, one that requires forms for
                gathering data, you can walk through <xref linkend="tutorials-table-actions"/> tutorial.</para>
  </section>
  <section>
    <title>Conclusion</title>
    <para>What you’ve learned here is the fundamentals of how to write interfaces for
                your own project based on the components horizon provides.</para>
    <para>If you have feedback on how this tutorial could be improved, please feel free
                to submit a bug against <literal>Horizon</literal> in
                <link xlink:href="https://bugs.launchpad.net/horizon">launchpad</link>.</para>
  </section>
</section>

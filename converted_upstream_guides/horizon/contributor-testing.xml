<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.1">
  <title>Horizon’s tests and you</title>
  <section>
    <title>How to run the tests</title>
    <para>Because Horizon is composed of both the <literal>horizon</literal> app and the
                <literal>openstack_dashboard</literal> reference project, there are in fact two sets of unit
                tests. While they can be run individually without problem, there is an easier
                way:</para>
    <para>Included at the root of the repository is the <literal>tox.ini</literal> config
                which invokes both sets of tests, and optionally generates analyses on both
                components in the process. <literal>tox</literal> is what Jenkins uses to verify the
                stability of the project, so you should make sure you run it and it passes
                before you submit any pull requests/patches.</para>
    <para>To run all tests:</para>
    <screen>$ tox</screen>
    <para>It’s also possible to run a subset of the tests. Open <literal>tox.ini</literal> in the
                Horizon root directory to see a list of test environments. You can read more
                about tox in general at <link xlink:href="https://tox.readthedocs.io/en/latest/"/>.</para>
    <para>By default running the Selenium tests will open your Firefox browser (you have
                to install it first, else an error is raised), and you will be able to see the
                tests actions:</para>
    <screen>$ tox -e selenium</screen>
    <para>If you want to run the suite headless, without being able to see them (as they
                are ran on Jenkins), you can run the tests:</para>
    <screen>$ tox -e selenium-headless</screen>
    <para>Selenium will use a virtual display in this case, instead of your own. In order
                to run the tests this way you have to install the dependency <literal>xvfb</literal>, like
                this:</para>
    <screen>$ sudo apt-get install xvfb</screen>
    <para>for a Debian OS flavour, or for Fedora/Red Hat flavours:</para>
    <screen>$ sudo yum install xorg-x11-server-Xvfb</screen>
    <para>If you can’t run a virtual display, or would prefer not to, you can use the
                PhantomJS web driver instead:</para>
    <screen>$ tox -e selenium-phantomjs</screen>
    <para>If you need to install PhantomJS, you may do so with <literal>npm</literal> like this:</para>
    <screen>$ npm -g install phantomjs</screen>
    <para>Alternatively, many distributions have system packages for PhantomJS, or
                it can be downloaded from <link xlink:href="http://phantomjs.org/download.html"/>.</para>
  </section>
  <section>
    <title>tox Test Environments</title>
    <para>This is a list of test environments available to be executed by
                <literal>tox -e &lt;name&gt;</literal>.</para>
    <section>
      <title>pep8</title>
      <para>Runs pep8, which is a tool that checks Python code style. You can read more
                    about pep8 at <link xlink:href="https://www.python.org/dev/peps/pep-0008/"/></para>
    </section>
    <section>
      <title>py27</title>
      <para>Runs the Python unit tests against the current default version of Django
                    with Python 2.7 environment. Check <literal>requirements.txt</literal> in horizon
                    repository to know which version of Django is actually used.</para>
      <para>All other dependencies are as defined by the upper-constraints file at
                    <link xlink:href="https://git.openstack.org/cgit/openstack/requirements/plain/upper-constraints.txt"/></para>
      <para>You can run a subset of the tests by passing the test path as an argument to
                    tox:</para>
      <screen>$ tox -e py27 -- openstack_dashboard.dashboards.identity.users.tests</screen>
      <para>The following is more example to run a specific test class and a
                    specific test:</para>
      <screen language="console"><?dbsuse-fo font-size="8pt"?>$ tox -e py27 -- openstack_dashboard.dashboards.identity.users.tests:UsersViewTests
$ tox -e py27 -- openstack_dashboard.dashboards.identity.users.tests:UsersViewTests.test_index</screen>
      <para>You can also pass other arguments. For example, to drop into a live debugger
                    when a test fails you can use:</para>
      <screen>$ tox -e py27 -- --pdb</screen>
    </section>
    <section>
      <title>py27dj18, py27dj19, py27dj110</title>
      <para>Runs the Python unit tests against Django 1.8, Django 1.9 and Django 1.10
                    respectively</para>
    </section>
    <section>
      <title>py35</title>
      <para>Runs the Python unit tests with a Python 3.5 environment.</para>
    </section>
    <section>
      <title>releasenotes</title>
      <para>Outputs Horizons release notes as HTML to <literal>releasenotes/build/html</literal>.</para>
      <para>Also takes an alternative builder as an optional argument, such as
                    <literal>tox -e docs -- &lt;builder&gt;</literal>, which will output to
                    <literal>releasenotes/build/&lt;builder&gt;</literal>. Available builders are listed at
                    <link xlink:href="http://www.sphinx-doc.org/en/latest/builders.html"/></para>
      <para>This environment also runs the documentation style checker <literal>doc8</literal> against
                    RST and YAML files under <literal>releasenotes/source</literal> to keep the documentation
                    style consistent. If you would like to run <literal>doc8</literal> manually, see <emphasis role="bold">docs</emphasis>
                    environment below.</para>
    </section>
    <section>
      <title>npm</title>
      <para>Installs the npm dependencies listed in <literal>package.json</literal> and runs the
                    JavaScript tests. Can also take optional arguments, which will be executed
                    as an npm script following the dependency install, instead of <literal>test</literal>.</para>
      <para>Example:</para>
      <screen>$ tox -e npm -- lintq</screen>
    </section>
    <section>
      <title>docs</title>
      <para>Outputs Horizons documentation as HTML to <literal>doc/build/html</literal>.</para>
      <para>Also takes an alternative builder as an optional argument, such as
                    <literal>tox -e docs -- &lt;builder&gt;</literal>, which will output to <literal>doc/build/&lt;builder&gt;</literal>.
                    Available builders are listed at
                    <link xlink:href="http://www.sphinx-doc.org/en/latest/builders.html"/></para>
      <para>Example:</para>
      <screen>$ tox -e docs -- latexpdf</screen>
      <para>This environment also runs the documentation style checker <literal>doc8</literal> against
                    RST files under <literal>doc/source</literal> to keep the documentation style consistent.
                    If you would like to run <literal>doc8</literal> manually, run:</para>
      <screen language="console"># Activate virtualenv
$ . .tox/docs/bin/activate
$ doc8 doc/source</screen>
    </section>
  </section>
  <section>
    <title>Writing tests</title>
    <para>Horizon uses Django’s unit test machinery (which extends Python’s <literal>unittest2</literal>
                library) as the core of its test suite. As such, all tests for the Python code
                should be written as unit tests. No doctests please.</para>
    <para>In general new code without unit tests will not be accepted, and every bugfix
                <emphasis>must</emphasis> include a regression test.</para>
    <para>For a much more in-depth discussion of testing, see the <xref linkend="topics-testing"/>.</para>
  </section>
</section>

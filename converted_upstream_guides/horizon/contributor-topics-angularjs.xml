<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.1" xml:id="topics-angularjs">
  <title>AngularJS Topic Guide</title>
  <note>
    <para>This guide is a work in progress. It has been uploaded to encourage faster
                reviewing and code development in Angular, and to help the community
                standardize on a set of guidelines. There are notes inline on sections
                that are likely to change soon, and the docs will be updated promptly
                after any changes.</para>
  </note>
  <section>
    <title>Getting Started</title>
    <para>The tooling for AngularJS testing and code linting relies on npm, the
                node package manager, and thus relies on Node.js. While it is not a
                prerequisite to developing with Horizon, it is advisable to install Node.js,
                either through <link xlink:href="https://nodejs.org/download/">downloading</link> or
                <link xlink:href="https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager">via a package manager</link>.</para>
    <para>Once you have npm available on your system, run <literal>npm install</literal> from the
                horizon root directory.</para>
  </section>
  <section xml:id="js-code-style">
    <title>Code Style</title>
    <para>We currently use the <link xlink:href="https://github.com/johnpapa/angular-styleguide">Angular Style Guide</link> by John Papa as reference material.
                When reviewing AngularJS code, it is helpful to link directly to the style
                guide to reinforce a point, e.g.
                <link xlink:href="https://github.com/johnpapa/angular-styleguide#style-y024"/></para>
    <section>
      <title>ESLint</title>
      <para>ESLint is a tool for identifying and reporting on patterns in your JS code, and
                    is part of the automated tests run by Jenkins. You can run ESLint from the
                    horizon root directory with <literal>tox -e npm -- lint</literal>, or alternatively on a
                    specific directory or file with <literal>eslint file.js</literal>.</para>
      <para>Horizon includes a <literal>.eslintrc</literal> in its root directory, that is used by the
                    local tests. An explanation of the options, and details of others you may want
                    to use, can be found in the
                    <link xlink:href="http://eslint.org/docs/user-guide/configuring">ESLint user guide</link>.</para>
    </section>
  </section>
  <section>
    <title>Application Structure</title>
    <para>OpenStack Dashboard is an example of a Horizon-based Angular application. Other
                applications built on the Horizon framework can follow a similar structure. It
                is composed of two key Angular modules:</para>
    <variablelist>
      <varlistentry>
        <term><emphasis role="bold">app.module.js</emphasis> - The root of the application. Defines the modules required by</term>
        <listitem>
          <para>the application, and includes modules from its pluggable dashboards.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><emphasis role="bold">framework.module.js</emphasis> - Reusable Horizon components. It is one of the</term>
        <listitem>
          <para>application dependencies.</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
  <section xml:id="js-file-structure">
    <title>File Structure</title>
    <para>Horizon has three kinds of angular code:</para>
    <procedure>
      <step>
        <para>Specific to one dashboard in the OpenStack Dashboard application</para>
      </step>
      <step>
        <para>Specific to the OpenStack Dashboard application, but reusable by multiple
                        dashboards</para>
      </step>
      <step>
        <para>Reusable by any application based on the Horizon framework</para>
      </step>
    </procedure>
    <para>When adding code to horizon, consider whether it is dashboard-specific or
                should be broken out as a reusable utility or widget.</para>
    <section>
      <title>Code specific to one dashboard</title>
      <para>Code that isn’t shared beyond a single dashboard is placed in
                    <literal>openstack_dashboard/dashboards/mydashboard/static</literal>. Entire dashboards may be
                    enabled or disabled using Horizon’s plugin mechanism. Therefore no dashboards
                    other than <literal>mydashboard</literal> can safely use this code.</para>
      <para>The <literal>openstack_dashboard/dashboards/static</literal> directory structure determines
                    how the code is deployed and matches the module structure.
                    For example:</para>
      <screen>openstack_dashboard/dashboards/identity/static/dashboard/identity/
├── identity.module.js
├── identity.module.spec.js
└── identity.scss</screen>
      <para>Because the code is in <literal>openstack_dashboard/dashboards/identity</literal> we know it
                    is specific to just the <literal>identity</literal> dashboard and not used by any others.</para>
    </section>
    <section>
      <title>Code shared by multiple dashboards</title>
      <para>Views or utilities needed by multiple dashboards are placed in
                    <literal>openstack_dashboard/static/app</literal>. For example:</para>
      <screen>openstack_dashboard/static/app/core/cloud-services/
├── cloud-services.module.js
├── cloud-services.spec.js
├── hz-if-settings.directive.js
└── hz-if-settings.directive.spec.js</screen>
      <para>The <literal>cloud-services</literal> module is used by panels in multiple dashboards. It
                    cannot be placed within <literal>openstack_dashboard/dashboards/mydashboard</literal> because
                    disabling that one dashboard would break others. Therefore, it is included as
                    part of the application <literal>core</literal> module. Code in <literal>app/</literal> is guaranteed to
                    always be present, even if all other dashboards are disabled.</para>
    </section>
    <section>
      <title>Reusable components</title>
      <para>Finally, components that are easily reused by any application are placed in
                    <literal>horizon/static/framework/</literal>. These do not contain URLs or business logic
                    that is specific to any application (even the OpenStack Dashboard application).</para>
      <para>The modal directive <literal>horizon/static/framework/widgets/modal/</literal> is a good
                    example of a reusable component.</para>
    </section>
    <section>
      <title>One folder per component</title>
      <para>Each component should have its own folder, with the code broken up into one JS
                    component per file. (See <link xlink:href="https://github.com/johnpapa/angular-styleguide#single-responsibility">Single Responsibility</link>
                    in the style guide).
                    Each folder may include styling (<literal>*.scss</literal>), as well as templates (<literal>*.html</literal>)
                    and tests (<literal>*.spec.js</literal>).
                    You may also include examples, by appending <literal>.example</literal>.</para>
      <para>For larger components, such as workflows with multiple steps, consider breaking
                    the code down further. For example, the Launch Instance workflow, has one
                    directory per step. See
                    <literal>openstack_dashboard/dashboards/project/static/dashboard/project/workflow/launch-instance/</literal></para>
    </section>
    <section>
      <title>SCSS files</title>
      <para>The top-level SCSS file in <literal>openstack_dashboard/static/app/_app.scss</literal>. It
                    includes any styling that is part of the application <literal>core</literal> and may be
                    reused by multiple dashboards. SCSS files that are specific to a particular
                    dashboard are linked to the application by adding them in that dashboard’s
                    enabled file. For example, <literal>_1920_project_containers_panel.py</literal> is the enabled
                    file for the <literal>Project</literal> dashboard’s <literal>Container</literal> panel and includes:</para>
      <screen>ADD_SCSS_FILES = [
    'dashboard/project/containers/_containers.scss',
]</screen>
      <para>Styling files are hierarchical, and include any direct child SCSS files. For
                    example, <literal>project.scss</literal> would includes the <literal>workflow</literal> SCSS file, which in
                    turn includes any launch instance styling:</para>
      <screen>@import "workflow/workflow";</screen>
      <para>This allows the application to easily include all needed styling, simply by
                    including a dashboard’s top-level SCSS file.</para>
    </section>
  </section>
  <section>
    <title>Module Structure</title>
    <para>Horizon Angular modules use names that map to the source code directory
                structure. This provides namespace isolation for modules and services, which
                makes dependency injection clearer. It also reduces code conflicts where two
                different modules define a module, service or constant of the same name. For
                example:</para>
    <screen>openstack_dashboard/dashboards/identity/static/dashboard/identity/
└── identity.module.js</screen>
    <para>The preferred Angular module name in this example is
                <literal>horizon.dashboard.identity</literal>. The <literal>horizon</literal> part of the module name maps to
                the <literal>static</literal> directory and indicates this is a <literal>horizon</literal> based application.
                <literal>dashboard.identity</literal> maps to folders that are created within <literal>static</literal>. This
                allows a direct mapping between the angular module name of
                <literal>horizon.dashboard.identity</literal> and the source code directory of
                <literal>static\dashboard\identity</literal>.</para>
    <para>Services and constants within these modules should all start with their module
                name to avoid dependency injection collisions. For example:</para>
    <screen>$provide.constant('horizon.dashboard.identity.basePath', path);</screen>
    <para>Directives do not require the module name but are encouraged to begin with the
                <literal>hz</literal> prefix. For example:</para>
    <screen>.directive('hzMagicSearchBar', hzMagicSearchBar);</screen>
    <para>Finally, each module lists its child modules as a dependency. This allows the
                root module to be included by an application, which will automatically define
                all child modules. For example:</para>
    <screen>.module('horizon.framework', [
  'horizon.framework.conf',
  'horizon.framework.util',
  'horizon.framework.widgets'
])</screen>
    <para><literal>horizon.framework</literal> declares a dependency on <literal>horizon.framework.widgets</literal>,
                which declares dependencies on each individual widget. This allows the
                application to access any widget, simply by depending on the top-level
                <literal>horizon.framework</literal> module.</para>
  </section>
  <section>
    <title>Testing</title>
    <procedure>
      <step>
        <para>Open &lt;dev_server_ip:port&gt;/jasmine in a browser. The development server can
                        be run with <literal>tox -e runserver</literal> from the horizon root directory; by
                        default, this will run the development server at <literal>http://localhost:8000</literal>.</para>
      </step>
      <step>
        <para><literal>tox -e npm</literal> from the horizon root directory.</para>
      </step>
    </procedure>
    <para>The code linting job can be run with <literal>tox -e npm -- lint</literal>. If there are many
                warnings, you can also use <literal>tox -e npm -- lintq</literal> to see only errors and
                ignore warnings.</para>
    <para>For more detailed information, see <xref linkend="topics-javascript-testing"/>.</para>
  </section>
  <section>
    <title>Translation (Internationalization and Localization)</title>
    <para>See <xref linkend="making-strings-translatable"/> for information on the translation
                architecture and how to ensure your code is translatable.</para>
  </section>
  <section>
    <title>Creating your own panel</title>
    <note>
      <para>This section will be extended as standard practices are adopted upstream.
                    Currently, it may be useful to look at the Project Images Panel as a
                    complete reference. Since Newton, it is Angular by default (set to True in the
                    ANGULAR_FEATURES dict in <literal>settings.py</literal>).
                    You may track all the changes made to the Image Panel
                    <link xlink:href="https://github.com/openstack/horizon/commits/master/openstack_dashboard/static/app/core/images">here</link></para>
    </note>
    <note>
      <para>Currently, Angular module names must still be manually declared with
                    <literal>ADD_ANGULAR_MODULES</literal>, even when using automatic file discovery.</para>
    </note>
    <para>This section serves as a basic introduction to writing your own panel for
                horizon, using AngularJS. A panel may be included with the plugin system, or it
                may be part of the upstream horizon project.</para>
    <section>
      <title>Upstream</title>
      <para>JavaScript files can be discovered automatically, handled manually, or a mix of
                    the two. Where possible, use the automated mechanism.
                    To use the automatic functionality, add:</para>
      <screen>AUTO_DISCOVER_STATIC_FILES = True</screen>
      <para>to your enabled file (<literal>enabled/&lt;plugin_name&gt;.py</literal>). To make this possible,
                    you need to follow some structural conventions:</para>
      <itemizedlist>
        <listitem>
          <para>Static files should be put in a <literal>static/</literal> folder, which should be found
                            directly under the folder for the dashboard/panel/panel groups Python
                            package.</para>
        </listitem>
        <listitem>
          <para>JS code that defines an Angular module should be in a file with extension of
                            <literal>.module.js</literal>.</para>
        </listitem>
        <listitem>
          <para>JS code for testing should be named with extension of <literal>.mock.js</literal> and of
                            <literal>.spec.js</literal>.</para>
        </listitem>
        <listitem>
          <para>Angular templates should have extension of <literal>.html</literal>.</para>
        </listitem>
      </itemizedlist>
      <para>You can read more about the functionality in the
                    <xref linkend="auto-discover-static-files"/> section of the settings documentation.</para>
      <para>To manually add files, add the following arrays and file paths to the enabled
                    file:</para>
      <screen>ADD_JS_FILES = [
  ...
  'path-to/my-angular-code.js',
  ...
]

ADD_JS_SPEC_FILES = [
  ...
  'path-to/my-angular-code.spec.js',
  ...
]

ADD_ANGULAR_MODULES = [
  ...
  'my.angular.code',
  ...
]</screen>
    </section>
    <section>
      <title>Plugins</title>
      <para>Add a new panel/ panel group/ dashboard (See <xref linkend="tutorials-dashboard"/>).
                    JavaScript file inclusion is the same as the Upstream process.</para>
      <para>To include external stylesheets, you must ensure that <literal>ADD_SCSS_FILES</literal> is
                    defined in your enabled file, and add the relevant filepath, as below:</para>
      <screen>ADD_SCSS_FILES = [
  ...
  'path-to/my-styles.scss',
  ...
]</screen>
      <note>
        <para>We highly recommend using a single SCSS file for your plugin. SCSS supports
                        nesting with @import, so if you have multiple files (i.e. per panel styling)
                        it is best to import them all into one, and include that single file. You can
                        read more in the <link xlink:href="http://sass-lang.com/documentation/file.SASS_REFERENCE.html#import">SASS documentation</link>.</para>
      </note>
    </section>
  </section>
  <section>
    <title>Schema Forms</title>
    <para><link xlink:href="http://json-schema.org/">JSON schemas</link> are used to define model layout and then <link xlink:href="https://github.com/json-schema-form/angular-schema-form/blob/master/docs/index.md">angular-schema-form</link>
                is used to create forms from that schema. Horizon adds some functionality on
                top of that to make things even easier through <literal>ModalFormService</literal> which will
                open a modal with the form inside.</para>
    <para>A very simple example:</para>
    <screen><?dbsuse-fo font-size="8pt"?>var schema = {
  type: "object",
  properties: {
    name: { type: "string", minLength: 2, title: "Name", description: "Name or alias" },
    title: {
      type: "string",
      enum: ['dr','jr','sir','mrs','mr','NaN','dj']
    }
  }
};
var model = {name: '', title: ''};
var config = {
  title: gettext('Create Container'),
  schema: schema,
  form: ['*'],
  model: model
};
ModalFormService.open(config).then(submit);   // returns a promise

function submit() {
  // do something with model.name and model.title
}</screen>
  </section>
</section>

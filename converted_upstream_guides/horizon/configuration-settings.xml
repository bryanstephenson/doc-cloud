<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.1" xml:id="install-settings">
  <title>Settings Reference</title>
  <section>
    <title>Introduction</title>
    <para>Horizon’s settings broadly fall into three categories:</para>
    <itemizedlist>
      <listitem>
        <para><xref linkend="general-settings"/>: this includes visual settings like the modal backdrop
                        style, bug url and theme configuration, as well as settings that affect every
                        service, such as page sizes on API requests.</para>
      </listitem>
      <listitem>
        <para><xref linkend="service-specific-settings"/>: Many services that Horizon consumes, such
                        as Nova and Neutron, don’t advertise their capabilities via APIs, so Horizon
                        carries configuration for operators to enable or disable many items. This
                        section covers all settings that are specific to a single service.</para>
      </listitem>
      <listitem>
        <para><xref linkend="django-settings"/>, which are common to all Django applications. The only
                        ones documented here are those that Horizon alters by default; however, you
                        should read the <link xlink:href="https://docs.djangoproject.com/en/dev/topics/settings/">Django settings documentation</link> to see the other
                        options available to you.</para>
      </listitem>
    </itemizedlist>
    <para>To modify your settings, you have two options:</para>
    <itemizedlist>
      <listitem>
        <para><emphasis role="bold">Preferred:</emphasis> Add <literal>.py</literal> settings snippets to the
                        <literal>openstack_dashboard/local/local_settings.d/</literal> directory. Several example
                        files (appended with <literal>.example</literal>) can be found there. These must start
                        with an underscore, and are evaluated alphabetically, after
                        <literal>local_settings.py</literal>.</para>
      </listitem>
      <listitem>
        <para>Modify your <literal>openstack_dashboard/local/local_settings.py</literal>. There is an
                        file found at <literal>openstack_dashboard/local/local_settings.py.example</literal>.</para>
      </listitem>
    </itemizedlist>
  </section>
  <section xml:id="general-settings">
    <title>General Settings</title>
    <section>
      <title>ANGULAR_FEATURES</title>
      <para>Default:</para>
      <screen language="python">{
    'images_panel': True,
    'flavors_panel': False,
    'users_panel': False,
    'roles_panel': False,
    'domains_panel': False
}</screen>
      <para>A dictionary of currently available AngularJS features. This allows simple
                    toggling of legacy or rewritten features, such as new panels, workflows etc.</para>
      <note>
        <para>If you toggle <literal>domains_panel</literal> to <literal>True</literal>, you also need to enable the
                        setting of <xref linkend="openstack-keystone-default-domain"/> and add
                        <xref linkend="openstack-keystone-default-domain"/> to <xref linkend="rest-api-required-settings"/>.</para>
      </note>
    </section>
    <section>
      <title>API_RESULT_LIMIT</title>
      <para>Default: <literal>1000</literal></para>
      <para>The maximum number of objects (e.g. Swift objects or Glance images) to display
                    on a single page before providing a paging element (a “more” link) to paginate
                    results.</para>
    </section>
    <section>
      <title>API_RESULT_PAGE_SIZE</title>
      <para>Default: <literal>20</literal></para>
      <para>Similar to <literal>API_RESULT_LIMIT</literal>. This setting controls the number of items
                    to be shown per page if API pagination support for this exists.</para>
    </section>
    <section xml:id="available-themes">
      <title>AVAILABLE_THEMES</title>
      <para>Default:</para>
      <screen language="python">AVAILABLE_THEMES = [
     ('default', 'Default', 'themes/default'),
     ('material', 'Material', 'themes/material'),
]</screen>
      <para>This setting tells Horizon which themes to use.</para>
      <para>A list of tuples which define multiple themes. The tuple format is
                    <literal>('{{ theme_name }}', '{{ theme_label }}', '{{ theme_path }}')</literal>.</para>
      <para>The <literal>theme_name</literal> is the name used to define the directory which
                    the theme is collected into, under <literal>/{{ THEME_COLLECTION_DIR }}</literal>.
                    It also specifies the key by which the selected theme is stored in
                    the browser’s cookie.</para>
      <para>The <literal>theme_label</literal> is the user-facing label that is shown in the
                    theme picker.  The theme picker is only visible if more than one
                    theme is configured, and shows under the topnav’s user menu.</para>
      <para>By default, the <literal>theme path</literal> is the directory that will serve as
                    the static root of the theme and the entire contents of the directory
                    is served up at <literal>/{{ THEME_COLLECTION_DIR }}/{{ theme_name }}</literal>.
                    If you wish to include content other than static files in a theme
                    directory, but do not wish that content to be served up, then you
                    can create a sub directory named <literal>static</literal>. If the theme folder
                    contains a sub-directory with the name <literal>static</literal>, then
                    <literal>static/custom/static</literal> will be used as the root for the content
                    served at <literal>/static/custom</literal>.</para>
      <para>The static root of the theme folder must always contain a _variables.scss
                    file and a _styles.scss file.  These must contain or import all the
                    bootstrap and horizon specific variables and styles which are used to style
                    the GUI. For example themes, see: /horizon/openstack_dashboard/themes/</para>
      <para>Horizon ships with two themes configured. ‘default’ is the default theme,
                    and ‘material’ is based on Google’s Material Design.</para>
    </section>
    <section>
      <title>CUSTOM_THEME_PATH</title>
      <para>Default: <literal>"themes/default"</literal></para>
      <para>This setting tells Horizon to use a directory as a custom theme.</para>
      <para>By default, this directory will serve as the static root of the theme
                    and the entire contents of the directory will be served up at
                    <literal>/static/custom</literal>.  If you wish to include content other than static
                    files in a theme directory, but do not wish that content to be served up,
                    then you can create a sub directory named <literal>static</literal>. If the theme folder
                    contains a sub-directory with the name <literal>static</literal>, then
                    <literal>static/custom/static</literal> will be used as the root for the content
                    served at <literal>/static/custom</literal>.</para>
      <para>The static root of the theme folder must always contain a _variables.scss
                    file and a _styles.scss file.  These must contain or import all the
                    bootstrap and horizon specific variables and styles which are used to style
                    the GUI. For example themes, see: /horizon/openstack_dashboard/themes/</para>
      <para>Horizon ships with one alternate theme based on Google’s Material Design.  To
                    use the alternate theme, set your CUSTOM_THEME_PATH to <literal>themes/material</literal>.</para>
    </section>
    <section>
      <title>DEFAULT_THEME</title>
      <para>Default: <literal>"default"</literal></para>
      <para>This setting tells Horizon which theme to use if the user has not
                    yet selected a theme through the theme picker and therefore set the
                    cookie value. This value represents the <literal>theme_name</literal> key that is
                    used from <xref linkend="available-themes"/>.  To use this setting, the theme must
                    also be configured inside of <literal>AVAILABLE_THEMES</literal>. Your default theme
                    must be configured as part of <xref linkend="selectable-themes"/>.  If it is not, then
                    your <literal>DEFAULT_THEME</literal> will default to the first theme in
                    <literal>SELECTABLE_THEMES</literal>.</para>
    </section>
    <section>
      <title>DEFAULT_THEME_PATH</title>
      <para>Default: <literal>"themes/default"</literal></para>
      <para>This setting allows Horizon to collect an additional theme during static
                    collection and be served up via /static/themes/default.  This is useful
                    if CUSTOM_THEME_PATH inherits from another theme (like ‘default’).</para>
      <para>If DEFAULT_THEME_PATH is the same as CUSTOM_THEME_PATH, then collection
                    is skipped and /static/themes will not exist.</para>
    </section>
    <section>
      <title>DISALLOW_IFRAME_EMBED</title>
      <para>Default: <literal>True</literal></para>
      <para>This setting can be used to defend against Clickjacking and prevent Horizon from
                    being embedded within an iframe. Legacy browsers are still vulnerable to a
                    Cross-Frame Scripting (XFS) vulnerability, so this option allows extra security
                    hardening where iframes are not used in deployment. When set to true, a
                    <literal>"frame-buster"</literal> script is inserted into the template header that prevents the
                    web page from being framed and therefore defends against clickjacking.</para>
      <para>For more information see: <link xlink:href="http://tinyurl.com/anticlickjack"/></para>
      <note>
        <para>If your deployment requires the use of iframes, you can set this setting to
                        <literal>False</literal> to exclude the frame-busting code and allow iframe embedding.</para>
      </note>
    </section>
    <section>
      <title>DROPDOWN_MAX_ITEMS</title>
      <para>Default: <literal>30</literal></para>
      <para>This setting sets the maximum number of items displayed in a dropdown.
                    Dropdowns that limit based on this value need to support a way to observe
                    the entire list.</para>
    </section>
    <section>
      <title>FILTER_DATA_FIRST</title>
      <para>Default:</para>
      <screen language="python">{
    'admin.instances': False,
    'admin.images': False,
    'admin.networks': False,
    'admin.routers': False,
    'admin.volumes': False
}</screen>
      <para>If the dict key-value is True, when the view loads, an empty table will be
                    rendered and the user will be asked to provide a search criteria first (in case
                    no search criteria was provided) before loading any data.</para>
      <para>Examples:</para>
      <para>Override the dict:</para>
      <screen language="python">{
    'admin.instances': True,
    'admin.images': True,
    'admin.networks': False,
    'admin.routers': False,
    'admin.volumes': False
}</screen>
      <para>Or, if you want to turn this on for an specific panel/view do:</para>
      <screen language="python">FILTER_DATA_FIRST['admin.instances'] = True</screen>
    </section>
    <section>
      <title>HORIZON_CONFIG</title>
      <para>A dictionary of some Horizon configuration values. These are primarily
                    separated for historic design reasons.</para>
      <para>Default:</para>
      <screen language="python">HORIZON_CONFIG = {
    'user_home': 'openstack_dashboard.views.get_user_home',
    'ajax_queue_limit': 10,
    'auto_fade_alerts': {
        'delay': 3000,
        'fade_duration': 1500,
        'types': [
            'alert-success',
            'alert-info'
        ]
    },
    'bug_url': None,
    'help_url': "https://docs.openstack.org/",
    'exceptions': {
        'recoverable': exceptions.RECOVERABLE,
        'not_found': exceptions.NOT_FOUND,
        'unauthorized': exceptions.UNAUTHORIZED
    },
    'modal_backdrop': 'static',
    'angular_modules': [],
    'js_files': [],
    'js_spec_files': [],
    'external_templates': [],
}</screen>
      <section>
        <title>ajax_poll_interval</title>
        <para>Default: <literal>2500</literal></para>
        <para>How frequently resources in transition states should be polled for updates,
                        expressed in milliseconds.</para>
      </section>
      <section>
        <title>ajax_queue_limit</title>
        <para>Default: <literal>10</literal></para>
        <para>The maximum number of simultaneous AJAX connections the dashboard may try
                        to make. This is particularly relevant when monitoring a large number of
                        instances, volumes, etc. which are all actively trying to update/change state.</para>
      </section>
      <section>
        <title>angular_modules</title>
        <para>Default: <literal>[]</literal></para>
        <para>A list of AngularJS modules to be loaded when Angular bootstraps. These modules
                        are added as dependencies on the root Horizon application <literal>horizon</literal>.</para>
      </section>
      <section>
        <title>auto_fade_alerts</title>
        <para>Default:</para>
        <screen language="python">{
    'delay': 3000,
    'fade_duration': 1500,
    'types': []
}</screen>
        <para>If provided, will auto-fade the alert types specified. Valid alert types
                        include: [‘alert-default’, ‘alert-success’, ‘alert-info’, ‘alert-warning’,
                        ‘alert-danger’]  Can also define the delay before the alert fades and the fade
                        out duration.</para>
      </section>
      <section>
        <title>bug_url</title>
        <para>Default: <literal>None</literal></para>
        <para>If provided, a “Report Bug” link will be displayed in the site header which
                        links to the value of this setting (ideally a URL containing information on
                        how to report issues).</para>
      </section>
      <section>
        <title>disable_password_reveal</title>
        <para>Default: <literal>False</literal></para>
        <para>Setting this to True will disable the reveal button for password fields,
                        including on the login form.</para>
      </section>
      <section>
        <title>exceptions</title>
        <para>Default:</para>
        <screen language="python">{
    'unauthorized': [],
    'not_found': [],
    'recoverable': []
}</screen>
        <para>A dictionary containing classes of exceptions which Horizon’s centralized
                        exception handling should be aware of. Based on these exception categories,
                        Horizon will handle the exception and display a message to the user.</para>
      </section>
      <section>
        <title>help_url</title>
        <para>Default: <literal>None</literal></para>
        <para>If provided, a “Help” link will be displayed in the site header which links
                        to the value of this setting (ideally a URL containing help information).</para>
      </section>
      <section>
        <title>js_files</title>
        <para>Default: <literal>[]</literal></para>
        <para>A list of javascript source files to be included in the compressed set of files
                        that are loaded on every page. This is needed for AngularJS modules that are
                        referenced in <literal>angular_modules</literal> and therefore need to be include in every
                        page.</para>
      </section>
      <section>
        <title>js_spec_files</title>
        <para>Default: <literal>[]</literal></para>
        <para>A list of javascript spec files to include for integration with the Jasmine
                        spec runner. Jasmine is a behavior-driven development framework for testing
                        JavaScript code.</para>
      </section>
      <section>
        <title>modal_backdrop</title>
        <para>Default: <literal>"static"</literal></para>
        <para>Controls how bootstrap backdrop element outside of modals looks and feels.
                        Valid values are <literal>"true"</literal> (show backdrop element outside the modal, close
                        the modal after clicking on backdrop), <literal>"false"</literal> (do not show backdrop
                        element, do not close the modal after clicking outside of it) and <literal>"static"</literal>
                        (show backdrop element outside the modal, do not close the modal after
                        clicking on backdrop).</para>
      </section>
      <section>
        <title>password_autocomplete</title>
        <para>Default: <literal>"off"</literal></para>
        <para>Controls whether browser autocompletion should be enabled on the login form.
                        Valid values are <literal>"on"</literal> and <literal>"off"</literal>.</para>
      </section>
      <section>
        <title>password_validator</title>
        <para>Default:</para>
        <screen language="python">{
    'regex': '.*',
    'help_text': _("Password is not accepted")
}</screen>
        <para>A dictionary containing a regular expression which will be used for password
                        validation and help text which will be displayed if the password does not
                        pass validation. The help text should describe the password requirements if
                        there are any.</para>
        <para>This setting allows you to set rules for passwords if your organization
                        requires them.</para>
      </section>
      <section>
        <title>simple_ip_management</title>
        <para>Default: <literal>True</literal></para>
        <para>Enable or disable simplified floating IP address management.</para>
        <para>“Simple” floating IP address management means that the user does not ever have
                        to select the specific IP addresses they wish to use, and the process of
                        allocating an IP and assigning it to an instance is one-click.</para>
        <para>The “advanced” floating IP management allows users to select the floating IP
                        pool from which the IP should be allocated and to select a specific IP address
                        when associating one with an instance.</para>
        <note>
          <para>Currently “simple” floating IP address management is not compatible with
                            Neutron. There are two reasons for this. First, Neutron does not support
                            the default floating IP pool at the moment. Second, a Neutron floating IP
                            can be associated with each VIF and we need to check whether there is only
                            one VIF for an instance to enable simple association support.</para>
        </note>
      </section>
      <section>
        <title>user_home</title>
        <para>Default: <literal>settings.LOGIN_REDIRECT_URL</literal></para>
        <para>This can be either a literal URL path (such as the default), or Python’s
                        dotted string notation representing a function which will evaluate what URL
                        a user should be redirected to based on the attributes of that user.</para>
      </section>
    </section>
    <section>
      <title>MESSAGES_PATH</title>
      <para>Default: <literal>None</literal></para>
      <para>The absolute path to the directory where message files are collected.</para>
      <para>When the user logins to horizon, the message files collected are processed
                    and displayed to the user. Each message file should contain a JSON formatted
                    data and must have a .json file extension. For example:</para>
      <screen language="python">{
    "level": "info",
    "message": "message of the day here"
}</screen>
      <para>Possible values for level are: <literal>success</literal>, <literal>info</literal>, <literal>warning</literal> and
                    <literal>error</literal>.</para>
    </section>
    <section>
      <title>NG_TEMPLATE_CACHE_AGE</title>
      <para>Angular Templates are cached using this duration (in seconds) if <xref linkend="debug"/>
                    is set to <literal>False</literal>.  Default value is <literal>2592000</literal> (or 30 days).</para>
    </section>
    <section>
      <title>OPENSTACK_API_VERSIONS</title>
      <para>Default:</para>
      <screen language="python">{
    "data-processing": 1.1,
    "identity": 2.0,
    "volume": 2,
    "compute": 2
}</screen>
      <para>Overrides for OpenStack API versions. Use this setting to force the
                    OpenStack dashboard to use a specific API version for a given service API.</para>
      <note>
        <para>The version should be formatted as it appears in the URL for the
                        service API. For example, the identity service APIs have inconsistent
                        use of the decimal point, so valid options would be “2.0” or “3”.
                        For example:</para>
        <screen language="python">OPENSTACK_API_VERSIONS = {
    "data-processing": 1.1,
    "identity": 3,
    "volume": 2,
    "compute": 2
}</screen>
      </note>
    </section>
    <section>
      <title>OPENSTACK_CLOUDS_YAML_NAME</title>
      <para>Default: <literal>"openstack"</literal></para>
      <para>The name of the entry to put into the user’s clouds.yaml file.</para>
    </section>
    <section>
      <title>OPENSTACK_CLOUDS_YAML_PROFILE</title>
      <para>Default: <literal>None</literal></para>
      <para>If set, the name of the <link xlink:href="https://docs.openstack.org/os-client-config/latest/user/vendor-support.html">vendor profile</link> from <link xlink:href="https://docs.openstack.org/os-client-config/latest/">os-client-config</link>.</para>
    </section>
    <section>
      <title>OPENSTACK_ENDPOINT_TYPE</title>
      <para>Default: <literal>"publicURL"</literal></para>
      <para>A string which specifies the endpoint type to use for the endpoints in the
                    Keystone service catalog. The default value for all services except for
                    identity is <literal>"publicURL"</literal> . The default value for the identity service is
                    <literal>"internalURL"</literal>.</para>
    </section>
    <section xml:id="openstack-host">
      <title>OPENSTACK_HOST</title>
      <para>Default: <literal>"127.0.0.1"</literal></para>
      <para>The hostname of the Keystone server used for authentication if you only have
                    one region. This is often the <emphasis role="bold">only</emphasis> setting that needs to be set for a
                    basic deployment.</para>
      <para>If you have multiple regions you should use the <xref linkend="available-regions"/> setting
                    instead.</para>
    </section>
    <section>
      <title>OPENSTACK_PROFILER</title>
      <para>Default: <literal>{"enabled": False}</literal></para>
      <para>Various settings related to integration with osprofiler library. Since it is a
                    developer feature, it starts as disabled. To enable it, more than a single
                    <literal>"enabled"</literal> key should be specified. Additional keys that should be specified
                    in that dictionary are:</para>
      <itemizedlist>
        <listitem>
          <para><literal>"keys"</literal> is a list of strings, which are secret keys used to encode/decode
                            the profiler data contained in request headers. Encryption is used for
                            security purposes, other OpenStack components that are expected to profile
                            themselves with osprofiler using the data from the request that Horizon
                            initiated must share a common set of keys with the ones in Horizon
                            config. List of keys is used so that security keys could be changed in
                            non-obtrusive manner for every component in the cloud.
                            Example: <literal>"keys": ["SECRET_KEY", "MORE_SECRET_KEY"]</literal>.
                            For more details see <link xlink:href="https://docs.openstack.org/osprofiler/latest/user/integration.html#how-to-initialize-profiler-to-get-one-trace-across-all-services">osprofiler documentation</link>.</para>
        </listitem>
        <listitem>
          <para><literal>"notifier_connection_string"</literal> is a url to which trace messages are sent by
                            Horizon. For other components it is usually the only URL specified in config,
                            because other components act mostly as traces producers. Example:
                            <literal>"notifier_connection_string": "mongodb://%s' % OPENSTACK_HOST"</literal>.</para>
        </listitem>
        <listitem>
          <para><literal>"receiver_connection_string"</literal> is a url from which traces are retrieved by
                            Horizon, needed because Horizon is not only the traces producer, but also a
                            consumer. Having 2 settings which usually contain the same value is legacy
                            feature from older versions of osprofiler when OpenStack components could use
                            oslo.messaging for notifications and the trace client used ceilometer as a
                            receiver backend. By default Horizon uses the same URL pointing to a MongoDB
                            cluster for both purposes, since ceilometer was too slow for using with UI.
                            Example: <literal>"receiver_connection_string": "mongodb://%s" % OPENSTACK_HOST</literal>.</para>
        </listitem>
      </itemizedlist>
    </section>
    <section>
      <title>OPENSTACK_SSL_CACERT</title>
      <para>Default: <literal>None</literal></para>
      <para>When unset or set to <literal>None</literal> the default CA certificate on the system is used
                    for SSL verification.</para>
      <para>When set with the path to a custom CA certificate file, this overrides use of
                    the default system CA certificate. This custom certificate is used to verify all
                    connections to openstack services when making API calls.</para>
    </section>
    <section>
      <title>OPENSTACK_SSL_NO_VERIFY</title>
      <para>Default: <literal>False</literal></para>
      <para>Disable SSL certificate checks in the OpenStack clients (useful for self-signed
                    certificates).</para>
    </section>
    <section>
      <title>OPERATION_LOG_ENABLED</title>
      <para>Default: <literal>False</literal></para>
      <para>This setting can be used to enable logging of all operations carried out by
                    users of Horizon. The format of the logs is configured via
                    <xref linkend="operation-log-options"/></para>
      <note>
        <para>If you use this feature, you need to configure the logger setting like
                        a outputting path for operation log in <literal>local_settings.py</literal>.</para>
      </note>
    </section>
    <section xml:id="operation-log-options">
      <title>OPERATION_LOG_OPTIONS</title>
      <para>Default:</para>
      <screen language="python">{
    'mask_fields': ['password'],
    'target_methods': ['POST'],
    'ignored_urls': ['/js/', '/static/', '^/api/'],
    'format': ("[%(domain_name)s] [%(domain_id)s] [%(project_name)s]"
        " [%(project_id)s] [%(user_name)s] [%(user_id)s] [%(request_scheme)s]"
        " [%(referer_url)s] [%(request_url)s] [%(message)s] [%(method)s]"
        " [%(http_status)s] [%(param)s]"),
}</screen>
      <para>This setting controls the behavior of the operation log.</para>
      <itemizedlist>
        <listitem>
          <para><literal>mask_fields</literal> is a list of keys of post data which should be masked from the
                            point of view of security. Fields like <literal>password</literal> should be included.
                            The fields specified in <literal>mask_fields</literal> are logged as <literal>********</literal>.</para>
        </listitem>
        <listitem>
          <para><literal>target_methods</literal> is a request method which is logged to a operation log.
                            The valid methods are <literal>POST</literal>, <literal>GET</literal>, <literal>PUT</literal>, <literal>DELETE</literal>.</para>
        </listitem>
        <listitem>
          <para><literal>ignored_urls</literal> is a list of request URLs to be hidden from a log.</para>
        </listitem>
        <listitem>
          <para><literal>format</literal> defines the operation log format.
                            Currently you can use the following keywords.
                            The default value contains all keywords.</para>
          <itemizedlist>
            <listitem>
              <para>
                <literal>%(client_ip)s</literal>
              </para>
            </listitem>
            <listitem>
              <para>
                <literal>%(domain_name)s</literal>
              </para>
            </listitem>
            <listitem>
              <para>
                <literal>%(domain_id)s</literal>
              </para>
            </listitem>
            <listitem>
              <para>
                <literal>%(project_name)s</literal>
              </para>
            </listitem>
            <listitem>
              <para>
                <literal>%(project_id)s</literal>
              </para>
            </listitem>
            <listitem>
              <para>
                <literal>%(user_name)s</literal>
              </para>
            </listitem>
            <listitem>
              <para>
                <literal>%(user_id)s</literal>
              </para>
            </listitem>
            <listitem>
              <para>
                <literal>%(request_scheme)s</literal>
              </para>
            </listitem>
            <listitem>
              <para>
                <literal>%(referer_url)s</literal>
              </para>
            </listitem>
            <listitem>
              <para>
                <literal>%(request_url)s</literal>
              </para>
            </listitem>
            <listitem>
              <para>
                <literal>%(message)s</literal>
              </para>
            </listitem>
            <listitem>
              <para>
                <literal>%(method)s</literal>
              </para>
            </listitem>
            <listitem>
              <para>
                <literal>%(http_status)s</literal>
              </para>
            </listitem>
            <listitem>
              <para>
                <literal>%(param)s</literal>
              </para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>
    </section>
    <section>
      <title>OVERVIEW_DAYS_RANGE</title>
      <para>Default:: <literal>1</literal></para>
      <para>When set to an integer N (as by default), the start date in the Overview panel
                    meters will be today minus N days. This setting is used to limit the amount of
                    data fetched by default when rendering the Overview panel. If set to <literal>None</literal>
                    (which corresponds to the behavior in past Horizon versions), the start date
                    will be from the beginning of the current month until the current date. The
                    legacy behaviour is not recommended for large deployments as Horizon suffers
                    significant lag in this case.</para>
    </section>
    <section>
      <title>POLICY_FILES</title>
      <para>Default:</para>
      <screen language="python">{
    'identity': 'keystone_policy.json',
    'compute': 'nova_policy.json',
    'volume': 'cinder_policy.json',
    'image': 'glance_policy.json',
    'orchestration': 'heat_policy.json',
    'network': 'neutron_policy.json',
}</screen>
      <para>This should essentially be the mapping of the contents of <xref linkend="policy-files-path"/>
                    to service types. When policy.json files are added to <xref linkend="policy-files-path"/>,
                    they should be included here too.</para>
    </section>
    <section xml:id="policy-files-path">
      <title>POLICY_FILES_PATH</title>
      <para>Default:  <literal>os.path.join(ROOT_PATH, "conf")</literal></para>
      <para>Specifies where service based policy files are located.  These are used to
                    define the policy rules actions are verified against.</para>
    </section>
    <section xml:id="rest-api-required-settings">
      <title>REST_API_REQUIRED_SETTINGS</title>
      <para>Default:</para>
      <screen language="python">[
    'OPENSTACK_HYPERVISOR_FEATURES',
    'LAUNCH_INSTANCE_DEFAULTS',
    'OPENSTACK_IMAGE_FORMATS',
    'OPENSTACK_KEYSTONE_DEFAULT_DOMAIN'
]</screen>
      <para>This setting allows you to expose configuration values over Horizons internal
                    REST API, so that the AngularJS panels can access them. Please be cautious
                    about which values are listed here (and thus exposed on the frontend)</para>
    </section>
    <section xml:id="selectable-themes">
      <title>SELECTABLE_THEMES</title>
      <para>Default: <literal>AVAILABLE_THEMES</literal></para>
      <para>This setting tells Horizon which themes to expose to the user as selectable
                    in the theme picker widget.  This value defaults to all themes configured
                    in <xref linkend="available-themes"/>, but a brander may wish to simply inherit from an
                    existing theme and not allow that parent theme to be selected by the user.
                    <literal>SELECTABLE_THEMES</literal> takes the exact same format as <literal>AVAILABLE_THEMES</literal>.</para>
    </section>
    <section>
      <title>SESSION_TIMEOUT</title>
      <para>Default: <literal>"3600"</literal></para>
      <para>This SESSION_TIMEOUT is a method to supercede the token timeout with a shorter
                    horizon session timeout (in seconds).  So if your token expires in 60 minutes,
                    a value of 1800 will log users out after 30 minutes.</para>
    </section>
    <section>
      <title>THEME_COLLECTION_DIR</title>
      <para>Default: <literal>"themes"</literal></para>
      <para>This setting tells Horizon which static directory to collect the
                    available themes into, and therefore which URL points to the theme
                    collection root.  For example, the default theme would be accessible
                    via <literal>/{{ STATIC_URL }}/themes/default</literal>.</para>
    </section>
    <section>
      <title>THEME_COOKIE_NAME</title>
      <para>Default: <literal>"theme"</literal></para>
      <para>This setting tells Horizon in which cookie key to store the currently
                    set theme.  The cookie expiration is currently set to a year.</para>
    </section>
    <section>
      <title>WEBROOT</title>
      <para>Default: <literal>"/"</literal></para>
      <para>Specifies the location where the access to the dashboard is configured in
                    the web server.</para>
      <para>For example, if you’re accessing the Dashboard via
                    <literal>https://&lt;your server&gt;/dashboard</literal>, you would set this to <literal>"/dashboard/"</literal>.</para>
      <note>
        <para>Additional settings may be required in the config files of your webserver
                        of choice. For example to make <literal>"/dashboard/"</literal> the web root in Apache,
                        the <literal>"sites-available/horizon.conf"</literal> requires a couple of additional
                        aliases set:</para>
        <screen>Alias /dashboard/static %HORIZON_DIR%/static

Alias /dashboard/media %HORIZON_DIR%/openstack_dashboard/static</screen>
        <para>Apache also requires changing your WSGIScriptAlias to reflect the desired
                        path.  For example, you’d replace <literal>/</literal> with <literal>/dashboard</literal> for the
                        alias.</para>
      </note>
    </section>
  </section>
  <section xml:id="service-specific-settings">
    <title>Service-specific Settings</title>
    <para>The following settings inform the OpenStack Dashboard of information about the
                other OpenStack projects which are part of this cloud and control the behavior
                of specific dashboards, panels, API calls, etc.</para>
    <section>
      <title>Cinder</title>
      <section>
        <title>OPENSTACK_CINDER_FEATURES</title>
        <para>Default: <literal>{'enable_backup': False}</literal></para>
        <para>A dictionary of settings which can be used to enable optional services provided
                        by cinder.  Currently only the backup service is available.</para>
      </section>
    </section>
    <section>
      <title>Glance</title>
      <section>
        <title>CREATE_IMAGE_DEFAULTS</title>
        <para>Default:</para>
        <screen language="python">{
    'image_visibility': "public",
}</screen>
        <para>A dictionary of default settings for create image modal.</para>
        <para>The <literal>image_visibility</literal> setting specifies the default visibility option.
                        Valid values are  <literal>"public"</literal> and <literal>"private"</literal>. By default, the visibility
                        option is public on create image modal. If it’s set to <literal>"private"</literal>, the
                        default visibility option is private.</para>
      </section>
      <section>
        <title>HORIZON_IMAGES_ALLOW_UPLOAD</title>
        <para>Default: <literal>True</literal></para>
        <para>If set to <literal>False</literal>, this setting disables <emphasis role="bold">local</emphasis> uploads to prevent filling
                        up the disk on the dashboard server since uploads to the Glance image store
                        service tend to be particularly large - in the order of hundreds of megabytes
                        to multiple gigabytes.</para>
        <para>The setting is marked as deprecated and will be removed in P or later release.
                        It is superseded by the setting HORIZON_IMAGES_UPLOAD_MODE. Until the removal
                        the <literal>False</literal> value of HORIZON_IMAGES_ALLOW_UPLOAD overrides the value of
                        HORIZON_IMAGES_UPLOAD_MODE.</para>
        <note>
          <para>This will not disable image creation altogether, as this setting does not
                            affect images created by specifying an image location (URL) as the image
                            source.</para>
        </note>
      </section>
      <section>
        <title>HORIZON_IMAGES_UPLOAD_MODE</title>
        <para>Default: <literal>"legacy"</literal></para>
        <para>Valid values are  <literal>"direct"</literal>, <literal>"legacy"</literal> (default) and <literal>"off"</literal>. <literal>"off"</literal>
                        disables the ability to upload images via Horizon. It is equivalent to setting
                        <literal>False</literal> on the deprecated setting <literal>HORIZON_IMAGES_ALLOW_UPLOAD</literal>. <literal>legacy</literal>
                        enables local file upload by piping the image file through the Horizon’s
                        web-server. It is equivalent to setting <literal>True</literal> on the deprecated setting
                        <literal>HORIZON_IMAGES_ALLOW_UPLOAD</literal>. <literal>direct</literal> sends the image file directly from
                        the web browser to Glance. This bypasses Horizon web-server which both reduces
                        network hops and prevents filling up Horizon web-server’s filesystem. <literal>direct</literal>
                        is the preferred mode, but due to the following requirements it is not the
                        default. The <literal>direct</literal> setting requires a modern web browser, network access
                        from the browser to the public Glance endpoint, and CORS support to be enabled
                        on the Glance API service. Without CORS support, the browser will forbid the
                        PUT request to a location different than the Horizon server. To enable CORS
                        support for Glance API service, you will need to edit [cors] section of
                        glance-api.conf file (see <link xlink:href="https://docs.openstack.org/oslo.middleware/latest/reference/cors.html#configuration-for-oslo-config">here</link> how to do it). Set <literal>allowed_origin</literal> to the
                        full hostname of Horizon web-server (e.g. <link xlink:href="http:/"/>/&lt;HOST_IP&gt;/dashboard) and
                        restart glance-api process.</para>
        <note>
          <para>To maintain the compatibility with the deprecated HORIZON_IMAGES_ALLOW_UPLOAD
                            setting, neither <literal>"direct"</literal>, nor <literal>"legacy"</literal> modes will have an effect if
                            HORIZON_IMAGES_ALLOW_UPLOAD is set to <literal>False</literal> - as if HORIZON_IMAGES_UPLOAD_MODE
                            was set to <literal>"off"</literal> itself. When HORIZON_IMAGES_ALLOW_UPLOAD is set to <literal>True</literal>,
                            all three modes are considered, as if HORIZON_IMAGES_ALLOW_UPLOAD setting
                            was removed.</para>
        </note>
      </section>
      <section>
        <title>IMAGE_CUSTOM_PROPERTY_TITLES</title>
        <para>Default:</para>
        <screen language="python">{
    "architecture": _("Architecture"),
    "kernel_id": _("Kernel ID"),
    "ramdisk_id": _("Ramdisk ID"),
    "image_state": _("Euca2ools state"),
    "project_id": _("Project ID"),
    "image_type": _("Image Type")
}</screen>
        <para>Used to customize the titles for image custom property attributes that
                        appear on image detail pages.</para>
      </section>
      <section>
        <title>IMAGE_RESERVED_CUSTOM_PROPERTIES</title>
        <para>Default: <literal>[]</literal></para>
        <para>A list of image custom property keys that should not be displayed in the
                        Update Metadata tree.</para>
        <para>This setting can be used in the case where a separate panel is used for
                        managing a custom property or if a certain custom property should never be
                        edited.</para>
      </section>
      <section>
        <title>IMAGES_ALLOW_LOCATION</title>
        <para>Default: <literal>False</literal></para>
        <para>If set to <literal>True</literal>, this setting allows users to specify an image location
                        (URL) as the image source when creating or updating images. Depending on
                        the Glance version, the ability to set an image location is controlled by
                        policies and/or the Glance configuration. Therefore IMAGES_ALLOW_LOCATION
                        should only be set to <literal>True</literal> if Glance is configured to allow specifying a
                        location. This setting has no effect when the Keystone catalog doesn’t contain
                        a Glance v2 endpoint.</para>
      </section>
      <section>
        <title>IMAGES_LIST_FILTER_TENANTS</title>
        <para>Default: <literal>None</literal></para>
        <para>A list of dictionaries to add optional categories to the image fixed filters
                        in the Images panel, based on project ownership.</para>
        <para>Each dictionary should contain a <literal>tenant</literal> attribute with the project
                        id, and optionally a <literal>text</literal> attribute specifying the category name, and
                        an <literal>icon</literal> attribute that displays an icon in the filter button. The
                        icon names are based on the default icon theme provided by Bootstrap.</para>
        <para>Example:</para>
        <screen language="python">[{'text': 'Official',
  'tenant': '27d0058849da47c896d205e2fc25a5e8',
  'icon': 'fa-check'}]</screen>
      </section>
      <section>
        <title>OPENSTACK_IMAGE_BACKEND</title>
        <para>Default:</para>
        <screen language="python">{
    'image_formats': [
        ('', _('Select format')),
        ('aki', _('AKI - Amazon Kernel Image')),
        ('ami', _('AMI - Amazon Machine Image')),
        ('ari', _('ARI - Amazon Ramdisk Image')),
        ('docker', _('Docker')),
        ('iso', _('ISO - Optical Disk Image')),
        ('qcow2', _('QCOW2 - QEMU Emulator')),
        ('raw', _('Raw')),
        ('vdi', _('VDI')),
        ('vhd', _('VHD')),
        ('vmdk', _('VMDK'))
    ]
}</screen>
        <para>Used to customize features related to the image service, such as the list of
                        supported image formats.</para>
      </section>
    </section>
    <section>
      <title>Heat</title>
      <section>
        <title>OPENSTACK_HEAT_STACK</title>
        <para>Default:</para>
        <screen language="python">{
    'enable_user_pass': True
}</screen>
        <para>A dictionary of settings to use with heat stacks. Currently, the only setting
                        available is “enable_user_pass”, which can be used to disable the password
                        field while launching the stack. Currently HEAT API needs user password to
                        perform all the heat operations because in HEAT API trusts is not enabled by
                        default. So, this setting can be set as “False” in-case HEAT uses trusts by
                        default otherwise it needs to be set as “True”.</para>
      </section>
    </section>
    <section>
      <title>Keystone</title>
      <section>
        <title>AUTHENTICATION_PLUGINS</title>
        <para>Default:</para>
        <screen language="python">[
    'openstack_auth.plugin.password.PasswordPlugin',
    'openstack_auth.plugin.token.TokenPlugin'
]</screen>
        <para>A list of authentication plugins to be used. In most cases, there is no need to
                        configure this.</para>
      </section>
      <section>
        <title>AUTHENTICATION_URLS</title>
        <para>Default: <literal>['openstack_auth.urls']</literal></para>
        <para>A list of modules from which to collate authentication URLs from. The default
                        option adds URLs from the django-openstack-auth module however others will be
                        required for additional authentication mechanisms.</para>
      </section>
      <section xml:id="available-regions">
        <title>AVAILABLE_REGIONS</title>
        <para>Default: <literal>None</literal></para>
        <para>A list of tuples which define multiple regions. The tuple format is
                        <literal>('http://{{ keystone_host }}:5000/v2.0', '{{ region_name }}')</literal>. If any regions
                        are specified the login form will have a dropdown selector for authenticating
                        to the appropriate region, and there will be a region switcher dropdown in
                        the site header when logged in.</para>
        <para>You should also define <xref linkend="openstack-keystone-url"/> to indicate which of
                        the regions is the default one.</para>
      </section>
      <section>
        <title>DEFAULT_SERVICE_REGIONS</title>
        <para>Default: <literal>{}</literal></para>
        <para>The default service region is set on a per-endpoint basis, meaning that once
                        the user logs into some Keystone endpoint, if a default service region is
                        defined for it in this setting and exists within Keystone catalog, it will be
                        set as the initial service region in this endpoint. By default it is an empty
                        dictionary because upstream can neither predict service region names in a
                        specific deployment, nor tell whether this behavior is desired. The key of the
                        dictionary is a full url of a Keystone endpoint with version suffix, the value
                        is a region name.</para>
        <para>Example:</para>
        <screen language="python">DEFAULT_SERVICE_REGIONS = {
    OPENSTACK_KEYSTONE_URL: 'RegionOne'
}</screen>
      </section>
      <section>
        <title>ENABLE_CLIENT_TOKEN</title>
        <para>Default: <literal>True</literal></para>
        <para>This setting will Enable/Disable access to the Keystone Token to the
                        browser.</para>
      </section>
      <section>
        <title>ENFORCE_PASSWORD_CHECK</title>
        <para>Default: <literal>False</literal></para>
        <para>This setting will display an ‘Admin Password’ field on the Change Password
                        form to verify that it is indeed the admin logged-in who wants to change
                        the password.</para>
      </section>
      <section>
        <title>KEYSTONE_PROVIDER_IDP_ID</title>
        <para>Default: <literal>"localkeystone"</literal></para>
        <para>This ID is only used for comparison with the service provider IDs.
                        This ID should not match any service provider IDs.</para>
      </section>
      <section>
        <title>KEYSTONE_PROVIDER_IDP_NAME</title>
        <para>Default: <literal>"Local Keystone"</literal></para>
        <para>The Keystone Provider drop down uses Keystone to Keystone federation to switch
                        between Keystone service providers. This sets the display name for the Identity
                        Provider (dropdown display name).</para>
      </section>
      <section>
        <title>OPENSTACK_KEYSTONE_ADMIN_ROLES</title>
        <para>Default: <literal>["admin"]</literal></para>
        <para>The list of roles that have administrator privileges in this OpenStack
                        installation. This check is very basic and essentially only works with
                        keystone v2.0 and v3 with the default policy file. The setting assumes there
                        is a common <literal>admin</literal> like role(s) across services. Example uses of this
                        setting are:</para>
        <itemizedlist>
          <listitem>
            <para>to rename the <literal>admin</literal> role to <literal>cloud-admin</literal></para>
          </listitem>
          <listitem>
            <para>allowing multiple roles to have administrative privileges, like
                                <literal>["admin", "cloud-admin", "net-op"]</literal></para>
          </listitem>
        </itemizedlist>
      </section>
      <section>
        <title>OPENSTACK_KEYSTONE_BACKEND</title>
        <para>Default:</para>
        <screen language="python">{
    'name': 'native',
    'can_edit_user': True,
    'can_edit_group': True,
    'can_edit_project': True,
    'can_edit_domain': True,
    'can_edit_role': True,
}</screen>
        <para>A dictionary containing settings which can be used to identify the
                        capabilities of the auth backend for Keystone.</para>
        <para>If Keystone has been configured to use LDAP as the auth backend then set
                        <literal>can_edit_user</literal> and <literal>can_edit_project</literal> to <literal>False</literal> and name to <literal>"ldap"</literal>.</para>
      </section>
      <section xml:id="openstack-keystone-default-domain">
        <title>OPENSTACK_KEYSTONE_DEFAULT_DOMAIN</title>
        <para>Default: <literal>"Default"</literal></para>
        <para>Overrides the default domain used when running on single-domain model
                        with Keystone V3. All entities will be created in the default domain.</para>
      </section>
      <section>
        <title>OPENSTACK_KEYSTONE_DEFAULT_ROLE</title>
        <para>Default: <literal>"_member_"</literal></para>
        <para>The name of the role which will be assigned to a user when added to a project.
                        This value must correspond to an existing role name in Keystone. In general,
                        the value should match the <literal>member_role_name</literal> defined in <literal>keystone.conf</literal>.</para>
      </section>
      <section>
        <title>OPENSTACK_KEYSTONE_DOMAIN_CHOICES</title>
        <para>Default:</para>
        <screen language="python">(
    ('Default', 'Default'),
)</screen>
        <para>If <xref linkend="openstack-keystone-domain-dropdown"/> is enabled, this option can be used to
                        set the available domains to choose from. This is a list of pairs whose first
                        value is the domain name and the second is the display name.</para>
      </section>
      <section xml:id="openstack-keystone-domain-dropdown">
        <title>OPENSTACK_KEYSTONE_DOMAIN_DROPDOWN</title>
        <para>Default: <literal>False</literal></para>
        <para>Set this to True if you want available domains displayed as a dropdown menu on
                        the login screen. It is strongly advised NOT to enable this for public clouds,
                        as advertising enabled domains to unauthenticated customers irresponsibly
                        exposes private information. This should only be used for private clouds where
                        the dashboard sits behind a corporate firewall.</para>
      </section>
      <section>
        <title>OPENSTACK_KEYSTONE_FEDERATION_MANAGEMENT</title>
        <para>Default: <literal>False</literal></para>
        <para>Set this to True to enable panels that provide the ability for users to manage
                        Identity Providers (IdPs) and establish a set of rules to map federation
                        protocol attributes to Identity API attributes. This extension requires v3.0+
                        of the Identity API.</para>
      </section>
      <section>
        <title>OPENSTACK_KEYSTONE_MULTIDOMAIN_SUPPORT</title>
        <para>Default: <literal>False</literal></para>
        <para>Set this to True if running on multi-domain model. When this is enabled, it
                        will require user to enter the Domain name in addition to username for login.</para>
      </section>
      <section xml:id="openstack-keystone-url">
        <title>OPENSTACK_KEYSTONE_URL</title>
        <formalpara>
          <title>See also</title>
          <para>Horizon’s <xref linkend="openstack-host"/> documentation</para>
        </formalpara>
        <para>Default: <literal>"http://%s:5000/v2.0" % OPENSTACK_HOST</literal></para>
        <para>The full URL for the Keystone endpoint used for authentication. Unless you
                        are using HTTPS, running your Keystone server on a nonstandard port, or using
                        a nonstandard URL scheme you shouldn’t need to touch this setting.</para>
      </section>
      <section>
        <title>OPENSTACK_TOKEN_HASH_ALGORITHM</title>
        <para>Default: <literal>"md5"</literal></para>
        <para>The hash algorithm to use for authentication tokens. This must match the hash
                        algorithm that the identity (Keystone) server and the auth_token middleware
                        are using. Allowed values are the algorithms supported by Python’s hashlib
                        library.</para>
      </section>
      <section>
        <title>OPENSTACK_TOKEN_HASH_ENABLED</title>
        <para>Default: <literal>True</literal></para>
        <para>Hashing tokens from Keystone keeps the Horizon session data smaller, but it
                        doesn’t work in some cases when using PKI tokens.  Uncomment this value and
                        set it to False if using PKI tokens and there are 401 errors due to token
                        hashing.</para>
      </section>
      <section>
        <title>PASSWORD_EXPIRES_WARNING_THRESHOLD_DAYS</title>
        <para>Default: <literal>-1</literal></para>
        <para>Password will have an expiration date when using keystone v3 and enabling the
                        feature. This setting allows you to set the number of days that the user will
                        be alerted prior to the password expiration. Once the password expires keystone
                        will deny the access and users must contact an admin to change their password.
                        Setting this value to <literal>N</literal> days means the user will be alerted when the
                        password expires in less than <literal>N+1</literal> days. <literal>-1</literal> disables the feature.</para>
      </section>
      <section xml:id="project-table-extra-info">
        <title>PROJECT_TABLE_EXTRA_INFO</title>
        <formalpara>
          <title>See also</title>
          <para><xref linkend="user-table-extra-info"/> for the equivalent setting on the Users table</para>
        </formalpara>
        <para>Default: <literal>{}</literal></para>
        <para>Adds additional information for projects as extra attributes. Projects can have
                        extra attributes as defined by Keystone v3. This setting allows those
                        attributes to be shown in Horizon.</para>
        <para>For example:</para>
        <screen language="python">PROJECT_TABLE_EXTRA_INFO = {
    'phone_num': _('Phone Number'),
}</screen>
      </section>
      <section>
        <title>SECURE_PROXY_ADDR_HEADER</title>
        <para>Default: <literal>False</literal></para>
        <para>If horizon is behind a proxy server and the proxy is configured, the IP address
                        from request is passed using header variables inside the request. The header
                        name depends on a proxy or a load-balancer. This setting specifies the name of
                        the header with remote IP address. The main use is for authentication log
                        (success or fail) displaing the IP address of the user.
                        The commom value for this setting is <literal>HTTP_X_REAL_IP</literal> or
                        <literal>HTTP_X_FORWARDED_FOR</literal>.
                        If not present, then <literal>REMOTE_ADDR</literal> header is used. (<literal>REMOTE_ADDR</literal> is the
                        field of Django HttpRequest object which contains IP address of the client.)</para>
      </section>
      <section>
        <title>TOKEN_TIMEOUT_MARGIN</title>
        <para>Default: <literal>0</literal></para>
        <para>A time margin in seconds to subtract from the real token’s validity. An example
                        use case is that the token can be valid once the middleware passed, and
                        invalid (timed-out) during a view rendering and this generates authorization
                        errors during the view rendering. By setting this value to a few seconds, you
                        can avoid token expiration during a view rendering.</para>
      </section>
      <section xml:id="user-table-extra-info">
        <title>USER_TABLE_EXTRA_INFO</title>
        <formalpara>
          <title>See also</title>
          <para><xref linkend="project-table-extra-info"/> for the equivalent setting on the Projects table</para>
        </formalpara>
        <para>Default: <literal>{}</literal></para>
        <para>Adds additional information for users as extra attributes. Users can have
                        extra attributes as defined by Keystone v3. This setting allows those
                        attributes to be shown in Horizon.</para>
        <para>For example:</para>
        <screen language="python">USER_TABLE_EXTRA_INFO = {
    'phone_num': _('Phone Number'),
}</screen>
      </section>
      <section>
        <title>WEBSSO_CHOICES</title>
        <para>Default:</para>
        <screen language="python">(
    ("credentials", _("Keystone Credentials")),
    ("oidc", _("OpenID Connect")),
    ("saml2", _("Security Assertion Markup Language"))
)</screen>
        <para>This is the list of authentication mechanisms available to the user. It
                        includes Keystone federation protocols such as OpenID Connect and SAML, and
                        also keys that map to specific identity provider and federation protocol
                        combinations (as defined in <xref linkend="websso-idp-mapping"/>). The list of choices is
                        completely configurable, so as long as the id remains intact. Do not remove
                        the credentials mechanism unless you are sure. Once removed, even admins will
                        have no way to log into the system via the dashboard.</para>
      </section>
      <section>
        <title>WEBSSO_ENABLED</title>
        <para>Default: <literal>False</literal></para>
        <para>Enables keystone web single-sign-on if set to True. For this feature to work,
                        make sure that you are using Keystone V3 and Django OpenStack Auth V1.2.0 or
                        later.</para>
      </section>
      <section xml:id="websso-idp-mapping">
        <title>WEBSSO_IDP_MAPPING</title>
        <para>Default: <literal>{}</literal></para>
        <para>A dictionary of specific identity provider and federation protocol combinations.
                        From the selected authentication mechanism, the value will be looked up as keys
                        in the dictionary. If a match is found, it will redirect the user to a identity
                        provider and federation protocol specific WebSSO endpoint in keystone,
                        otherwise it will use the value as the protocol_id when redirecting to the
                        WebSSO by protocol endpoint.</para>
        <para>Example:</para>
        <screen language="python">WEBSSO_CHOICES =  (
    ("credentials", _("Keystone Credentials")),
    ("oidc", _("OpenID Connect")),
    ("saml2", _("Security Assertion Markup Language")),
    ("acme_oidc", "ACME - OpenID Connect"),
    ("acme_saml2", "ACME - SAML2")
)

WEBSSO_IDP_MAPPING = {
    "acme_oidc": ("acme", "oidc"),
    "acme_saml2": ("acme", "saml2")
}</screen>
        <note>
          <para>The value is expected to be a tuple formatted as: (&lt;idp_id&gt;, &lt;protocol_id&gt;)</para>
        </note>
      </section>
      <section>
        <title>WEBSSO_INITIAL_CHOICE</title>
        <para>Default: <literal>"credentials"</literal></para>
        <para>Specifies the default authentication mechanism. When user lands on the login
                        page, this is the first choice they will see.</para>
      </section>
    </section>
    <section>
      <title>Neutron</title>
      <section>
        <title>ALLOWED_PRIVATE_SUBNET_CIDR</title>
        <para>Default:</para>
        <screen language="python">{
    'ipv4': [],
    'ipv6': []
}</screen>
        <para>A dictionary used to restrict user private subnet CIDR range.
                        An empty list means that user input will not be restricted
                        for a corresponding IP version. By default, there is
                        no restriction for both IPv4 and IPv6.</para>
        <para>Example:</para>
        <screen language="python">{
    'ipv4': [
        '192.168.0.0/16',
        '10.0.0.0/8'
    ],
    'ipv6': [
        'fc00::/7',
    ]
}</screen>
      </section>
      <section>
        <title>OPENSTACK_NEUTRON_NETWORK</title>
        <para>Default:</para>
        <screen language="python">{
    'default_dns_nameservers': [],
    'enable_distributed_router': False,
    'enable_fip_topology_check': True,
    'enable_ha_router': False,
    'enable_ipv6': True,
    'enable_quotas': False,
    'enable_router': True,
    'extra_provider_types': {},
    'physical_networks': [],
    'segmentation_id_range': {},
    'supported_provider_types': ["*"],
    'supported_vnic_types': ["*"],
}</screen>
        <para>A dictionary of settings which can be used to enable optional services provided
                        by Neutron and configure Neutron specific features.  The following options are
                        available.</para>
        <section>
          <title>default_dns_nameservers</title>
          <para>Default: <literal>None</literal> (Empty)</para>
          <para>Default DNS servers you would like to use when a subnet is created. This is
                            only a default. Users can still choose a different list of dns servers.</para>
          <para>Example: <literal>["8.8.8.8", "8.8.4.4", "208.67.222.222"]</literal></para>
        </section>
        <section>
          <title>enable_distributed_router</title>
          <para>Default: <literal>False</literal></para>
          <para>Enable or disable Neutron distributed virtual router (DVR) feature in
                            the Router panel. For the DVR feature to be enabled, this option needs
                            to be set to True and your Neutron deployment must support DVR. Even
                            when your Neutron plugin (like ML2 plugin) supports DVR feature, DVR
                            feature depends on l3-agent configuration, so deployers should set this
                            option appropriately depending on your deployment.</para>
        </section>
        <section>
          <title>enable_fip_topology_check</title>
          <para>Default: <literal>True</literal></para>
          <para>The Default Neutron implementation needs a router with a gateway to associate a
                            FIP. So by default a topology check will be performed by horizon to list only
                            VM ports attached to a network which is itself attached to a router with an
                            external gateway. This is to prevent from setting a FIP to a port which will
                            fail with an error.
                            Some Neutron vendors do not require it. Some can even attach a FIP to any port
                            (e.g.: OpenContrail) owned by a tenant.
                            Set to False if you want to be able to associate a FIP to an instance on a
                            subnet with no router if your Neutron backend allows it.</para>
        </section>
        <section>
          <title>enable_ha_router</title>
          <para>Default: <literal>False</literal></para>
          <para>Enable or disable HA (High Availability) mode in Neutron virtual router
                            in the Router panel. For the HA router mode to be enabled, this option needs
                            to be set to True and your Neutron deployment must support HA router mode.
                            Even when your Neutron plugin (like ML2 plugin) supports HA router mode,
                            the feature depends on l3-agent configuration, so deployers should set this
                            option appropriately depending on your deployment.</para>
        </section>
        <section>
          <title>enable_ipv6</title>
          <para>Default: <literal>False</literal></para>
          <para>Enable or disable IPv6 support in the Network panels. When disabled, Horizon
                            will only expose IPv4 configuration for networks.</para>
        </section>
        <section>
          <title>enable_quotas</title>
          <para>Default: <literal>False</literal></para>
          <para>Enable support for Neutron quotas feature. To make this feature work
                            appropriately, you need to use Neutron plugins with quotas extension support
                            and quota_driver should be DbQuotaDriver (default config).</para>
        </section>
        <section>
          <title>enable_router</title>
          <para>Default: <literal>True</literal></para>
          <para>Enable (<literal>True</literal>) or disable (<literal>False</literal>) the panels and menus related to router
                            and Floating IP features. This option only affects when Neutron is enabled. If
                            your Neutron deployment has no support for Layer-3 features, or you do not wish
                            to provide the Layer-3 features through the Dashboard, this should be set to
                            <literal>False</literal>.</para>
        </section>
        <section xml:id="extra-provider-types">
          <title>extra_provider_types</title>
          <para>Default: <literal>{}</literal></para>
          <para>For use with the provider network extension.
                            This is a dictionary to define extra provider network definitions.
                            Network types supported by Neutron depend on the configured plugin.
                            Horizon has predefined provider network types but horizon cannot cover
                            all of them. If you are using a provider network type not defined
                            in advance, you can add a definition through this setting.</para>
          <para>The <emphasis role="bold">key</emphasis> name of each item in this must be a network type used
                            in the Neutron API. <emphasis role="bold">value</emphasis> should be a dictionary which contains
                            the following items:</para>
          <itemizedlist>
            <listitem>
              <para><literal>display_name</literal>: string displayed in the network creation form.</para>
            </listitem>
            <listitem>
              <para><literal>require_physical_network</literal>: a boolean parameter which indicates
                                    this network type requires a physical network.</para>
            </listitem>
            <listitem>
              <para><literal>require_segmentation_id</literal>: a boolean parameter which indicates
                                    this network type requires a segmentation ID.
                                    If True, a valid segmentation ID range must be configured
                                    in <literal>segmentation_id_range</literal> settings above.</para>
            </listitem>
          </itemizedlist>
          <para>Example:</para>
          <screen language="python">{
    'awesome': {
        'display_name': 'Awesome',
        'require_physical_network': False,
        'require_segmentation_id': True,
    },
}</screen>
        </section>
        <section>
          <title>physical_networks</title>
          <para>Default: <literal>[]</literal></para>
          <para>Default to an empty list and the physical network field on the admin create
                            network modal will be a regular input field where users can type in the name
                            of the physical network to be used.
                            If it is set to a list of available physical networks, the physical network
                            field will be shown as a dropdown menu where users can select a physical
                            network to be used.</para>
          <para>Example: <literal>['default', 'test']</literal></para>
        </section>
        <section>
          <title>segmentation_id_range</title>
          <para>Default: <literal>{}</literal></para>
          <para>For use with the provider network extension. This is a dictionary where each
                            key is a provider network type and each value is a list containing two numbers.
                            The first number is the minimum segmentation ID that is valid. The second
                            number is the maximum segmentation ID. Pertains only to the vlan, gre, and
                            vxlan network types. By default this option is not provided and each minimum
                            and maximum value will be the default for the provider network type.</para>
          <para>Example:</para>
          <screen language="python">{
    'vlan': [1024, 2048],
    'gre': [4094, 65536]
}</screen>
        </section>
        <section>
          <title>supported_provider_types</title>
          <para>Default: <literal>["*"]</literal></para>
          <para>For use with the provider network extension. Use this to explicitly set which
                            provider network types are supported. Only the network types in this list will
                            be available to choose from when creating a network.
                            Network types defined in Horizon or defined in <xref linkend="extra-provider-types"/>
                            settings can be specified in this list.
                            As of the Newton release, the network types defined in Horizon include
                            network types supported by Neutron ML2 plugin with Open vSwitch driver
                            (<literal>local</literal>, <literal>flat</literal>, <literal>vlan</literal>, <literal>gre</literal>, <literal>vxlan</literal> and <literal>geneve</literal>)
                            and supported by Midonet plugin (<literal>midonet</literal> and <literal>uplink</literal>).
                            <literal>["*"]</literal> means that all provider network types supported by Neutron
                            ML2 plugin will be available to choose from.</para>
          <para>Example: <literal>['local', 'flat', 'gre']</literal></para>
        </section>
        <section>
          <title>supported_vnic_types</title>
          <para>Default <literal>['*']</literal></para>
          <para>For use with the port binding extension. Use this to explicitly set which VNIC
                            types are available for users to choose from, when creating or editing a port.
                            The VNIC types actually supported are determined by resource availability and
                            Neutron ML2 plugin support.
                            Currently, error reporting for users selecting an incompatible or unavailable
                            VNIC type is restricted to receiving a message from the scheduler that the
                            instance cannot spawn because of insufficient resources.
                            VNIC types include <literal>normal</literal>, <literal>direct</literal>, <literal>direct-physical</literal>, <literal>macvtap</literal>,
                            <literal>baremetal</literal> and <literal>virtio-forwarder</literal>. By default all VNIC types will be
                            available to choose from.</para>
          <para>Example: <literal>['normal', 'direct']</literal></para>
          <para>To disable VNIC type selection, set an empty list (<literal>[]</literal>) or <literal>None</literal>.</para>
        </section>
      </section>
    </section>
    <section>
      <title>Nova</title>
      <section>
        <title>CREATE_INSTANCE_FLAVOR_SORT</title>
        <para>Default:</para>
        <screen language="python">{
    'key': 'ram'
}</screen>
        <para>When launching a new instance the default flavor is sorted by RAM usage in
                        ascending order.
                        You can customize the sort order by: id, name, ram, disk and vcpus.
                        Additionally, you can insert any custom callback function. You can also
                        provide a flag for reverse sort.
                        See the description in local_settings.py.example for more information.</para>
        <para>This example sorts flavors by vcpus in descending order:</para>
        <screen language="python">CREATE_INSTANCE_FLAVOR_SORT = {
     'key':'vcpus',
     'reverse': True,
}</screen>
      </section>
      <section>
        <title>CONSOLE_TYPE</title>
        <para>Default:  <literal>"AUTO"</literal></para>
        <para>This setting specifies the type of in-browser console used to access the VMs.
                        Valid values are  <literal>"AUTO"</literal>, <literal>"VNC"</literal>, <literal>"SPICE"</literal>, <literal>"RDP"</literal>,
                        <literal>"SERIAL"</literal>, and <literal>None</literal>.</para>
      </section>
      <section>
        <title>ENABLE_FLAVOR_EDIT</title>
        <para>Default: <literal>False</literal></para>
        <para>This setting enables the ability to edit flavors.</para>
        <warning>
          <para>Historically, Horizon has provided the ability to edit Flavors by deleting
                            and creating a new one with the same information. This is not supported in
                            the Nova API and causes unexpected issues and breakages. To avoid breaking
                            standard deprecation procedure, this code is still in Horizon, but disabled
                            by default. It will be removed during the 14.0.0 (‘R’) release cycle.</para>
          <para>See <link xlink:href="http://lists.openstack.org/pipermail/openstack-dev/2017-August/120540.html">this email thread</link>
                            for further information.</para>
        </warning>
      </section>
      <section>
        <title>INSTANCE_LOG_LENGTH</title>
        <para>Default:  <literal>35</literal></para>
        <para>This setting enables you to change the default number of lines displayed for
                        the log of an instance.
                        Valid value must be a positive integer.</para>
      </section>
      <section>
        <title>LAUNCH_INSTANCE_DEFAULTS</title>
        <para>Default:</para>
        <screen language="python">{
    "config_drive": False,
    "create_volume": True,
    "disable_image": False,
    "disable_instance_snapshot": False,
    "disable_volume": False,
    "disable_volume_snapshot": False,
    "enable_scheduler_hints": True,
}</screen>
        <para>A dictionary of settings which can be used to provide the default values for
                        properties found in the Launch Instance modal. An explanation of each setting
                        is provided below.</para>
        <section>
          <title>config_drive</title>
          <para>Default: <literal>False</literal></para>
          <para>This setting specifies the default value for the Configuration Drive property.</para>
        </section>
        <section>
          <title>create_volume</title>
          <para>Default: <literal>True</literal></para>
          <para>This setting allows you to specify the default value for the option of creating
                            a new volume in the workflow for image and instance snapshot sources.</para>
        </section>
        <section>
          <title>disable_image</title>
          <para>Default: <literal>False</literal></para>
          <para>This setting disables Images as a valid boot source for launching instances.
                            Image sources won’t show up in the Launch Instance modal.</para>
        </section>
        <section>
          <title>disable_instance_snapshot</title>
          <para>Default: <literal>False</literal></para>
          <para>This setting disables Snapshots as a valid boot source for launching instances.
                            Snapshots sources won’t show up in the Launch Instance modal.</para>
        </section>
        <section>
          <title>disable_volume</title>
          <para>Default: <literal>False</literal></para>
          <para>This setting disables Volumes as a valid boot source for launching instances.
                            Volumes sources won’t show up in the Launch Instance modal.</para>
        </section>
        <section>
          <title>disable_volume_snapshot</title>
          <para>Default: <literal>False</literal></para>
          <para>This setting disables Volume Snapshots as a valid boot source for launching
                            instances. Volume Snapshots sources won’t show up in the Launch Instance modal.</para>
        </section>
        <section>
          <title>enable_scheduler_hints</title>
          <para>Default: <literal>True</literal></para>
          <para>This setting specifies whether or not Scheduler Hints can be provided when
                            launching an instance.</para>
        </section>
      </section>
      <section xml:id="launch-instance-legacy-enabled">
        <title>LAUNCH_INSTANCE_LEGACY_ENABLED</title>
        <para>Default: <literal>False</literal></para>
        <para>This setting enables the Python Launch Instance workflow.</para>
        <note>
          <para>It is possible to run both the AngularJS and Python workflows simultaneously,
                            so the other may be need to be toggled with <xref linkend="launch-instance-ng-enabled"/></para>
        </note>
      </section>
      <section xml:id="launch-instance-ng-enabled">
        <title>LAUNCH_INSTANCE_NG_ENABLED</title>
        <para>Default: <literal>True</literal></para>
        <para>This setting enables the AngularJS Launch Instance workflow.</para>
        <note>
          <para>It is possible to run both the AngularJS and Python workflows simultaneously,
                            so the other may be need to be toggled with <xref linkend="launch-instance-legacy-enabled"/></para>
        </note>
      </section>
      <section>
        <title>OPENSTACK_ENABLE_PASSWORD_RETRIEVE</title>
        <para>Default: <literal>"False"</literal></para>
        <para>When set, enables the instance action “Retrieve password” allowing password
                        retrieval from metadata service.</para>
      </section>
      <section>
        <title>OPENSTACK_HYPERVISOR_FEATURES</title>
        <para>Default:</para>
        <screen language="python">{
    'can_set_mount_point': False,
    'can_set_password': False,
    'requires_keypair': False,
    'enable_quotas': True
}</screen>
        <para>A dictionary containing settings which can be used to identify the
                        capabilities of the hypervisor for Nova.</para>
        <para>The Xen Hypervisor has the ability to set the mount point for volumes attached
                        to instances (other Hypervisors currently do not). Setting
                        <literal>can_set_mount_point</literal> to <literal>True</literal> will add the option to set the mount point
                        from the UI.</para>
        <para>Setting <literal>can_set_password</literal> to <literal>True</literal> will enable the option to set
                        an administrator password when launching or rebuilding an instance.</para>
        <para>Setting <literal>requires_keypair</literal> to <literal>True</literal> will require users to select
                        a key pair when launching an instance.</para>
        <para>Setting <literal>enable_quotas</literal> to <literal>False</literal> will make Horizon treat all Nova
                        quotas as disabled, thus it won’t try to modify them. By default, quotas are
                        enabled.</para>
      </section>
      <section>
        <title>OPENSTACK_NOVA_EXTENSIONS_BLACKLIST</title>
        <para>Default: <literal>[]</literal></para>
        <para>Ignore all listed Nova extensions, and behave as if they were unsupported.
                        Can be used to selectively disable certain costly extensions for performance
                        reasons.</para>
      </section>
    </section>
    <section>
      <title>Sahara</title>
      <warning>
        <para>The Sahara dashboard was removed from Horizon during the Newton cycle,
                        and any settings here should be considered legacy. For more up to date
                        information, see the <link xlink:href="https://github.com/openstack/sahara-dashboard">Sahara Dashboard repo</link></para>
      </warning>
      <section>
        <title>SAHARA_AUTO_IP_ALLOCATION_ENABLED</title>
        <para>Default:  <literal>False</literal></para>
        <para>This setting notifies the Data Processing (Sahara) system whether or not
                        automatic IP allocation is enabled.  You would want to set this to <literal>True</literal>
                        if you were running Nova Networking with <literal>auto_assign_floating_ip</literal> set to
                        <literal>True</literal>.</para>
      </section>
    </section>
    <section>
      <title>Swift</title>
      <section>
        <title>SWIFT_FILE_TRANSFER_CHUNK_SIZE</title>
        <para>Default: <literal>512 * 1024</literal></para>
        <para>This setting specifies the size of the chunk (in bytes) for downloading objects
                        from Swift. Do not make it very large (higher than several dozens of Megabytes,
                        exact number depends on your connection speed), otherwise you may encounter
                        socket timeout. The default value is 524288 bytes (or 512 Kilobytes).</para>
      </section>
    </section>
    <section>
      <title>Trove</title>
      <warning>
        <para>The Trove dashboard was removed from Horizon during the Newton cycle,
                        and any settings here should be considered legacy. For more up to date
                        information, see the <link xlink:href="https://github.com/openstack/trove-dashboard">Trove Dashboard repo</link></para>
      </warning>
      <section>
        <title>TROVE_ADD_DATABASE_PERMS</title>
        <para>Default: <literal>[]</literal></para>
        <para>Trove database extension support. By default, support for creating databases on
                        database instances is turned on. To disable this extensions set the permission
                        to something unusable such as <literal>[!]</literal>.</para>
      </section>
      <section>
        <title>TROVE_ADD_USER_PERMS</title>
        <para>Default: <literal>[]</literal></para>
        <para>Trove users extension support. By default, support for creating users on
                        database instances is turned on. To disable this extensions set the permission
                        to something unusable such as <literal>[!]</literal>.</para>
      </section>
    </section>
  </section>
  <section xml:id="django-settings">
    <title>Django Settings</title>
    <note>
      <para>This is not meant to be anywhere near a complete list of settings for
                    Django. You should always consult the <link xlink:href="https://docs.djangoproject.com/en/dev/topics/settings/">upstream documentation</link>, especially
                    with regards to deployment considerations and security best-practices.</para>
    </note>
    <section>
      <title>ADD_INSTALLED_APPS</title>
      <formalpara>
        <title>See also</title>
        <para>
          <link xlink:href="https://docs.djangoproject.com/en/dev/ref/settings/#installed_apps">Django’s INSTALLED_APPS documentation</link>
        </para>
      </formalpara>
      <para>A list of Django applications to be prepended to the <literal>INSTALLED_APPS</literal>
                    setting. Allows extending the list of installed applications without having
                    to override it completely.</para>
    </section>
    <section>
      <title>ALLOWED_HOSTS</title>
      <formalpara>
        <title>See also</title>
        <para>
          <link xlink:href="https://docs.djangoproject.com/en/dev/ref/settings/#allowed-hosts">Django’s ALLOWED_HOSTS documentation</link>
        </para>
      </formalpara>
      <para>Default: <literal>['localhost']</literal></para>
      <para>This list should contain names (or IP addresses) of the host
                    running the dashboard; if it’s being accessed via name, the
                    DNS name (and probably short-name) should be added, if it’s accessed via
                    IP address, that should be added. The setting may contain more than one entry.</para>
      <note>
        <para>ALLOWED_HOSTS is required. If Horizon is running in production (DEBUG is
                        False), set this with the list of host/domain names that the application
                        can serve. For more information see <link xlink:href="https://docs.djangoproject.com/en/dev/ref/settings/#allowed-hosts">Django’s Allowed Hosts documentation</link></para>
      </note>
    </section>
    <section xml:id="debug-setting">
      <title>DEBUG</title>
      <formalpara>
        <title>See also</title>
        <para>
          <link xlink:href="https://docs.djangoproject.com/en/dev/ref/settings/#debug">Django’s DEBUG documentation</link>
        </para>
      </formalpara>
      <para>Default: <literal>True</literal></para>
      <para>Controls whether unhandled exceptions should generate a generic 500 response
                    or present the user with a pretty-formatted debug information page.</para>
      <para>When set, <xref linkend="cached-template-loaders"/> will not be cached.</para>
      <para>This setting should <emphasis role="bold">always</emphasis> be set to <literal>False</literal> for production deployments
                    as the debug page can display sensitive information to users and attackers
                    alike.</para>
    </section>
    <section>
      <title>SECRET_KEY</title>
      <formalpara>
        <title>See also</title>
        <para>
          <link xlink:href="https://docs.djangoproject.com/en/dev/ref/settings/#secret-key">Django’s SECRET_KEY documentation</link>
        </para>
      </formalpara>
      <para>This should absolutely be set to a unique (and secret) value for your
                    deployment. Unless you are running a load-balancer with multiple Horizon
                    installations behind it, each Horizon instance should have a unique secret key.</para>
      <note>
        <para>Setting a custom secret key:</para>
        <para>You can either set it to a specific value or you can let Horizon generate a
                        default secret key that is unique on this machine, regardless of the
                        amount of Python WSGI workers (if used behind Apache+mod_wsgi). However,
                        there may be situations where you would want to set this explicitly, e.g.
                        when multiple dashboard instances are distributed on different machines
                        (usually behind a load-balancer). Either you have to make sure that a
                        session gets all requests routed to the same dashboard instance or you set
                        the same SECRET_KEY for all of them.</para>
      </note>
      <screen language="python">from horizon.utils import secret_key

SECRET_KEY = secret_key.generate_or_read_from_file(
os.path.join(LOCAL_PATH, '.secret_key_store'))</screen>
      <para>The <literal>local_settings.py.example</literal> file includes a quick-and-easy way to
                    generate a secret key for a single installation.</para>
    </section>
    <section xml:id="static-root">
      <title>STATIC_ROOT</title>
      <formalpara>
        <title>See also</title>
        <para>
          <link xlink:href="https://docs.djangoproject.com/en/dev/ref/settings/#static-root">Django’s STATIC_ROOT documentation</link>
        </para>
      </formalpara>
      <para>Default: <literal>&lt;path_to_horizon&gt;/static</literal></para>
      <para>The absolute path to the directory where static files are collected when
                    collectstatic is run.</para>
    </section>
    <section>
      <title>STATIC_URL</title>
      <formalpara>
        <title>See also</title>
        <para>
          <link xlink:href="https://docs.djangoproject.com/en/dev/ref/settings/#static-url">Django’s STATIC_URL documentation</link>
        </para>
      </formalpara>
      <para>Default: <literal>/static/</literal></para>
      <para>URL that refers to files in <xref linkend="static-root"/>.</para>
      <para>By default this value is <literal>WEBROOT/static/</literal>.</para>
      <para>This value can be changed from the default. When changed, the alias in your
                    webserver configuration should be updated to match.</para>
      <note>
        <para>The value for STATIC_URL must end in ‘/’.</para>
      </note>
      <para>This value is also available in the scss namespace with the variable name
                    $static_url.  Make sure you run <literal>python manage.py collectstatic</literal> and
                    <literal>python manage.py compress</literal> after any changes to this value in settings.py.</para>
    </section>
    <section>
      <title>TEMPLATES</title>
      <formalpara>
        <title>See also</title>
        <para>
          <link xlink:href="https://docs.djangoproject.com/en/dev/ref/settings/#templates">Django’s TEMPLATES documentation</link>
        </para>
      </formalpara>
      <para>Horizon’s usage of the <literal>TEMPLATES</literal> involves 3 further settings below;
                    it is generally advised to use those before attempting to alter the
                    <literal>TEMPLATES</literal> setting itself.</para>
      <section>
        <title>ADD_TEMPLATE_LOADERS</title>
        <para>Template loaders defined here will be loaded at the end of <xref linkend="template-loaders"/>,
                        after the <xref linkend="cached-template-loaders"/> and will never have a cached output.</para>
      </section>
      <section xml:id="cached-template-loaders">
        <title>CACHED_TEMPLATE_LOADERS</title>
        <para>Template loaders defined here will have their output cached if <xref linkend="debug"/>
                        is set to <literal>False</literal>.</para>
      </section>
      <section xml:id="template-loaders">
        <title>TEMPLATE_LOADERS</title>
        <para>These template loaders will be the first loaders and get loaded before the
                        CACHED_TEMPLATE_LOADERS. Use ADD_TEMPLATE_LOADERS if you want to add loaders at
                        the end and not cache loaded templates.
                        After the whole settings process has gone through, TEMPLATE_LOADERS will be:</para>
        <screen language="python">TEMPLATE_LOADERS += (
    ('django.template.loaders.cached.Loader', CACHED_TEMPLATE_LOADERS),
) + tuple(ADD_TEMPLATE_LOADERS)</screen>
      </section>
    </section>
  </section>
</section>

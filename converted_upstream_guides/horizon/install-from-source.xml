<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.1">
  <title>Manual installation</title>
  <para>This page covers the basic installation of horizon in a production
            environment. If you are looking for a developer environment, see
            <xref linkend="quickstart"/>.</para>
  <section>
    <title>System Requirements</title>
    <itemizedlist>
      <listitem>
        <para>Python 2.7</para>
      </listitem>
      <listitem>
        <para>Django 1.8</para>
      </listitem>
      <listitem>
        <para>An accessible <link xlink:href="https://docs.openstack.org/keystone/latest/">keystone</link> endpoint</para>
      </listitem>
      <listitem>
        <para>All other services are optional.
                        Horizon supports the following services as of the Pike release.
                        If the keystone endpoint for a service is configured,
                        horizon detects it and enables its support automatically.</para>
        <itemizedlist>
          <listitem>
            <para><link xlink:href="https://docs.openstack.org/cinder/latest/">cinder</link>: Block Storage</para>
          </listitem>
          <listitem>
            <para><link xlink:href="https://docs.openstack.org/glance/latest/">glance</link>: Image Management</para>
          </listitem>
          <listitem>
            <para><link xlink:href="https://docs.openstack.org/heat/latest/">heat</link>: Orchestration</para>
          </listitem>
          <listitem>
            <para><link xlink:href="https://docs.openstack.org/neutron/latest/">neutron</link>: Networking</para>
          </listitem>
          <listitem>
            <para><link xlink:href="https://docs.openstack.org/nova/latest/">nova</link>: Compute</para>
          </listitem>
          <listitem>
            <para><link xlink:href="https://docs.openstack.org/swift/latest/">swift</link>: Object Storage</para>
          </listitem>
          <listitem>
            <para>Horizon also supports many other OpenStack services via plugins. For more
                                information, see the <xref linkend="install-plugin-registry"/>.</para>
          </listitem>
        </itemizedlist>
      </listitem>
    </itemizedlist>
  </section>
  <section>
    <title>Installation</title>
    <note>
      <para>In the commands below, substitute “&lt;release&gt;” for your version of choice,
                    such as “ocata” or “pike”.</para>
    </note>
    <procedure>
      <step>
        <para>Clone Horizon</para>
        <screen language="console"><?dbsuse-fo font-size="8pt"?>$ git clone https://git.openstack.org/openstack/horizon -b stable/&lt;release&gt; --depth=1
$ cd horizon</screen>
      </step>
      <step>
        <para>Install the horizon python module into your system</para>
        <screen language="console"><?dbsuse-fo font-size="8pt"?>$ sudo pip install -c http://git.openstack.org/cgit/openstack/requirements/plain/upper-constraints.txt?h=stable/&lt;release&gt; .</screen>
      </step>
    </procedure>
  </section>
  <section>
    <title>Configuration</title>
    <para>This section contains a small summary of the critical settings required to run
                horizon. For more details, please refer to <xref linkend="install-settings"/>.</para>
    <section>
      <title>Settings</title>
      <para>Create <literal>openstack_dashboard/local/local_settings.py</literal>. It is usually a good
                    idea to copy <literal>openstack_dashboard/local/local_settings.py.example</literal> and
                    edit it. As a minimum, the follow settings will need to be modified:</para>
      <variablelist>
        <varlistentry>
          <term>
            <literal>DEBUG</literal>
          </term>
          <listitem>
            <para>Set to <literal>False</literal></para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>ALLOWED_HOSTS</literal>
          </term>
          <listitem>
            <para>Set to your domain name(s)</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>OPENSTACK_HOST</literal>
          </term>
          <listitem>
            <para>Set to the IP of your Keystone endpoint. You may also
                                need to alter <literal>OPENSTACK_KEYSTONE_URL</literal></para>
          </listitem>
        </varlistentry>
      </variablelist>
      <note>
        <para>The following steps in the “Configuration” section are optional, but highly
                        recommended in production.</para>
      </note>
    </section>
    <section>
      <title>Translations</title>
      <para>Compile translation message catalogs for internationalization. This step is
                    not required if you do not need to support languages other than US English.
                    GNU <literal>gettext</literal> tool is required to compile message catalogs.</para>
      <screen language="console">$ sudo apt-get install gettext
$ ./manage.py compilemessages</screen>
    </section>
    <section>
      <title>Static Assets</title>
      <para>Compress your static files by adding <literal>COMPRESS_OFFLINE = True</literal> to your
                    <literal>local_settings.py</literal>, then run the following commands</para>
      <screen language="console">$ ./manage.py collectstatic
$ ./manage.py compress</screen>
    </section>
    <section>
      <title>Logging</title>
      <para>Horizons uses Django’s logging configuration mechanism, which can be customized
                    by altering the <literal>LOGGING</literal> dictionary in <literal>local_settings.py</literal>. By default,
                    Horizon’s logging example sets the log level to <literal>INFO</literal>.</para>
      <para>Horizon also uses a number of 3rd-party clients which log separately. The
                    log level for these can still be controlled through Horizon’s <literal>LOGGING</literal>
                    config, however behaviors may vary beyond Horizon’s control.</para>
      <para>For more information regarding configuring logging in Horizon, please
                    read the <link xlink:href="https://docs.djangoproject.com/en/dev/topics/logging">Django logging directive</link> and the <link xlink:href="http://docs.python.org/2/library/logging.html">Python logging directive</link>
                    documentation. Horizon is built on Python and Django.</para>
    </section>
    <section>
      <title>Session Storage</title>
      <para>Horizon uses <link xlink:href="https://docs.djangoproject.com/en/dev/topics/http/sessions/">Django’s sessions framework</link> for handling session data. There
                    are numerous session backends available, which are selected through the
                    <literal>SESSION_ENGINE</literal> setting in your <literal>local_settings.py</literal> file.</para>
      <section>
        <title>Memcached</title>
        <screen language="python">SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
CACHES = {
    'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache'
    'LOCATION': 'my_memcached_host:11211',
}</screen>
        <para>External caching using an application such as memcached offers persistence
                        and shared storage, and can be very useful for small-scale deployment and/or
                        development. However, for distributed and high-availability scenarios
                        memcached has inherent problems which are beyond the scope of this
                        documentation.</para>
        <para>Requirements:</para>
        <itemizedlist>
          <listitem>
            <para>Memcached service running and accessible</para>
          </listitem>
          <listitem>
            <para>Python memcached module installed</para>
          </listitem>
        </itemizedlist>
      </section>
      <section>
        <title>Database</title>
        <screen language="python">SESSION_ENGINE = 'django.core.cache.backends.db.DatabaseCache'
DATABASES = {
    'default': {
        # Database configuration here
    }
}</screen>
        <para>Database-backed sessions are scalable (using an appropriate database strategy),
                        persistent, and can be made high-concurrency and highly-available.</para>
        <para>The downside to this approach is that database-backed sessions are one of the
                        slower session storages, and incur a high overhead under heavy usage. Proper
                        configuration of your database deployment can also be a substantial
                        undertaking and is far beyond the scope of this documentation.</para>
      </section>
      <section>
        <title>Cached Database</title>
        <para>To mitigate the performance issues of database queries, you can also consider
                        using Django’s <literal>cached_db</literal> session backend which utilizes both your database
                        and caching infrastructure to perform write-through caching and efficient
                        retrieval. You can enable this hybrid setting by configuring both your database
                        and cache as discussed above and then using</para>
        <screen language="python">SESSION_ENGINE = "django.contrib.sessions.backends.cached_db"</screen>
      </section>
    </section>
  </section>
  <section>
    <title>Deployment</title>
    <procedure>
      <step>
        <para>Set up a web server with WSGI support. For example, install Apache web
                        server on Ubuntu</para>
        <screen language="console">$ sudo apt-get install apache2 libapache2-mod-wsgi</screen>
        <para>You can either use the provided <literal>openstack_dashboard/wsgi/django.wsgi</literal> or
                        generate a <literal>openstack_dashboard/wsgi/horizon.wsgi</literal> file with the following
                        command (which detects if you use a virtual environment or not to
                        automatically build an adapted WSGI file)</para>
        <screen language="console">$ ./manage.py make_web_conf --wsgi</screen>
        <para>Then configure the web server to host OpenStack dashboard via WSGI.
                        For apache2 web server, you may need to create
                        <literal>/etc/apache2/sites-available/horizon.conf</literal>.
                        The template in DevStack is a good example of the file.
                        <link xlink:href="http://git.openstack.org/cgit/openstack-dev/devstack/tree/files/apache-horizon.template"/>
                        Or, if you previously generated an <literal>openstack_dashboard/wsgi/horizon.wsgi</literal>
                        you can automatically generate an apache configuration file</para>
        <screen language="console">$ ./manage.py make_web_conf --apache &gt; /etc/apache2/sites-available/horizon.conf</screen>
        <para>Same as above but if you want SSL support</para>
        <screen language="console"><?dbsuse-fo font-size="8pt"?>$ ./manage.py make_web_conf --apache --ssl --sslkey=/path/to/ssl/key --sslcert=/path/to/ssl/cert &gt; /etc/apache2/sites-available/horizon.conf</screen>
        <para>By default the apache configuration will launch a number of apache processes
                        equal to the number of CPUs + 1 of the machine on which you launch the
                        <literal>make_web_conf</literal> command. If the target machine is not the same or if you
                        want to specify the number of processes, add the <literal>--processes</literal> option</para>
        <screen language="console"><?dbsuse-fo font-size="8pt"?>$ ./manage.py make_web_conf --apache --processes 10 &gt; /etc/apache2/sites-available/horizon.conf</screen>
      </step>
      <step>
        <para>Enable the above configuration and restart the web server</para>
        <screen language="console">$ sudo a2ensite horizon
$ sudo service apache2 restart</screen>
      </step>
    </procedure>
  </section>
  <section>
    <title>Next Steps</title>
    <itemizedlist>
      <listitem>
        <para><xref linkend="install-settings"/> lists the available settings for horizon.</para>
      </listitem>
      <listitem>
        <para><xref linkend="install-customizing"/> describes how to customize horizon.</para>
      </listitem>
    </itemizedlist>
  </section>
</section>

<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.1">
  <title>Set up session storage for the Dashboard</title>
  <para>The Dashboard uses <link xlink:href="https://docs.djangoproject.com/en/dev/topics/http/sessions/">Django sessions
                framework</link>
            to handle user session data. However, you can use any available session
            back end. You customize the session back end through the
            <literal>SESSION_ENGINE</literal> setting in your <literal>local_settings.py</literal> file.</para>
  <para>After architecting and implementing the core OpenStack
            services and other required services, combined with the Dashboard
            service steps below, users and administrators can use
            the OpenStack dashboard. Refer to the
            
            chapter of the OpenStack End User Guide for
            further instructions on logging in to the Dashboard.</para>
  <para>The following sections describe the pros and cons of each option as it
            pertains to deploying the Dashboard.</para>
  <section>
    <title>Local memory cache</title>
    <para>Local memory storage is the quickest and easiest session back end to set
                up, as it has no external dependencies whatsoever. It has the following
                significant drawbacks:</para>
    <itemizedlist>
      <listitem>
        <para>No shared storage across processes or workers.</para>
      </listitem>
      <listitem>
        <para>No persistence after a process terminates.</para>
      </listitem>
    </itemizedlist>
    <para>The local memory back end is enabled as the default for Horizon solely
                because it has no dependencies. It is not recommended for production
                use, or even for serious development work.</para>
    <screen language="python">SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
CACHES = {
  'default' : {
    'BACKEND': 'django.core.cache.backends.locmem.LocMemCache'
  }
}</screen>
    <para>You can use applications such as <literal>Memcached</literal> or <literal>Redis</literal> for external
                caching. These applications offer persistence and shared storage and are
                useful for small-scale deployments and development.</para>
    <section>
      <title>Memcached</title>
      <para>Memcached is a high-performance and distributed memory object caching
                    system providing in-memory key-value store for small chunks of arbitrary
                    data.</para>
      <para>Requirements:</para>
      <itemizedlist>
        <listitem>
          <para>Memcached service running and accessible.</para>
        </listitem>
        <listitem>
          <para>Python module <literal>python-memcached</literal> installed.</para>
        </listitem>
      </itemizedlist>
      <screen language="python">SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
CACHES = {
  'default': {
    'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
    'LOCATION': 'my_memcached_host:11211',
  }
}</screen>
    </section>
    <section>
      <title>Redis</title>
      <para>Redis is an open source, BSD licensed, advanced key-value store. It is
                    often referred to as a data structure server.</para>
      <para>Requirements:</para>
      <itemizedlist>
        <listitem>
          <para>Redis service running and accessible.</para>
        </listitem>
        <listitem>
          <para>Python modules <literal>redis</literal> and <literal>django-redis</literal> installed.</para>
        </listitem>
      </itemizedlist>
      <screen language="python">SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
CACHES = {
    "default": {
        "BACKEND": "redis_cache.cache.RedisCache",
        "LOCATION": "127.0.0.1:6379:1",
        "OPTIONS": {
            "CLIENT_CLASS": "redis_cache.client.DefaultClient",
        }
    }
}</screen>
    </section>
    <section>
      <title>Initialize and configure the database</title>
      <para>Database-backed sessions are scalable, persistent, and can be made
                    high-concurrency and highly available.</para>
      <para>However, database-backed sessions are one of the slower session storages
                    and incur a high overhead under heavy usage. Proper configuration of
                    your database deployment can also be a substantial undertaking and is
                    far beyond the scope of this documentation.</para>
      <procedure>
        <step>
          <para>Start the MySQL command-line client.</para>
          <screen language="console">$ mysql -u root -p</screen>
        </step>
        <step>
          <para>Enter the MySQL root user’s password when prompted.</para>
        </step>
        <step>
          <para>To configure the MySQL database, create the dash database.</para>
          <screen language="console">mysql&gt; CREATE DATABASE dash;</screen>
        </step>
        <step>
          <para>Create a MySQL user for the newly created dash database that has full
                            control of the database. Replace DASH_DBPASS with a password for the
                            new user.</para>
          <screen language="console"><?dbsuse-fo font-size="8pt"?>mysql&gt; GRANT ALL PRIVILEGES ON dash.* TO 'dash'@'%' IDENTIFIED BY 'DASH_DBPASS';
mysql&gt; GRANT ALL PRIVILEGES ON dash.* TO 'dash'@'localhost' IDENTIFIED BY 'DASH_DBPASS';</screen>
        </step>
        <step>
          <para>Enter <literal>quit</literal> at the <literal>mysql&gt;</literal> prompt to exit MySQL.</para>
        </step>
        <step>
          <para>In the <literal>local_settings.py</literal> file, change these options:</para>
          <screen language="python">SESSION_ENGINE = 'django.contrib.sessions.backends.db'
DATABASES = {
    'default': {
        # Database configuration here
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'dash',
        'USER': 'dash',
        'PASSWORD': 'DASH_DBPASS',
        'HOST': 'localhost',
        'default-character-set': 'utf8'
    }
}</screen>
        </step>
        <step>
          <para>After configuring the <literal>local_settings.py</literal> file as shown, you can run the
                            <command>manage.py syncdb</command> command to populate this newly created
                            database.</para>
          <screen language="console"># /usr/share/openstack-dashboard/manage.py syncdb</screen>
        </step>
        <step>
          <para>The following output is returned:</para>
          <screen language="console"><?dbsuse-fo font-size="8pt"?>Installing custom SQL ...
Installing indexes ...
DEBUG:django.db.backends:(0.008) CREATE INDEX `django_session_c25c2c28` ON `django_session` (`expire_date`);; args=()
No fixtures found.</screen>
        </step>
        <step>
          <para>To avoid a warning when you restart Apache on Ubuntu, create a
                            <literal>blackhole</literal> directory in the Dashboard directory, as follows.</para>
          <screen language="console"># mkdir -p /var/lib/dash/.blackhole</screen>
        </step>
        <step>
          <para>Restart the Apache service.</para>
        </step>
        <step>
          <para>On Ubuntu, restart the <literal>nova-api</literal> service to ensure that the API server
                            can connect to the Dashboard without error.</para>
          <screen language="console"># service nova-api restart</screen>
        </step>
      </procedure>
    </section>
  </section>
  <section>
    <title>Cached database</title>
    <para>To mitigate the performance issues of database queries, you can use the
                Django <literal>cached_db</literal> session back end, which utilizes both your database
                and caching infrastructure to perform write-through caching and
                efficient retrieval.</para>
    <para>Enable this hybrid setting by configuring both your database and cache,
                as discussed previously. Then, set the following value:</para>
    <screen language="python">SESSION_ENGINE = "django.contrib.sessions.backends.cached_db"</screen>
  </section>
  <section>
    <title>Cookies</title>
    <para>If you use Django 1.4 or later, the <literal>signed_cookies</literal> back end avoids
                server load and scaling problems.</para>
    <para>This back end stores session data in a cookie, which is stored by the
                user’s browser. The back end uses a cryptographic signing technique to
                ensure session data is not tampered with during transport. This is not
                the same as encryption; session data is still readable by an attacker.</para>
    <para>The pros of this engine are that it requires no additional dependencies
                or infrastructure overhead, and it scales indefinitely as long as the
                quantity of session data being stored fits into a normal cookie.</para>
    <para>The biggest downside is that it places session data into storage on the
                user’s machine and transports it over the wire. It also limits the
                quantity of session data that can be stored.</para>
    <para>See the Django <link xlink:href="https://docs.djangoproject.com/en/dev/topics/http/sessions/#using-cookie-based-sessions">cookie-based
                    sessions</link>
                documentation.</para>
  </section>
</section>
